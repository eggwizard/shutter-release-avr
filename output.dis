
output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	3a c2       	rjmp	.+1140   	; 0x476 <__ctors_end>
       2:	54 c2       	rjmp	.+1192   	; 0x4ac <__bad_interrupt>
       4:	53 c2       	rjmp	.+1190   	; 0x4ac <__bad_interrupt>
       6:	52 c2       	rjmp	.+1188   	; 0x4ac <__bad_interrupt>
       8:	10 c4       	rjmp	.+2080   	; 0x82a <__vector_4>
       a:	50 c2       	rjmp	.+1184   	; 0x4ac <__bad_interrupt>
       c:	4f c2       	rjmp	.+1182   	; 0x4ac <__bad_interrupt>
       e:	4e c2       	rjmp	.+1180   	; 0x4ac <__bad_interrupt>
      10:	4d c2       	rjmp	.+1178   	; 0x4ac <__bad_interrupt>
      12:	4c c2       	rjmp	.+1176   	; 0x4ac <__bad_interrupt>
      14:	4b c2       	rjmp	.+1174   	; 0x4ac <__bad_interrupt>
      16:	4a c2       	rjmp	.+1172   	; 0x4ac <__bad_interrupt>
      18:	49 c2       	rjmp	.+1170   	; 0x4ac <__bad_interrupt>
      1a:	48 c2       	rjmp	.+1168   	; 0x4ac <__bad_interrupt>
      1c:	bc c2       	rjmp	.+1400   	; 0x596 <__vector_14>
      1e:	46 c2       	rjmp	.+1164   	; 0x4ac <__bad_interrupt>
      20:	45 c2       	rjmp	.+1162   	; 0x4ac <__bad_interrupt>
      22:	44 c2       	rjmp	.+1160   	; 0x4ac <__bad_interrupt>
      24:	43 c2       	rjmp	.+1158   	; 0x4ac <__bad_interrupt>
      26:	42 c2       	rjmp	.+1156   	; 0x4ac <__bad_interrupt>
      28:	41 c2       	rjmp	.+1154   	; 0x4ac <__bad_interrupt>
      2a:	40 c2       	rjmp	.+1152   	; 0x4ac <__bad_interrupt>
      2c:	3f c2       	rjmp	.+1150   	; 0x4ac <__bad_interrupt>
      2e:	3e c2       	rjmp	.+1148   	; 0x4ac <__bad_interrupt>
      30:	3d c2       	rjmp	.+1146   	; 0x4ac <__bad_interrupt>
      32:	3c c2       	rjmp	.+1144   	; 0x4ac <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	60 00       	.word	0x0060	; ????
      36:	03 02       	muls	r16, r19
      38:	03 04       	cpc	r0, r3
      3a:	03 05       	cpc	r16, r3
      3c:	04 07       	cpc	r16, r20
      3e:	0f 00       	.word	0x000f	; ????
      40:	fd 09       	sbc	r31, r13
      42:	fd 0b       	sbc	r31, r29
      44:	fe 01       	movw	r30, r28
      46:	6e 02       	muls	r22, r30
      48:	de 04       	cpc	r13, r14
      4a:	28 20       	and	r2, r8
      4c:	05 00       	.word	0x0005	; ????
      4e:	c2 07       	cpc	r28, r18
      50:	21 07       	cpc	r18, r17
      52:	c9 c3       	rjmp	.+1938   	; 0x7e6 <get_status_btn_click+0x4>
      54:	c7 21       	and	r28, r7
      56:	09 22       	and	r0, r25
      58:	07 a4       	ldd	r0, Z+47	; 0x2f
      5a:	de 47       	sbci	r29, 0x7E	; 126
      5c:	e4 14       	cp	r14, r4
      5e:	23 0d       	add	r18, r3
      60:	36 ce       	rjmp	.-916    	; 0xfffffcce <__eeprom_end+0xff7efcce>
      62:	4f 94 0c 4b 	call	0x129618	; 0x129618 <__data_load_end+0x127716>
      66:	d4 32       	cpi	r29, 0x24	; 36
      68:	2c 51       	subi	r18, 0x1C	; 28
      6a:	02 24       	eor	r0, r2
      6c:	13 6d       	ori	r17, 0xD3	; 211
      6e:	ba 57       	subi	r27, 0x7A	; 122
      70:	98 2d       	mov	r25, r8
      72:	15 25       	eor	r17, r5
      74:	4a b2       	in	r4, 0x1a	; 26
      76:	2d 89       	ldd	r18, Y+21	; 0x15
      78:	12 a5       	ldd	r17, Z+42	; 0x2a
      7a:	b2 85       	ldd	r27, Z+10	; 0x0a
      7c:	11 00       	.word	0x0011	; ????
      7e:	25 13       	cpse	r18, r21
      80:	4f c2       	rjmp	.+1182   	; 0x520 <is_timer_btn_alive>
      82:	cf 30       	cpi	r28, 0x0F	; 15
      84:	24 99       	sbic	0x04, 4	; 4
      86:	12 25       	eor	r17, r2
      88:	6d 49       	sbci	r22, 0x9D	; 157
      8a:	2d 69       	ori	r18, 0x9D	; 157
      8c:	4a b4       	in	r4, 0x2a	; 42
      8e:	44 4c       	sbci	r20, 0xC4	; 196
      90:	00 26       	eor	r0, r16
      92:	10 4e       	sbci	r17, 0xE0	; 224
      94:	c2 cf       	rjmp	.-124    	; 0x1a <__zero_reg__+0x19>
      96:	94 25       	eor	r25, r4
      98:	51 25       	eor	r21, r1
      9a:	ac 64       	ori	r26, 0x4C	; 76
      9c:	51 a2       	std	Z+33, r5	; 0x21
      9e:	45 4b       	sbci	r20, 0xB5	; 181
      a0:	00 27       	eor	r16, r16
      a2:	06 a1       	ldd	r16, Z+38	; 0x26
      a4:	df c7       	rjmp	.+4030   	; 0x1064 <u8g2_draw_string+0x80>
      a6:	10 28       	or	r1, r0
      a8:	09 ec       	ldi	r16, 0xC9	; 201
      aa:	ba 5f       	subi	r27, 0xFA	; 250
      ac:	d4 d6       	rcall	.+3496   	; 0xe56 <u8g2_font_decode_glyph+0xbe>
      ae:	c7 06       	cpc	r12, r23
      b0:	29 0a       	sbc	r2, r25
      b2:	ec ba       	out	0x1c, r14	; 28
      b4:	47 d8       	rcall	.-3954   	; 0xfffff144 <__eeprom_end+0xff7ef144>
      b6:	d6 a7       	std	Z+46, r29	; 0x2e
      b8:	36 00       	.word	0x0036	; ????
      ba:	2a 0b       	sbc	r18, r26
      bc:	35 ce       	rjmp	.-918    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      be:	57 a5       	ldd	r21, Z+47	; 0x2f
      c0:	32 2d       	mov	r19, r2
      c2:	4d 11       	cpse	r20, r13
      c4:	00 2b       	or	r16, r16
      c6:	0a 2d       	mov	r16, r10
      c8:	c6 57       	subi	r28, 0x76	; 118
      ca:	18 0d       	add	r17, r8
      cc:	52 18       	sub	r5, r2
      ce:	01 2c       	mov	r0, r1
      d0:	08 ab       	std	Y+48, r16	; 0x30
      d2:	b6 8f       	std	Z+30, r27	; 0x1e
      d4:	29 29       	or	r18, r9
      d6:	01 2d       	mov	r16, r1
      d8:	06 8c       	ldd	r0, Z+30	; 0x1e
      da:	ce c7       	rjmp	.+3996   	; 0x1078 <u8g2_draw_string+0x94>
      dc:	10 2e       	mov	r1, r16
      de:	06 12       	cpse	r0, r22
      e0:	c3 c7       	rjmp	.+3974   	; 0x1068 <u8g2_draw_string+0x84>
      e2:	10 2f       	mov	r17, r16
      e4:	0e 66       	ori	r16, 0x6E	; 110
      e6:	ba 6f       	ori	r27, 0xFA	; 250
      e8:	31 0d       	add	r19, r1
      ea:	d3 30       	cpi	r29, 0x03	; 3
      ec:	0d d3       	rcall	.+1562   	; 0x708 <print_text+0x16>
      ee:	30 4d       	sbci	r19, 0xD0	; 208
      f0:	01 30       	cpi	r16, 0x01	; 1
      f2:	10 4e       	sbci	r17, 0xE0	; 224
      f4:	c2 cf       	rjmp	.-124    	; 0x7a <__SREG__+0x3b>
      f6:	90 84       	ldd	r9, Z+8	; 0x08
      f8:	da 94       	dec	r13
      fa:	28 d1       	rcall	.+592    	; 0x34c <__SREG__+0x30d>
      fc:	26 8a       	std	Z+22, r2	; 0x16
      fe:	c9 90       	ld	r12, Y+
     100:	00 31       	cpi	r16, 0x10	; 16
     102:	0a 4f       	sbci	r16, 0xFA	; 250
     104:	c2 5f       	subi	r28, 0xF2	; 242
     106:	38 f7       	brcc	.-50     	; 0xd6 <__SREG__+0x97>
     108:	6d 18       	sub	r6, r13
     10a:	02 32       	cpi	r16, 0x22	; 34
     10c:	0b 4e       	sbci	r16, 0xEB	; 235
     10e:	c2 cf       	rjmp	.-124    	; 0x94 <__SREG__+0x55>
     110:	90 84       	ldd	r9, Z+8	; 0x08
     112:	69 b1       	in	r22, 0x09	; 9
     114:	e3 30       	cpi	r30, 0x03	; 3
     116:	33 0e       	add	r3, r19
     118:	4e c2       	rjmp	.+1180   	; 0x5b6 <__vector_14+0x20>
     11a:	cf 90       	pop	r12
     11c:	84 69       	ori	r24, 0x94	; 148
     11e:	69 4e       	sbci	r22, 0xE9	; 233
     120:	c5 64       	ori	r28, 0x45	; 69
     122:	48 00       	.word	0x0048	; ????
     124:	34 0e       	add	r3, r20
     126:	4e c2       	rjmp	.+1180   	; 0x5c4 <__vector_14+0x2e>
     128:	67 a8       	ldd	r6, Z+55	; 0x37
     12a:	25 51       	subi	r18, 0x15	; 21
     12c:	25 4b       	sbci	r18, 0xB5	; 181
     12e:	86 31       	cpi	r24, 0x16	; 22
     130:	0d 07       	cpc	r16, r29
     132:	35 0e       	add	r3, r21
     134:	4e c2       	rjmp	.+1180   	; 0x5d2 <__vector_14+0x3c>
     136:	c7 21       	and	r28, r7
     138:	4d 07       	cpc	r20, r29
     13a:	39 4d       	sbci	r19, 0xD9	; 217
     13c:	c5 64       	ori	r28, 0x45	; 69
     13e:	48 00       	.word	0x0048	; ????
     140:	36 0e       	add	r3, r22
     142:	4e c2       	rjmp	.+1180   	; 0x5e0 <__vector_14+0x4a>
     144:	cf 90       	pop	r12
     146:	a4 e9       	ldi	r26, 0x94	; 148
     148:	a0 84       	ldd	r10, Z+8	; 0x08
     14a:	8e c9       	rjmp	.-3300   	; 0xfffff468 <__eeprom_end+0xff7ef468>
     14c:	90 00       	.word	0x0090	; ????
     14e:	37 09       	sbc	r19, r7
     150:	4e c2       	rjmp	.+1180   	; 0x5ee <__vector_14+0x58>
     152:	c7 b5       	in	r28, 0x27	; 39
     154:	d8 da       	rcall	.-2640   	; 0xfffff706 <__eeprom_end+0xff7ef706>
     156:	06 38       	cpi	r16, 0x86	; 134
     158:	0f 4e       	sbci	r16, 0xEF	; 239
     15a:	c2 cf       	rjmp	.-124    	; 0xe0 <__SREG__+0xa1>
     15c:	90 84       	ldd	r9, Z+8	; 0x08
     15e:	c6 64       	ori	r28, 0x46	; 70
     160:	48 42       	sbci	r20, 0x28	; 40
     162:	63 32       	cpi	r22, 0x23	; 35
     164:	24 00       	.word	0x0024	; ????
     166:	39 0d       	add	r19, r9
     168:	4e c2       	rjmp	.+1180   	; 0x606 <__vector_14+0x70>
     16a:	cf 90       	pop	r12
     16c:	84 8e       	std	Z+28, r8	; 0x1c
     16e:	c9 a0       	ldd	r12, Y+33	; 0x21
     170:	56 86       	std	Z+14, r5	; 0x0e
     172:	04 3a       	cpi	r16, 0xA4	; 164
     174:	08 3a       	cpi	r16, 0xA8	; 168
     176:	c3 c7       	rjmp	.+3974   	; 0x10fe <u8g2_UpdateRefHeight+0x6e>
     178:	10 0f       	add	r17, r16
     17a:	01 3b       	cpi	r16, 0xB1	; 177
     17c:	0a d3       	rcall	.+1556   	; 0x792 <print_text+0xa0>
     17e:	b6 8f       	std	Z+30, r27	; 0x1e
     180:	1d 53       	subi	r17, 0x3D	; 61
     182:	a4 a4       	ldd	r10, Z+44	; 0x2c
     184:	04 3c       	cpi	r16, 0xC4	; 196
     186:	08 cd       	rjmp	.-1520   	; 0xfffffb98 <__eeprom_end+0xff7efb98>
     188:	c2 67       	ori	r28, 0x72	; 114
     18a:	d6 b5       	in	r29, 0x26	; 38
     18c:	03 3d       	cpi	r16, 0xD3	; 211
     18e:	08 26       	eor	r0, r24
     190:	ce c7       	rjmp	.+3996   	; 0x112e <u8g2_SetFont+0xc>
     192:	1d 1d       	adc	r17, r13
     194:	06 3e       	cpi	r16, 0xE6	; 230
     196:	09 cd       	rjmp	.-1518   	; 0xfffffbaa <__eeprom_end+0xff7efbaa>
     198:	c2 47       	sbci	r28, 0x72	; 114
     19a:	da ad       	ldd	r29, Y+58	; 0x3a
     19c:	23 00       	.word	0x0023	; ????
     19e:	3f 0c       	add	r3, r15
     1a0:	4e c2       	rjmp	.+1180   	; 0x63e <__vector_14+0xa8>
     1a2:	cf 90       	pop	r12
     1a4:	84 69       	ori	r24, 0x94	; 148
     1a6:	b1 1d       	adc	r27, r1
     1a8:	cc 00       	.word	0x00cc	; ????
     1aa:	40 0f       	add	r20, r16
     1ac:	4e c2       	rjmp	.+1180   	; 0x64a <__vector_14+0xb4>
     1ae:	cf 90       	pop	r12
     1b0:	84 d2       	rcall	.+1288   	; 0x6ba <init_oled+0x14>
     1b2:	90 44       	sbci	r25, 0x40	; 64
     1b4:	4a 64       	ori	r20, 0x4A	; 74
     1b6:	49 e3       	ldi	r20, 0x39	; 57
     1b8:	41 41       	sbci	r20, 0x11	; 17
     1ba:	0d 4e       	sbci	r16, 0xED	; 237
     1bc:	c2 97       	sbiw	r24, 0x32	; 50
     1be:	a8 45       	sbci	r26, 0x58	; 88
     1c0:	2d e1       	ldi	r18, 0x1D	; 29
     1c2:	30 88       	ldd	r3, Z+16	; 0x10
     1c4:	c6 00       	.word	0x00c6	; ????
     1c6:	42 0d       	add	r20, r2
     1c8:	4e c2       	rjmp	.+1180   	; 0x666 <sys_init+0xc>
     1ca:	c7 a0       	ldd	r12, Z+39	; 0x27
     1cc:	84 c6       	rjmp	.+3336   	; 0xed6 <u8g2_font_decode_glyph+0x13e>
     1ce:	61 09       	sbc	r22, r1
     1d0:	8d c3       	rjmp	.+1818   	; 0x8ec <__vector_4+0xc2>
     1d2:	02 43       	sbci	r16, 0x32	; 50
     1d4:	0c 4e       	sbci	r16, 0xEC	; 236
     1d6:	c2 cf       	rjmp	.-124    	; 0x15c <__SREG__+0x11d>
     1d8:	90 84       	ldd	r9, Z+8	; 0x08
     1da:	6a 8f       	std	Y+26, r22	; 0x1a
     1dc:	c9 90       	ld	r12, Y+
     1de:	00 44       	sbci	r16, 0x40	; 64
     1e0:	0b 4e       	sbci	r16, 0xEB	; 235
     1e2:	c2 c7       	rjmp	.+3972   	; 0x1168 <u8g2_draw_hv_line_4dir+0x22>
     1e4:	a0 84       	ldd	r10, Z+8	; 0x08
     1e6:	7e 1c       	adc	r7, r14
     1e8:	16 00       	.word	0x0016	; ????
     1ea:	45 0c       	add	r4, r5
     1ec:	4e c2       	rjmp	.+1180   	; 0x68a <main+0x12>
     1ee:	c7 21       	and	r28, r7
     1f0:	ad 0e       	add	r10, r29
     1f2:	4a 5a       	subi	r20, 0xAA	; 170
     1f4:	1d 06       	cpc	r1, r29
     1f6:	46 0b       	sbc	r20, r22
     1f8:	4e c2       	rjmp	.+1180   	; 0x696 <main+0x1e>
     1fa:	c7 21       	and	r28, r7
     1fc:	ad 0e       	add	r10, r29
     1fe:	4a da       	rcall	.-2924   	; 0xfffff694 <__eeprom_end+0xff7ef694>
     200:	0a 47       	sbci	r16, 0x7A	; 122
     202:	0d 4e       	sbci	r16, 0xED	; 237
     204:	c2 cf       	rjmp	.-124    	; 0x18a <__SREG__+0x14b>
     206:	90 84       	ldd	r9, Z+8	; 0x08
     208:	6a 6d       	ori	r22, 0xDA	; 218
     20a:	34 26       	eor	r3, r20
     20c:	43 02       	muls	r20, r19
     20e:	48 0b       	sbc	r20, r24
     210:	4e c2       	rjmp	.+1180   	; 0x6ae <init_oled+0x8>
     212:	47 e8       	ldi	r20, 0x87	; 135
     214:	38 0c       	add	r3, r8
     216:	a2 63       	ori	r26, 0x32	; 50
     218:	00 49       	sbci	r16, 0x90	; 144
     21a:	0b 4f       	sbci	r16, 0xFB	; 251
     21c:	c2 c7       	rjmp	.+3972   	; 0x11a2 <u8g2_draw_hv_line_4dir+0x5c>
     21e:	21 8b       	std	Z+17, r18	; 0x11
     220:	fb 36       	cpi	r31, 0x6B	; 107
     222:	0c 01       	movw	r0, r24
     224:	4a 0b       	sbc	r20, r26
     226:	4e c2       	rjmp	.+1180   	; 0x6c4 <init_oled+0x1e>
     228:	6f 57       	subi	r22, 0x7F	; 127
     22a:	d1 98       	cbi	0x1a, 1	; 26
     22c:	0c 09       	sbc	r16, r12
     22e:	00 4b       	sbci	r16, 0xB0	; 176
     230:	10 4e       	sbci	r17, 0xE0	; 224
     232:	c2 47       	sbci	r28, 0x72	; 114
     234:	a8 25       	eor	r26, r8
     236:	51 25       	eor	r21, r1
     238:	13 93       	.word	0x9313	; ????
     23a:	2c aa       	std	Y+52, r2	; 0x34
     23c:	25 61       	ori	r18, 0x15	; 21
     23e:	00 4c       	sbci	r16, 0xC0	; 192
     240:	09 4e       	sbci	r16, 0xE9	; 233
     242:	c2 47       	sbci	r28, 0x72	; 114
     244:	da af       	std	Y+58, r29	; 0x3a
     246:	c3 00       	.word	0x00c3	; ????
     248:	4d 0d       	add	r20, r13
     24a:	4f c2       	rjmp	.+1182   	; 0x6ea <render_oled+0x14>
     24c:	47 ba       	out	0x17, r4	; 23
     24e:	2d 15       	cp	r18, r13
     250:	29 92       	st	Y+, r2
     252:	22 d5       	rcall	.+2628   	; 0xc98 <u8g2_font_decode_get_unsigned_bits+0x3e>
     254:	35 4e       	sbci	r19, 0xE5	; 229
     256:	0d 4e       	sbci	r16, 0xED	; 237
     258:	c2 47       	sbci	r28, 0x72	; 114
     25a:	b8 29       	or	r27, r8
     25c:	91 94       	neg	r9
     25e:	68 a3       	std	Y+32, r22	; 0x20
     260:	63 00       	.word	0x0063	; ????
     262:	4f 0b       	sbc	r20, r31
     264:	4e c2       	rjmp	.+1180   	; 0x702 <print_text+0x10>
     266:	cf 90       	pop	r12
     268:	84 7e       	andi	r24, 0xE4	; 228
     26a:	4c 86       	std	Y+12, r4	; 0x0c
     26c:	04 50       	subi	r16, 0x04	; 4
     26e:	0c 4e       	sbci	r16, 0xEC	; 236
     270:	c2 c7       	rjmp	.+3972   	; 0x11f6 <u8g2_draw_hv_line_4dir+0xb0>
     272:	a0 84       	ldd	r10, Z+8	; 0x08
     274:	c6 61       	ori	r28, 0x16	; 22
     276:	49 5b       	subi	r20, 0xB9	; 185
     278:	01 51       	subi	r16, 0x11	; 17
     27a:	0e 56       	subi	r16, 0x6E	; 110
     27c:	be cf       	rjmp	.-132    	; 0x1fa <__SREG__+0x1bb>
     27e:	90 84       	ldd	r9, Z+8	; 0x08
     280:	be 44       	sbci	r27, 0x4E	; 78
     282:	52 92       	st	-Z, r5
     284:	0c 71       	andi	r16, 0x1C	; 28
     286:	00 52       	subi	r16, 0x20	; 32
     288:	0c 4e       	sbci	r16, 0xEC	; 236
     28a:	c2 c7       	rjmp	.+3972   	; 0x1210 <u8g2_DrawHVLine+0xe>
     28c:	a0 84       	ldd	r10, Z+8	; 0x08
     28e:	c6 61       	ori	r28, 0x16	; 22
     290:	09 1d       	adc	r16, r9
     292:	03 53       	subi	r16, 0x33	; 51
     294:	0f 4e       	sbci	r16, 0xEF	; 239
     296:	c2 cf       	rjmp	.-124    	; 0x21c <__SREG__+0x1dd>
     298:	90 84       	ldd	r9, Z+8	; 0x08
     29a:	6a 3c       	cpi	r22, 0xCA	; 202
     29c:	c4 a9       	ldd	r28, Z+52	; 0x34
     29e:	98 0c       	add	r9, r8
     2a0:	09 00       	.word	0x0009	; ????
     2a2:	54 09       	sbc	r21, r4
     2a4:	4f c2       	rjmp	.+1182   	; 0x744 <print_text+0x52>
     2a6:	c7 21       	and	r28, r7
     2a8:	8b fb       	.word	0xfb8b	; ????
     2aa:	0d 55       	subi	r16, 0x5D	; 93
     2ac:	0a 4e       	sbci	r16, 0xEA	; 234
     2ae:	c2 47       	sbci	r28, 0x72	; 114
     2b0:	e8 8f       	std	Y+24, r30	; 0x18
     2b2:	c9 90       	ld	r12, Y+
     2b4:	00 56       	subi	r16, 0x60	; 96
     2b6:	0f 4f       	sbci	r16, 0xFF	; 255
     2b8:	c2 47       	sbci	r28, 0x72	; 114
     2ba:	6a 4d       	sbci	r22, 0xDA	; 218
     2bc:	b2 28       	or	r11, r2
     2be:	ab 84       	ldd	r10, Y+11	; 0x0b
     2c0:	49 1a       	sub	r4, r25
     2c2:	67 00       	.word	0x0067	; ????
     2c4:	57 0d       	add	r21, r7
     2c6:	4f c2       	rjmp	.+1182   	; 0x766 <print_text+0x74>
     2c8:	47 ea       	ldi	r20, 0xA7	; 167
     2ca:	29 92       	st	Y+, r2
     2cc:	22 a5       	ldd	r18, Z+42	; 0x2a
     2ce:	b2 ad       	ldd	r27, Z+58	; 0x3a
     2d0:	01 58       	subi	r16, 0x81	; 129
     2d2:	0e 4e       	sbci	r16, 0xEE	; 238
     2d4:	c2 47       	sbci	r28, 0x72	; 114
     2d6:	68 4c       	sbci	r22, 0xC8	; 200
     2d8:	a2 4c       	sbci	r26, 0xC2	; 194
     2da:	d4 a2       	std	Z+36, r13	; 0x24
     2dc:	24 14       	cp	r2, r4
     2de:	03 59       	subi	r16, 0x93	; 147
     2e0:	0c 4f       	sbci	r16, 0xFC	; 252
     2e2:	c2 47       	sbci	r28, 0x72	; 114
     2e4:	6a 4d       	sbci	r22, 0xDA	; 218
     2e6:	b2 4a       	sbci	r27, 0xA2	; 162
     2e8:	1a b7       	in	r17, 0x3a	; 58
     2ea:	01 5a       	subi	r16, 0xA1	; 161
     2ec:	0a 4e       	sbci	r16, 0xEA	; 234
     2ee:	c2 c7       	rjmp	.+3972   	; 0x1274 <u8g2_IsIntersection+0x26>
     2f0:	35 ec       	ldi	r19, 0xC5	; 197
     2f2:	35 1d       	adc	r19, r5
     2f4:	06 5b       	subi	r16, 0xB6	; 182
     2f6:	09 63       	ori	r16, 0x39	; 57
     2f8:	bf c7       	rjmp	.+3966   	; 0x1278 <u8g2_IsIntersection+0x2a>
     2fa:	10 f5       	brcc	.+68     	; 0x340 <__SREG__+0x301>
     2fc:	4f 03       	fmul	r20, r23
     2fe:	5c 0e       	add	r5, r28
     300:	e6 ba       	out	0x16, r14	; 22
     302:	47 1a       	sub	r4, r23
     304:	a7 71       	andi	r26, 0x17	; 23
     306:	1a a7       	std	Y+42, r17	; 0x2a
     308:	71 1a       	sub	r7, r17
     30a:	a7 01       	movw	r20, r14
     30c:	5d 09       	sbc	r21, r13
     30e:	e3 be       	out	0x33, r14	; 51
     310:	c7 d4       	rcall	.+2446   	; 0xca0 <u8g2_font_decode_get_unsigned_bits+0x46>
     312:	3f 0d       	add	r19, r15
     314:	01 5e       	subi	r16, 0xE1	; 225
     316:	08 9d       	mul	r16, r8
     318:	da 57       	subi	r29, 0x7A	; 122
     31a:	96 d4       	rcall	.+2348   	; 0xc48 <u8g2_read_font_info+0xa6>
     31c:	02 5f       	subi	r16, 0xF2	; 242
     31e:	06 0f       	add	r16, r22
     320:	ba c7       	rjmp	.+3956   	; 0x1296 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
     322:	21 60       	ori	r18, 0x01	; 1
     324:	06 9b       	sbis	0x00, 6	; 0
     326:	e2 47       	sbci	r30, 0x72	; 114
     328:	56 61       	ori	r21, 0x16	; 22
     32a:	0b 36       	cpi	r16, 0x6B	; 107
     32c:	c2 cf       	rjmp	.-124    	; 0x2b2 <__SREG__+0x273>
     32e:	30 da       	rcall	.-2976   	; 0xfffff790 <__eeprom_end+0xff7ef790>
     330:	a6 24       	eor	r10, r6
     332:	91 02       	muls	r25, r17
     334:	62 0c       	add	r6, r2
     336:	4e c2       	rjmp	.+1180   	; 0x7d4 <timer_btn_timeout_handler+0x8>
     338:	47 5a       	subi	r20, 0xA7	; 167
     33a:	1d 94 d0 71 	jmp	0x6e3a0	; 0x6e3a0 <__data_load_end+0x6c49e>
     33e:	58 00       	.word	0x0058	; ????
     340:	63 0a       	sbc	r6, r19
     342:	36 c2       	rjmp	.+1132   	; 0x7b0 <print_text+0xbe>
     344:	cf 90       	pop	r12
     346:	84 6a       	ori	r24, 0xA4	; 164
     348:	79 10       	cpse	r7, r9
     34a:	64 0b       	sbc	r22, r20
     34c:	4e c2       	rjmp	.+1180   	; 0x7ea <get_status_btn_click+0x8>
     34e:	6f cb       	rjmp	.-2338   	; 0xfffffa2e <__eeprom_end+0xff7efa2e>
     350:	30 3a       	cpi	r19, 0xA0	; 160
     352:	26 83       	std	Z+6, r18	; 0x06
     354:	00 65       	ori	r16, 0x50	; 80
     356:	0c 36       	cpi	r16, 0x6C	; 108
     358:	c2 cf       	rjmp	.-124    	; 0x2de <__SREG__+0x29f>
     35a:	90 84       	ldd	r9, Z+8	; 0x08
     35c:	c3 a0       	ldd	r12, Z+35	; 0x23
     35e:	c6 83       	std	Z+6, r28	; 0x06
     360:	00 66       	ori	r16, 0x60	; 96
     362:	0a cc       	rjmp	.-2028   	; 0xfffffb78 <__eeprom_end+0xff7efb78>
     364:	c2 97       	sbiw	r24, 0x32	; 50
     366:	92 45       	sbci	r25, 0x52	; 82
     368:	53 d6       	rcall	.+3238   	; 0x1010 <u8g2_draw_string+0x2c>
     36a:	09 67       	ori	r16, 0x79	; 121
     36c:	0d 4e       	sbci	r16, 0xED	; 237
     36e:	b6 cf       	rjmp	.-148    	; 0x2dc <__SREG__+0x29d>
     370:	30 3a       	cpi	r19, 0xA0	; 160
     372:	26 83       	std	Z+6, r18	; 0x06
     374:	5a 19       	sub	r21, r10
     376:	12 00       	.word	0x0012	; ????
     378:	68 0b       	sbc	r22, r24
     37a:	4e c2       	rjmp	.+1180   	; 0x818 <init_encoder+0x1c>
     37c:	47 5a       	subi	r20, 0xA7	; 167
     37e:	1d 94 d0 63 	jmp	0x6c7a0	; 0x6c7a0 <__data_load_end+0x6a89e>
     382:	00 69       	ori	r16, 0x90	; 144
     384:	09 4b       	sbci	r16, 0xB9	; 185
     386:	c3 4f       	sbci	r28, 0xF3	; 243
     388:	0e 48       	sbci	r16, 0x8E	; 142
     38a:	5d 06       	cpc	r5, r29
     38c:	6a 0a       	sbc	r6, r26
     38e:	e3 b6       	in	r14, 0x33	; 51
     390:	57 0e       	add	r5, r23
     392:	48 7d       	andi	r20, 0xD8	; 216
     394:	5a 00       	.word	0x005a	; ????
     396:	6b 0e       	add	r6, r27
     398:	4e c2       	rjmp	.+1180   	; 0x836 <__vector_4+0xc>
     39a:	47 da       	rcall	.-2930   	; 0xfffff82a <__eeprom_end+0xff7ef82a>
     39c:	96 44       	sbci	r25, 0x46	; 70
     39e:	95 4c       	sbci	r25, 0xC5	; 197
     3a0:	89 b2       	in	r8, 0x19	; 25
     3a2:	24 0c       	add	r2, r4
     3a4:	6c 08       	sbc	r6, r12
     3a6:	4b c3       	rjmp	.+1686   	; 0xa3e <u8g2_send_buffer+0x5e>
     3a8:	87 d4       	rcall	.+2318   	; 0xcb8 <u8g2_font_setup_decode+0x2>
     3aa:	2f 03       	fmul	r18, r23
     3ac:	6d 0d       	add	r22, r13
     3ae:	37 c2       	rjmp	.+1134   	; 0x81e <init_encoder+0x22>
     3b0:	c7 25       	eor	r28, r7
     3b2:	8a a4       	ldd	r8, Y+42	; 0x2a
     3b4:	48 8a       	std	Y+16, r4	; 0x10
     3b6:	a4 48       	sbci	r26, 0x84	; 132
     3b8:	2a 6e       	ori	r18, 0xEA	; 234
     3ba:	0a 36       	cpi	r16, 0x6A	; 106
     3bc:	c2 47       	sbci	r28, 0x72	; 114
     3be:	a4 94       	.word	0x94a4	; ????
     3c0:	36 d1       	rcall	.+620    	; 0x62e <__vector_14+0x98>
     3c2:	18 6f       	ori	r17, 0xF8	; 248
     3c4:	0b 36       	cpi	r16, 0x6B	; 107
     3c6:	c2 cf       	rjmp	.-124    	; 0x34c <__SREG__+0x30d>
     3c8:	90 84       	ldd	r9, Z+8	; 0x08
     3ca:	8e c9       	rjmp	.-3300   	; 0xfffff6e8 <__eeprom_end+0xff7ef6e8>
     3cc:	90 00       	.word	0x0090	; ????
     3ce:	70 0c       	add	r7, r0
     3d0:	4e b6       	in	r4, 0x3e	; 62
     3d2:	c7 a0       	ldd	r12, Z+39	; 0x27
     3d4:	84 8e       	std	Z+28, r8	; 0x1c
     3d6:	c3 92       	.word	0x92c3	; ????
     3d8:	56 01       	movw	r10, r12
     3da:	71 0b       	sbc	r23, r17
     3dc:	4e b6       	in	r4, 0x3e	; 62
     3de:	cf 30       	cpi	r28, 0x0F	; 15
     3e0:	3a 26       	eor	r3, r26
     3e2:	83 da       	rcall	.-2810   	; 0xfffff8ea <__eeprom_end+0xff7ef8ea>
     3e4:	00 72       	andi	r16, 0x20	; 32
     3e6:	0a 36       	cpi	r16, 0x6A	; 106
     3e8:	c2 47       	sbci	r28, 0x72	; 114
     3ea:	a4 94       	.word	0x94a4	; ????
     3ec:	c6 b4       	in	r12, 0x26	; 38
     3ee:	0a 73       	andi	r16, 0x3A	; 58
     3f0:	0b 36       	cpi	r16, 0x6B	; 107
     3f2:	c2 cf       	rjmp	.-124    	; 0x378 <__SREG__+0x339>
     3f4:	30 0f       	add	r19, r16
     3f6:	71 3a       	cpi	r23, 0xA1	; 161
     3f8:	2c 00       	.word	0x002c	; ????
     3fa:	74 0a       	sbc	r7, r20
     3fc:	cc c2       	rjmp	.+1432   	; 0x996 <u8x8_gpio_and_delay_avr+0xc>
     3fe:	4f 56       	subi	r20, 0x6F	; 111
     400:	9a b2       	in	r9, 0x1a	; 26
     402:	46 01       	movw	r8, r12
     404:	75 0a       	sbc	r7, r21
     406:	36 c2       	rjmp	.+1132   	; 0x874 <__vector_4+0x4a>
     408:	47 e8       	ldi	r20, 0x87	; 135
     40a:	36 25       	eor	r19, r6
     40c:	89 14       	cp	r8, r9
     40e:	76 0b       	sbc	r23, r22
     410:	36 c2       	rjmp	.+1132   	; 0x87e <__vector_4+0x54>
     412:	47 28       	or	r4, r7
     414:	26 51       	subi	r18, 0x16	; 22
     416:	9b 28       	or	r9, r11
     418:	01 77       	andi	r16, 0x71	; 113
     41a:	0e 37       	cpi	r16, 0x7E	; 126
     41c:	c2 47       	sbci	r28, 0x72	; 114
     41e:	14 49       	sbci	r17, 0x94	; 148
     420:	91 14       	cp	r9, r1
     422:	49 91       	ld	r20, Y+
     424:	54 b1       	in	r21, 0x04	; 4
     426:	00 78       	andi	r16, 0x80	; 128
     428:	0c 36       	cpi	r16, 0x6C	; 108
     42a:	c2 47       	sbci	r28, 0x72	; 114
     42c:	98 44       	sbci	r25, 0x48	; 72
     42e:	99 a8       	ldd	r9, Y+49	; 0x31
     430:	45 49       	sbci	r20, 0x95	; 149
     432:	18 79       	andi	r17, 0x98	; 152
     434:	0c 4e       	sbci	r16, 0xEC	; 236
     436:	b6 47       	sbci	r27, 0x76	; 118
     438:	e8 31       	cpi	r30, 0x18	; 24
     43a:	19 d4       	rcall	.+2098   	; 0xc6e <u8g2_font_decode_get_unsigned_bits+0x14>
     43c:	ca 90       	ld	r12, -Y
     43e:	00 7a       	andi	r16, 0xA0	; 160
     440:	08 36       	cpi	r16, 0x68	; 104
     442:	c2 c7       	rjmp	.+3972   	; 0x13c8 <u8g2_draw_l90_r0+0x4>
     444:	b1 e3       	ldi	r27, 0x31	; 49
     446:	30 7b       	andi	r19, 0xB0	; 176
     448:	0b fc       	.word	0xfc0b	; ????
     44a:	b6 97       	sbiw	r30, 0x26	; 38
     44c:	92 f5       	brpl	.+100    	; 0x4b2 <test_func+0x4>
     44e:	14 66       	ori	r17, 0x64	; 100
     450:	3d 0a       	sbc	r3, r29
     452:	7c 07       	cpc	r23, r28
     454:	e9 bb       	out	0x19, r30	; 25
     456:	c7 87       	std	Z+15, r28	; 0x0f
     458:	00 7d       	andi	r16, 0xD0	; 208
     45a:	0c fc       	.word	0xfc0c	; ????
     45c:	b6 87       	std	Z+14, r27	; 0x0e
     45e:	98 f5       	brcc	.+102    	; 0x4c6 <test_func+0x18>
     460:	18 65       	ori	r17, 0x58	; 88
     462:	bd 48       	sbci	r27, 0x8D	; 141
     464:	00 7e       	andi	r16, 0xE0	; 224
     466:	07 16       	cp	r0, r23
     468:	d2 8f       	std	Z+26, r29	; 0x1a
     46a:	64 01       	movw	r12, r8
     46c:	7f 05       	cpc	r23, r15
     46e:	00 c2       	rjmp	.+1024   	; 0x870 <__vector_4+0x46>
     470:	07 00       	.word	0x0007	; ????
     472:	00 00       	nop
	...

00000476 <__ctors_end>:
     476:	11 24       	eor	r1, r1
     478:	1f be       	out	0x3f, r1	; 63
     47a:	cf ef       	ldi	r28, 0xFF	; 255
     47c:	d4 e0       	ldi	r29, 0x04	; 4
     47e:	de bf       	out	0x3e, r29	; 62
     480:	cd bf       	out	0x3d, r28	; 61

00000482 <__do_copy_data>:
     482:	11 e0       	ldi	r17, 0x01	; 1
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b1 e0       	ldi	r27, 0x01	; 1
     488:	e8 e7       	ldi	r30, 0x78	; 120
     48a:	fe e1       	ldi	r31, 0x1E	; 30
     48c:	02 c0       	rjmp	.+4      	; 0x492 <__do_copy_data+0x10>
     48e:	05 90       	lpm	r0, Z+
     490:	0d 92       	st	X+, r0
     492:	aa 38       	cpi	r26, 0x8A	; 138
     494:	b1 07       	cpc	r27, r17
     496:	d9 f7       	brne	.-10     	; 0x48e <__do_copy_data+0xc>

00000498 <__do_clear_bss>:
     498:	23 e0       	ldi	r18, 0x03	; 3
     49a:	aa e8       	ldi	r26, 0x8A	; 138
     49c:	b1 e0       	ldi	r27, 0x01	; 1
     49e:	01 c0       	rjmp	.+2      	; 0x4a2 <.do_clear_bss_start>

000004a0 <.do_clear_bss_loop>:
     4a0:	1d 92       	st	X+, r1

000004a2 <.do_clear_bss_start>:
     4a2:	a1 30       	cpi	r26, 0x01	; 1
     4a4:	b2 07       	cpc	r27, r18
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <.do_clear_bss_loop>
     4a8:	e7 d0       	rcall	.+462    	; 0x678 <main>
     4aa:	e4 cc       	rjmp	.-1592   	; 0xfffffe74 <__eeprom_end+0xff7efe74>

000004ac <__bad_interrupt>:
     4ac:	a9 cd       	rjmp	.-1198   	; 0x0 <__vectors>

000004ae <test_func>:
	sei();
}



void test_func (void){
     4ae:	a4 e1       	ldi	r26, 0x14	; 20
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	ec e5       	ldi	r30, 0x5C	; 92
     4b4:	f2 e0       	ldi	r31, 0x02	; 2
     4b6:	18 ca       	rjmp	.-3024   	; 0xfffff8e8 <__eeprom_end+0xff7ef8e8>

	char msg_temp[20]={0};
     4b8:	8e 01       	movw	r16, r28
     4ba:	0f 5f       	subi	r16, 0xFF	; 255
     4bc:	1f 4f       	sbci	r17, 0xFF	; 255
     4be:	84 e1       	ldi	r24, 0x14	; 20
     4c0:	f8 01       	movw	r30, r16
     4c2:	11 92       	st	Z+, r1
     4c4:	8a 95       	dec	r24
     4c6:	e9 f7       	brne	.-6      	; 0x4c2 <test_func+0x14>

	sprintf(msg_temp, "< Shutter > ");
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	71 e0       	ldi	r23, 0x01	; 1
     4cc:	c8 01       	movw	r24, r16
     4ce:	3c da       	rcall	.-2952   	; 0xfffff948 <__eeprom_end+0xff7ef948>
	print_text(0, 10, msg_temp, OLED_PRINT_BLINK);
     4d0:	22 e0       	ldi	r18, 0x02	; 2
     4d2:	a8 01       	movw	r20, r16
     4d4:	6a e0       	ldi	r22, 0x0A	; 10
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0a d1       	rcall	.+532    	; 0x6f2 <print_text>

	sprintf(msg_temp, "BTN:%d%d, ENC:%3d", temp1, temp2, get_enc_counter());
     4de:	8b d1       	rcall	.+790    	; 0x7f6 <get_enc_counter>
     4e0:	1f 92       	push	r1
     4e2:	8f 93       	push	r24
     4e4:	80 91 8a 01 	lds	r24, 0x018A
     4e8:	1f 92       	push	r1
     4ea:	8f 93       	push	r24
     4ec:	80 91 8b 01 	lds	r24, 0x018B
     4f0:	1f 92       	push	r1
     4f2:	8f 93       	push	r24
     4f4:	8e e0       	ldi	r24, 0x0E	; 14
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	1f 93       	push	r17
     4fe:	0f 93       	push	r16
     500:	2a da       	rcall	.-2988   	; 0xfffff956 <__eeprom_end+0xff7ef956>
	print_text(0, 21, msg_temp, 0);
     502:	20 e0       	ldi	r18, 0x00	; 0
     504:	a8 01       	movw	r20, r16
     506:	65 e1       	ldi	r22, 0x15	; 21
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	f1 d0       	rcall	.+482    	; 0x6f2 <print_text>
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
	//sprintf(msg_temp, "PINC012 %d%d%d", (PINC&1),(PINC&2)>0, (PINC&4)>0 );
	//print_text(0, 32, msg_temp, 0);
	
	//sprintf(msg_temp, "INT0(PD2) %d", (PIND & 0b100)>0);
	//print_text(0, 3, msg_temp, 0);
}
     51a:	64 96       	adiw	r28, 0x14	; 20
     51c:	e4 e0       	ldi	r30, 0x04	; 4
     51e:	00 ca       	rjmp	.-3072   	; 0xfffff920 <__eeprom_end+0xff7ef920>

00000520 <is_timer_btn_alive>:
	_delay_ms(100);	
	init_encoder();	
	init_clock();
	init_oled();
	
	tic();
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	20 91 8c 01 	lds	r18, 0x018C
     526:	30 91 8d 01 	lds	r19, 0x018D
     52a:	12 16       	cp	r1, r18
     52c:	13 06       	cpc	r1, r19
     52e:	0c f0       	brlt	.+2      	; 0x532 <is_timer_btn_alive+0x12>
     530:	80 e0       	ldi	r24, 0x00	; 0
	sei();
}



     532:	08 95       	ret

00000534 <kill_timer_btn>:
void test_func (void){

	char msg_temp[20]={0};
     534:	10 92 8d 01 	sts	0x018D, r1
     538:	10 92 8c 01 	sts	0x018C, r1
     53c:	08 95       	ret

0000053e <install_timer_btn>:

	sprintf(msg_temp, "< Shutter > ");
	print_text(0, 10, msg_temp, OLED_PRINT_BLINK);

	sprintf(msg_temp, "BTN:%d%d, ENC:%3d", temp1, temp2, get_enc_counter());
     53e:	90 93 8f 01 	sts	0x018F, r25
     542:	80 93 8e 01 	sts	0x018E, r24
	print_text(0, 21, msg_temp, 0);
     546:	cb 01       	movw	r24, r22
     548:	6a e0       	ldi	r22, 0x0A	; 10
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	ab d9       	rcall	.-3242   	; 0xfffff8a4 <__eeprom_end+0xff7ef8a4>
     54e:	70 93 8d 01 	sts	0x018D, r23
     552:	60 93 8c 01 	sts	0x018C, r22
     556:	08 95       	ret

00000558 <init_clock>:

	for(;;){  

//		u8g2_FirstPage(&u8g2);
//		do{
//	  		draw();
     558:	8a ef       	ldi	r24, 0xFA	; 250
     55a:	87 bd       	out	0x27, r24	; 39
//
     55c:	84 b5       	in	r24, 0x24	; 36
     55e:	82 60       	ori	r24, 0x02	; 2
     560:	84 bd       	out	0x24, r24	; 36
//		} while ( u8g2_NextPage(&u8g2) );
     562:	85 b5       	in	r24, 0x25	; 37
     564:	83 60       	ori	r24, 0x03	; 3
     566:	85 bd       	out	0x25, r24	; 37
		
     568:	ee e6       	ldi	r30, 0x6E	; 110
     56a:	f0 e0       	ldi	r31, 0x00	; 0
     56c:	80 81       	ld	r24, Z
     56e:	82 60       	ori	r24, 0x02	; 2
     570:	80 83       	st	Z, r24
     572:	08 95       	ret

00000574 <tic>:
		//sprintf(msg, "val:%d",temp);
		temp1 ^= get_status_btn_click();
		temp2 ^= get_status_btn_hold();
		//sprintf(msg, "BTN:%d%d, ENC:%3d", temp1, temp2, get_enc_counter());
		//sprintf(msg, "val:%03d", get_enc_counter());	
     574:	80 91 98 01 	lds	r24, 0x0198
     578:	90 91 99 01 	lds	r25, 0x0199
     57c:	90 93 97 01 	sts	0x0197, r25
     580:	80 93 96 01 	sts	0x0196, r24
     584:	08 95       	ret

00000586 <get_tick_counter>:
     586:	80 91 98 01 	lds	r24, 0x0198
     58a:	90 91 99 01 	lds	r25, 0x0199
     58e:	08 95       	ret

00000590 <get_tick_time>:
     590:	8a e0       	ldi	r24, 0x0A	; 10
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	08 95       	ret

00000596 <__vector_14>:
     596:	1f 92       	push	r1
     598:	0f 92       	push	r0
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	0f 92       	push	r0
     59e:	11 24       	eor	r1, r1
     5a0:	2f 93       	push	r18
     5a2:	3f 93       	push	r19
     5a4:	4f 93       	push	r20
     5a6:	5f 93       	push	r21
     5a8:	6f 93       	push	r22
     5aa:	7f 93       	push	r23
     5ac:	8f 93       	push	r24
     5ae:	9f 93       	push	r25
     5b0:	af 93       	push	r26
     5b2:	bf 93       	push	r27
     5b4:	ef 93       	push	r30
     5b6:	ff 93       	push	r31
     5b8:	80 91 94 01 	lds	r24, 0x0194
     5bc:	90 91 95 01 	lds	r25, 0x0195
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	65 e0       	ldi	r22, 0x05	; 5
     5c4:	70 e0       	ldi	r23, 0x00	; 0
     5c6:	6e d9       	rcall	.-3364   	; 0xfffff8a4 <__eeprom_end+0xff7ef8a4>
     5c8:	90 93 95 01 	sts	0x0195, r25
     5cc:	80 93 94 01 	sts	0x0194, r24
     5d0:	89 2b       	or	r24, r25
     5d2:	91 f5       	brne	.+100    	; 0x638 <__vector_14+0xa2>
     5d4:	80 91 98 01 	lds	r24, 0x0198
     5d8:	90 91 99 01 	lds	r25, 0x0199
     5dc:	01 96       	adiw	r24, 0x01	; 1
     5de:	60 e1       	ldi	r22, 0x10	; 16
     5e0:	77 e2       	ldi	r23, 0x27	; 39
     5e2:	60 d9       	rcall	.-3392   	; 0xfffff8a4 <__eeprom_end+0xff7ef8a4>
     5e4:	90 93 99 01 	sts	0x0199, r25
     5e8:	80 93 98 01 	sts	0x0198, r24
     5ec:	80 91 90 01 	lds	r24, 0x0190
     5f0:	90 91 91 01 	lds	r25, 0x0191
     5f4:	18 16       	cp	r1, r24
     5f6:	19 06       	cpc	r1, r25
     5f8:	64 f4       	brge	.+24     	; 0x612 <__vector_14+0x7c>
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	90 93 91 01 	sts	0x0191, r25
     600:	80 93 90 01 	sts	0x0190, r24
     604:	89 2b       	or	r24, r25
     606:	29 f4       	brne	.+10     	; 0x612 <__vector_14+0x7c>
     608:	e0 91 92 01 	lds	r30, 0x0192
     60c:	f0 91 93 01 	lds	r31, 0x0193
     610:	09 95       	icall
     612:	80 91 8c 01 	lds	r24, 0x018C
     616:	90 91 8d 01 	lds	r25, 0x018D
     61a:	18 16       	cp	r1, r24
     61c:	19 06       	cpc	r1, r25
     61e:	64 f4       	brge	.+24     	; 0x638 <__vector_14+0xa2>
     620:	01 97       	sbiw	r24, 0x01	; 1
     622:	90 93 8d 01 	sts	0x018D, r25
     626:	80 93 8c 01 	sts	0x018C, r24
     62a:	89 2b       	or	r24, r25
     62c:	29 f4       	brne	.+10     	; 0x638 <__vector_14+0xa2>
     62e:	e0 91 8e 01 	lds	r30, 0x018E
     632:	f0 91 8f 01 	lds	r31, 0x018F
     636:	09 95       	icall
     638:	ff 91       	pop	r31
     63a:	ef 91       	pop	r30
     63c:	bf 91       	pop	r27
     63e:	af 91       	pop	r26
     640:	9f 91       	pop	r25
     642:	8f 91       	pop	r24
     644:	7f 91       	pop	r23
     646:	6f 91       	pop	r22
     648:	5f 91       	pop	r21
     64a:	4f 91       	pop	r20
     64c:	3f 91       	pop	r19
     64e:	2f 91       	pop	r18
     650:	0f 90       	pop	r0
     652:	0f be       	out	0x3f, r0	; 63
     654:	0f 90       	pop	r0
     656:	1f 90       	pop	r1
     658:	18 95       	reti

0000065a <sys_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     65a:	2f ef       	ldi	r18, 0xFF	; 255
     65c:	80 e7       	ldi	r24, 0x70	; 112
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	21 50       	subi	r18, 0x01	; 1
     662:	80 40       	sbci	r24, 0x00	; 0
     664:	90 40       	sbci	r25, 0x00	; 0
     666:	e1 f7       	brne	.-8      	; 0x660 <sys_init+0x6>
     668:	00 c0       	rjmp	.+0      	; 0x66a <sys_init+0x10>
     66a:	00 00       	nop


void sys_init(void)
{
	_delay_ms(100);	
	init_encoder();	
     66c:	c7 d0       	rcall	.+398    	; 0x7fc <init_encoder>
	init_clock();
     66e:	74 df       	rcall	.-280    	; 0x558 <init_clock>
	init_oled();
     670:	1a d0       	rcall	.+52     	; 0x6a6 <init_oled>
	
	tic();
     672:	80 df       	rcall	.-256    	; 0x574 <tic>
	sei();
     674:	78 94       	sei
     676:	08 95       	ret

00000678 <main>:
}


int main(void)
{
	sys_init();
     678:	f0 df       	rcall	.-32     	; 0x65a <sys_init>

	//install_timer0(test_func, 2000);
	//sprintf(msg, "timer installed");

	install_draw_function(test_func);
     67a:	87 e5       	ldi	r24, 0x57	; 87
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e d0       	rcall	.+28     	; 0x69c <install_draw_function>
//	  		draw();
//
//		} while ( u8g2_NextPage(&u8g2) );
		
		//sprintf(msg, "val:%d",temp);
		temp1 ^= get_status_btn_click();
     680:	b0 d0       	rcall	.+352    	; 0x7e2 <get_status_btn_click>
     682:	90 91 8b 01 	lds	r25, 0x018B
     686:	89 27       	eor	r24, r25
     688:	80 93 8b 01 	sts	0x018B, r24
		temp2 ^= get_status_btn_hold();
     68c:	af d0       	rcall	.+350    	; 0x7ec <get_status_btn_hold>
     68e:	90 91 8a 01 	lds	r25, 0x018A
     692:	89 27       	eor	r24, r25
     694:	80 93 8a 01 	sts	0x018A, r24
		//sprintf(msg, "BTN:%d%d, ENC:%3d", temp1, temp2, get_enc_counter());
		//sprintf(msg, "val:%03d", get_enc_counter());	
		
		//print_text(0, 15, msg, 0);

		render_oled();
     698:	1e d0       	rcall	.+60     	; 0x6d6 <render_oled>

	}
     69a:	f2 cf       	rjmp	.-28     	; 0x680 <main+0x8>

0000069c <install_draw_function>:

static unsigned int blink_timestamp_ms = 0;
static unsigned char blink_flag = 0;

void install_draw_function(void (*fct)(void)){
	draw_fct = fct;
     69c:	90 93 9e 01 	sts	0x019E, r25
     6a0:	80 93 9d 01 	sts	0x019D, r24
     6a4:	08 95       	ret

000006a6 <init_oled>:

	u8x8_SetFont(&u8x8, OLED_FONT);

#else

	u8g2_Setup_ssd1306_i2c_128x32_univision_2(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_gpio_and_delay_avr);
     6a6:	25 ec       	ldi	r18, 0xC5	; 197
     6a8:	34 e0       	ldi	r19, 0x04	; 4
     6aa:	42 e8       	ldi	r20, 0x82	; 130
     6ac:	54 e0       	ldi	r21, 0x04	; 4
     6ae:	60 e2       	ldi	r22, 0x20	; 32
     6b0:	71 e0       	ldi	r23, 0x01	; 1
     6b2:	8f e9       	ldi	r24, 0x9F	; 159
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	32 d2       	rcall	.+1124   	; 0xb1c <u8g2_Setup_ssd1306_i2c_128x32_univision_2>
	//u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_gpio_and_delay_avr);
	//u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_sw_i2c, u8x8_gpio_and_delay_avr);

	u8g2_InitDisplay(&u8g2);
     6b8:	8f e9       	ldi	r24, 0x9F	; 159
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	f8 d7       	rcall	.+4080   	; 0x16ae <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
     6be:	8f e9       	ldi	r24, 0x9F	; 159
     6c0:	91 e0       	ldi	r25, 0x01	; 1
     6c2:	21 d2       	rcall	.+1090   	; 0xb06 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	8f e9       	ldi	r24, 0x9F	; 159
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	fc d7       	rcall	.+4088   	; 0x16c4 <u8x8_SetPowerSave>

	u8g2_SetFont(&u8g2, OLED_FONT);
     6cc:	64 e3       	ldi	r22, 0x34	; 52
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	8f e9       	ldi	r24, 0x9F	; 159
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	26 c5       	rjmp	.+2636   	; 0x1122 <u8g2_SetFont>

000006d6 <render_oled>:
void render_oled(void){

#if OLED_USE_COMPACT_LIBRARY
	draw_fct();
#else
	u8g2_FirstPage(&u8g2);
     6d6:	8f e9       	ldi	r24, 0x9F	; 159
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	dc d1       	rcall	.+952    	; 0xa94 <u8g2_FirstPage>
	do{	draw_fct(); } while ( u8g2_NextPage(&u8g2) );
     6dc:	e0 91 9d 01 	lds	r30, 0x019D
     6e0:	f0 91 9e 01 	lds	r31, 0x019E
     6e4:	09 95       	icall
     6e6:	8f e9       	ldi	r24, 0x9F	; 159
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	e5 d1       	rcall	.+970    	; 0xab6 <u8g2_NextPage>
     6ec:	81 11       	cpse	r24, r1
     6ee:	f6 cf       	rjmp	.-20     	; 0x6dc <render_oled+0x6>
#endif

	
}
     6f0:	08 95       	ret

000006f2 <print_text>:
int get_value(){
	return blink_flag;
}


void print_text(int x, int y, char *msg, unsigned char flag){
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ee e7       	ldi	r30, 0x7E	; 126
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	ef c8       	rjmp	.-3618   	; 0xfffff8da <__eeprom_end+0xff7ef8da>
     6fc:	08 2f       	mov	r16, r24
     6fe:	96 2e       	mov	r9, r22
     700:	7a 01       	movw	r14, r20
     702:	12 2f       	mov	r17, r18

	unsigned char offset = 0;

	if((get_tick_counter() + CLOCK_COUNTER_MAX - blink_timestamp_ms/get_tick_time())%CLOCK_COUNTER_MAX >= (OLED_BLINK_INTERVAL_MS/get_tick_time())){
     704:	40 df       	rcall	.-384    	; 0x586 <get_tick_counter>
     706:	ec 01       	movw	r28, r24
     708:	a0 90 9b 01 	lds	r10, 0x019B
     70c:	b0 90 9c 01 	lds	r11, 0x019C
     710:	3f df       	rcall	.-386    	; 0x590 <get_tick_time>
     712:	6c 01       	movw	r12, r24
     714:	3d df       	rcall	.-390    	; 0x590 <get_tick_time>
     716:	9c 01       	movw	r18, r24
     718:	c0 5f       	subi	r28, 0xF0	; 240
     71a:	d8 4d       	sbci	r29, 0xD8	; 216
     71c:	c5 01       	movw	r24, r10
     71e:	b6 01       	movw	r22, r12
     720:	c1 d8       	rcall	.-3710   	; 0xfffff8a4 <__eeprom_end+0xff7ef8a4>
     722:	ce 01       	movw	r24, r28
     724:	86 1b       	sub	r24, r22
     726:	97 0b       	sbc	r25, r23
     728:	60 e1       	ldi	r22, 0x10	; 16
     72a:	77 e2       	ldi	r23, 0x27	; 39
     72c:	bb d8       	rcall	.-3722   	; 0xfffff8a4 <__eeprom_end+0xff7ef8a4>
     72e:	fc 01       	movw	r30, r24
     730:	80 e9       	ldi	r24, 0x90	; 144
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	b9 01       	movw	r22, r18
     736:	b6 d8       	rcall	.-3732   	; 0xfffff8a4 <__eeprom_end+0xff7ef8a4>
     738:	e6 17       	cp	r30, r22
     73a:	f7 07       	cpc	r31, r23
     73c:	a8 f0       	brcs	.+42     	; 0x768 <print_text+0x76>
		blink_timestamp_ms = get_tick_counter()*get_tick_time();
     73e:	23 df       	rcall	.-442    	; 0x586 <get_tick_counter>
     740:	ec 01       	movw	r28, r24
     742:	26 df       	rcall	.-436    	; 0x590 <get_tick_time>
     744:	9c 01       	movw	r18, r24
     746:	2c 9f       	mul	r18, r28
     748:	c0 01       	movw	r24, r0
     74a:	2d 9f       	mul	r18, r29
     74c:	90 0d       	add	r25, r0
     74e:	3c 9f       	mul	r19, r28
     750:	90 0d       	add	r25, r0
     752:	11 24       	eor	r1, r1
     754:	90 93 9c 01 	sts	0x019C, r25
     758:	80 93 9b 01 	sts	0x019B, r24
		blink_flag ^= (unsigned char)1;
     75c:	90 91 9a 01 	lds	r25, 0x019A
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	89 27       	eor	r24, r25
     764:	80 93 9a 01 	sts	0x019A, r24
	}


	if ((flag & OLED_PRINT_BLINK) && blink_flag){
     768:	11 fd       	sbrc	r17, 1
     76a:	0d c0       	rjmp	.+26     	; 0x786 <print_text+0x94>
#if OLED_USE_COMPACT_LIBRARY
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 1);
	u8x8_DrawString(&u8x8, x, y, msg);
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 0);
#else
	if (flag & OLED_PRINT_INVERT) {u8g2_SetDrawColor(&u8g2, 0); u8g2_SetFontMode(&u8g2, 0);}
     76c:	c1 2f       	mov	r28, r17
     76e:	c1 70       	andi	r28, 0x01	; 1
     770:	10 ff       	sbrs	r17, 0
     772:	18 c0       	rjmp	.+48     	; 0x7a4 <print_text+0xb2>
     774:	60 e0       	ldi	r22, 0x00	; 0
     776:	8f e9       	ldi	r24, 0x9F	; 159
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	51 d5       	rcall	.+2722   	; 0x121e <u8g2_SetDrawColor>
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	8f e9       	ldi	r24, 0x9F	; 159
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	f4 d3       	rcall	.+2024   	; 0xf6c <u8g2_SetFontMode>
     784:	0f c0       	rjmp	.+30     	; 0x7a4 <print_text+0xb2>
		blink_timestamp_ms = get_tick_counter()*get_tick_time();
		blink_flag ^= (unsigned char)1;
	}


	if ((flag & OLED_PRINT_BLINK) && blink_flag){
     786:	80 91 9a 01 	lds	r24, 0x019A
     78a:	88 23       	and	r24, r24
     78c:	79 f3       	breq	.-34     	; 0x76c <print_text+0x7a>
     78e:	90 e0       	ldi	r25, 0x00	; 0
		while(*(msg+offset) !=0){
			*(msg+offset)= ' ';
     790:	20 e2       	ldi	r18, 0x20	; 32
		blink_flag ^= (unsigned char)1;
	}


	if ((flag & OLED_PRINT_BLINK) && blink_flag){
		while(*(msg+offset) !=0){
     792:	f7 01       	movw	r30, r14
     794:	e9 0f       	add	r30, r25
     796:	f1 1d       	adc	r31, r1
     798:	80 81       	ld	r24, Z
     79a:	88 23       	and	r24, r24
     79c:	39 f3       	breq	.-50     	; 0x76c <print_text+0x7a>
			*(msg+offset)= ' ';
     79e:	20 83       	st	Z, r18
			offset++;
     7a0:	9f 5f       	subi	r25, 0xFF	; 255
     7a2:	f7 cf       	rjmp	.-18     	; 0x792 <print_text+0xa0>
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 1);
	u8x8_DrawString(&u8x8, x, y, msg);
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 0);
#else
	if (flag & OLED_PRINT_INVERT) {u8g2_SetDrawColor(&u8g2, 0); u8g2_SetFontMode(&u8g2, 0);}
	u8g2_DrawStr(&u8g2, x, y, msg);
     7a4:	97 01       	movw	r18, r14
     7a6:	49 2d       	mov	r20, r9
     7a8:	60 2f       	mov	r22, r16
     7aa:	8f e9       	ldi	r24, 0x9F	; 159
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	68 d4       	rcall	.+2256   	; 0x1080 <u8g2_DrawStr>
	if (flag & OLED_PRINT_INVERT) {u8g2_SetDrawColor(&u8g2, 1); u8g2_SetFontMode(&u8g2, 1);}
     7b0:	cc 23       	and	r28, r28
     7b2:	41 f0       	breq	.+16     	; 0x7c4 <print_text+0xd2>
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	8f e9       	ldi	r24, 0x9F	; 159
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	31 d5       	rcall	.+2658   	; 0x121e <u8g2_SetDrawColor>
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	8f e9       	ldi	r24, 0x9F	; 159
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	d4 d3       	rcall	.+1960   	; 0xf6c <u8g2_SetFontMode>
#endif


}
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	eb e0       	ldi	r30, 0x0B	; 11
     7ca:	a3 c8       	rjmp	.-3770   	; 0xfffff912 <__eeprom_end+0xff7ef912>

000007cc <timer_btn_timeout_handler>:
static unsigned char status_btn_hold = 0;

void timer_btn_timeout_handler(void){

	//timer_btn_install(timer_btn_timeout_handler, BTM_HOLD_TIMEOUT_MS);
	if (~(PC_PIN & (1<< PIN_BTN))){
     7cc:	86 b1       	in	r24, 0x06	; 6
		//if button is active at low
		if(flag_btn){
     7ce:	80 91 00 02 	lds	r24, 0x0200
     7d2:	88 23       	and	r24, r24
     7d4:	29 f0       	breq	.+10     	; 0x7e0 <timer_btn_timeout_handler+0x14>
			status_btn_hold = 1;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 fc 01 	sts	0x01FC, r24
			flag_btn = 0;
     7dc:	10 92 00 02 	sts	0x0200, r1
     7e0:	08 95       	ret

000007e2 <get_status_btn_click>:


unsigned char get_status_btn_click(void){

	unsigned char ret;
	ret = status_btn_click;
     7e2:	80 91 fd 01 	lds	r24, 0x01FD
	status_btn_click = 0;
     7e6:	10 92 fd 01 	sts	0x01FD, r1

	return ret;
}
     7ea:	08 95       	ret

000007ec <get_status_btn_hold>:

unsigned char get_status_btn_hold(void){

	unsigned char ret;
	ret = status_btn_hold;
     7ec:	80 91 fc 01 	lds	r24, 0x01FC
	status_btn_hold = 0;
     7f0:	10 92 fc 01 	sts	0x01FC, r1

	return ret;
}
     7f4:	08 95       	ret

000007f6 <get_enc_counter>:

unsigned char get_enc_counter(void){

	return counter;

}
     7f6:	80 91 fe 01 	lds	r24, 0x01FE
     7fa:	08 95       	ret

000007fc <init_encoder>:
     7fc:	2f ef       	ldi	r18, 0xFF	; 255
     7fe:	80 e7       	ldi	r24, 0x70	; 112
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	21 50       	subi	r18, 0x01	; 1
     804:	80 40       	sbci	r24, 0x00	; 0
     806:	90 40       	sbci	r25, 0x00	; 0
     808:	e1 f7       	brne	.-8      	; 0x802 <init_encoder+0x6>
     80a:	00 c0       	rjmp	.+0      	; 0x80c <init_encoder+0x10>
     80c:	00 00       	nop

	pin_old = PC_PIN;
#endif

#if defined(__AVR_ATmega88__)
	PCICR |= (1<<PCIE1);
     80e:	e8 e6       	ldi	r30, 0x68	; 104
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	80 81       	ld	r24, Z
     814:	82 60       	ori	r24, 0x02	; 2
     816:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PIN_BTN)|(1<<PIN_ENC_A)|(1<<PIN_ENC_B);
     818:	ec e6       	ldi	r30, 0x6C	; 108
     81a:	f0 e0       	ldi	r31, 0x00	; 0
     81c:	80 81       	ld	r24, Z
     81e:	87 60       	ori	r24, 0x07	; 7
     820:	80 83       	st	Z, r24

	pin_old = PC_PIN;
     822:	86 b1       	in	r24, 0x06	; 6
     824:	80 93 00 01 	sts	0x0100, r24
     828:	08 95       	ret

0000082a <__vector_4>:
#if defined(__AVR_ATtiny85__)
ISR(PCINT0_vect){
#endif

#if defined(__AVR_ATmega88__)
ISR(PCINT1_vect){
     82a:	1f 92       	push	r1
     82c:	0f 92       	push	r0
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	0f 92       	push	r0
     832:	11 24       	eor	r1, r1
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ef 93       	push	r30
     84e:	ff 93       	push	r31
#endif
	
	unsigned char changed_bits, pin_read;
	char dx = 0;

	pin_read = PC_PIN;
     850:	86 b1       	in	r24, 0x06	; 6

	changed_bits = pin_read ^ pin_old;
     852:	c0 91 00 01 	lds	r28, 0x0100
     856:	c8 27       	eor	r28, r24
	pin_old = pin_read;
     858:	80 93 00 01 	sts	0x0100, r24
     85c:	8f ec       	ldi	r24, 0xCF	; 207
     85e:	97 e0       	ldi	r25, 0x07	; 7
     860:	01 97       	sbiw	r24, 0x01	; 1
     862:	f1 f7       	brne	.-4      	; 0x860 <__vector_4+0x36>
     864:	00 c0       	rjmp	.+0      	; 0x866 <__vector_4+0x3c>
     866:	00 00       	nop

	_delay_ms(1);
	pin_read = PC_PIN;
     868:	d6 b1       	in	r29, 0x06	; 6

	if (changed_bits & (1<<PIN_BTN)) {
     86a:	c2 ff       	sbrs	r28, 2
     86c:	1e c0       	rjmp	.+60     	; 0x8aa <__vector_4+0x80>
     86e:	8f e1       	ldi	r24, 0x1F	; 31
     870:	9e e4       	ldi	r25, 0x4E	; 78
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	f1 f7       	brne	.-4      	; 0x872 <__vector_4+0x48>
     876:	00 c0       	rjmp	.+0      	; 0x878 <__vector_4+0x4e>
     878:	00 00       	nop
		
		_delay_ms(10);

		if (pin_read & (1<< PIN_BTN)) {
     87a:	d2 ff       	sbrs	r29, 2
     87c:	0e c0       	rjmp	.+28     	; 0x89a <__vector_4+0x70>
			//when the  button released
			if(flag_btn){
     87e:	80 91 00 02 	lds	r24, 0x0200
     882:	88 23       	and	r24, r24
     884:	91 f0       	breq	.+36     	; 0x8aa <__vector_4+0x80>
				if(is_timer_btn_alive()){
     886:	4c de       	rcall	.-872    	; 0x520 <is_timer_btn_alive>
     888:	88 23       	and	r24, r24
     88a:	21 f0       	breq	.+8      	; 0x894 <__vector_4+0x6a>
					kill_timer_btn();
     88c:	53 de       	rcall	.-858    	; 0x534 <kill_timer_btn>
					status_btn_click = 1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 fd 01 	sts	0x01FD, r24
				} else {
					;
				}
				flag_btn = 0;
     894:	10 92 00 02 	sts	0x0200, r1
     898:	08 c0       	rjmp	.+16     	; 0x8aa <__vector_4+0x80>
			}
			
		} else {
			//when the button pressed
			flag_btn = 1;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 00 02 	sts	0x0200, r24
			install_timer_btn(timer_btn_timeout_handler, BTN_HOLD_TIMEOUT_MS );
     8a0:	60 e2       	ldi	r22, 0x20	; 32
     8a2:	73 e0       	ldi	r23, 0x03	; 3
     8a4:	86 ee       	ldi	r24, 0xE6	; 230
     8a6:	93 e0       	ldi	r25, 0x03	; 3
     8a8:	4a de       	rcall	.-876    	; 0x53e <install_timer_btn>
		}


	} 

	if (changed_bits & (1<< PIN_ENC_A)) {
     8aa:	c0 ff       	sbrs	r28, 0
     8ac:	03 c0       	rjmp	.+6      	; 0x8b4 <__vector_4+0x8a>
		
		//detect falling edge
		//_delay_ms(1);
		//if(!(pinb & (1<<PIN_ENC_A))) flag_enc = 1;
		flag_enc = 2;
     8ae:	82 e0       	ldi	r24, 0x02	; 2
     8b0:	80 93 ff 01 	sts	0x01FF, r24
		//return;

	}

	if (changed_bits & (1<< PIN_ENC_B)) {
     8b4:	c1 ff       	sbrs	r28, 1
     8b6:	13 c0       	rjmp	.+38     	; 0x8de <__vector_4+0xb4>

		if (flag_enc>0){
     8b8:	80 91 ff 01 	lds	r24, 0x01FF
     8bc:	88 23       	and	r24, r24
     8be:	79 f0       	breq	.+30     	; 0x8de <__vector_4+0xb4>

			flag_enc -= 1;
     8c0:	81 50       	subi	r24, 0x01	; 1
     8c2:	80 93 ff 01 	sts	0x01FF, r24
			
			if (pin_read & (1<<PIN_ENC_B)){
     8c6:	d1 fd       	sbrc	r29, 1
     8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__vector_4+0xa4>
				//if rising edge
				dx = 1;	
			} else {
				//if falling edge
				dx = -1;
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <__vector_4+0xa6>

			flag_enc -= 1;
			
			if (pin_read & (1<<PIN_ENC_B)){
				//if rising edge
				dx = 1;	
     8ce:	81 e0       	ldi	r24, 0x01	; 1
			} else {
				//if falling edge
				dx = -1;
			}

			if (pin_read & (1<<PIN_ENC_A)){
     8d0:	d0 ff       	sbrs	r29, 0
				// High
				dx *= 1;
			} else {
				//Low
				dx *= -1;
     8d2:	81 95       	neg	r24
			}

			counter += dx;
     8d4:	90 91 fe 01 	lds	r25, 0x01FE
     8d8:	89 0f       	add	r24, r25
     8da:	80 93 fe 01 	sts	0x01FE, r24

		}
	
	}
	
}
     8de:	ff 91       	pop	r31
     8e0:	ef 91       	pop	r30
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <u8x8_byte_avr_hw_i2c>:
#if defined(__AVR_ATmega8__)||defined(__AVR_ATmega88__)	
	
	unsigned char *data;
	unsigned char internal_i2c_mode;

	switch(msg){
     904:	68 31       	cpi	r22, 0x18	; 24
     906:	21 f1       	breq	.+72     	; 0x950 <u8x8_byte_avr_hw_i2c+0x4c>
     908:	38 f4       	brcc	.+14     	; 0x918 <u8x8_byte_avr_hw_i2c+0x14>
     90a:	64 31       	cpi	r22, 0x14	; 20
     90c:	b9 f0       	breq	.+46     	; 0x93c <u8x8_byte_avr_hw_i2c+0x38>
     90e:	67 31       	cpi	r22, 0x17	; 23
     910:	d1 f5       	brne	.+116    	; 0x986 <u8x8_byte_avr_hw_i2c+0x82>
     912:	f9 01       	movw	r30, r18
			
				  
			data = (uint8_t *)arg_ptr;
			while( arg_int > 0 ) {
				TWDR = (unsigned char)*data;
				TWCR = ((1<< TWINT) | (1<<TWEN));
     914:	84 e8       	ldi	r24, 0x84	; 132
     916:	0a c0       	rjmp	.+20     	; 0x92c <u8x8_byte_avr_hw_i2c+0x28>
#if defined(__AVR_ATmega8__)||defined(__AVR_ATmega88__)	
	
	unsigned char *data;
	unsigned char internal_i2c_mode;

	switch(msg){
     918:	69 31       	cpi	r22, 0x19	; 25
     91a:	69 f1       	breq	.+90     	; 0x976 <u8x8_byte_avr_hw_i2c+0x72>
     91c:	60 32       	cpi	r22, 0x20	; 32
     91e:	b1 f0       	breq	.+44     	; 0x94c <u8x8_byte_avr_hw_i2c+0x48>
     920:	32 c0       	rjmp	.+100    	; 0x986 <u8x8_byte_avr_hw_i2c+0x82>
				  
			data = (uint8_t *)arg_ptr;
			while( arg_int > 0 ) {
				TWDR = (unsigned char)*data;
				TWCR = ((1<< TWINT) | (1<<TWEN));
				while (!(TWCR & (1 <<TWINT)));
     922:	90 91 bc 00 	lds	r25, 0x00BC
     926:	97 ff       	sbrs	r25, 7
     928:	fc cf       	rjmp	.-8      	; 0x922 <u8x8_byte_avr_hw_i2c+0x1e>
				data++;
				arg_int--;
     92a:	41 50       	subi	r20, 0x01	; 1
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			
				  
			data = (uint8_t *)arg_ptr;
			while( arg_int > 0 ) {
     92c:	44 23       	and	r20, r20
     92e:	71 f0       	breq	.+28     	; 0x94c <u8x8_byte_avr_hw_i2c+0x48>
				TWDR = (unsigned char)*data;
     930:	91 91       	ld	r25, Z+
     932:	90 93 bb 00 	sts	0x00BB, r25
				TWCR = ((1<< TWINT) | (1<<TWEN));
     936:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 <<TWINT)));
     93a:	f3 cf       	rjmp	.-26     	; 0x922 <u8x8_byte_avr_hw_i2c+0x1e>

		case U8X8_MSG_BYTE_INIT:
			//set clock, set data and delay
			//initialize twi module

			TWSR=0x00; //set presca1er bits to zero
     93c:	10 92 b9 00 	sts	0x00B9, r1
			//TWBR=0x46; //SCL frequency is 100K for XTAL = 7.3728M
			//TWBR=2; //SCL frequency is 100K for XTAL = 7.3728M
			TWBR=3;
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	80 93 b8 00 	sts	0x00B8, r24
			TWCR=0x04; //enab1e TWI module
     946:	84 e0       	ldi	r24, 0x04	; 4
     948:	80 93 bc 00 	sts	0x00BC, r24
		default:
			return 0;

	}

	return 1;
     94c:	81 e0       	ldi	r24, 0x01	; 1
			//TWBR=0x46; //SCL frequency is 100K for XTAL = 7.3728M
			//TWBR=2; //SCL frequency is 100K for XTAL = 7.3728M
			TWBR=3;
			TWCR=0x04; //enab1e TWI module
			
			break;
     94e:	08 95       	ret

		case U8X8_MSG_BYTE_START_TRANSFER:
			//start i2c
			//issue address

			TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     950:	24 ea       	ldi	r18, 0xA4	; 164
     952:	20 93 bc 00 	sts	0x00BC, r18
			while (!(TWCR & (1<<TWINT)));
     956:	20 91 bc 00 	lds	r18, 0x00BC
     95a:	27 ff       	sbrs	r18, 7
     95c:	fc cf       	rjmp	.-8      	; 0x956 <u8x8_byte_avr_hw_i2c+0x52>
			
			TWDR = u8x8_GetI2CAddress(u8x8);
     95e:	fc 01       	movw	r30, r24
     960:	82 89       	ldd	r24, Z+18	; 0x12
     962:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = ((1<< TWINT) | (1<<TWEN));
     966:	84 e8       	ldi	r24, 0x84	; 132
     968:	80 93 bc 00 	sts	0x00BC, r24
			while (!(TWCR & (1 <<TWINT)));
     96c:	80 91 bc 00 	lds	r24, 0x00BC
     970:	87 ff       	sbrs	r24, 7
     972:	fc cf       	rjmp	.-8      	; 0x96c <u8x8_byte_avr_hw_i2c+0x68>
     974:	eb cf       	rjmp	.-42     	; 0x94c <u8x8_byte_avr_hw_i2c+0x48>
			break;
		
		
		case U8X8_MSG_BYTE_END_TRANSFER:
			//stop i2c
			TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     976:	84 e9       	ldi	r24, 0x94	; 148
     978:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97c:	fa e1       	ldi	r31, 0x1A	; 26
     97e:	fa 95       	dec	r31
     980:	f1 f7       	brne	.-4      	; 0x97e <u8x8_byte_avr_hw_i2c+0x7a>
     982:	00 c0       	rjmp	.+0      	; 0x984 <u8x8_byte_avr_hw_i2c+0x80>
     984:	e3 cf       	rjmp	.-58     	; 0x94c <u8x8_byte_avr_hw_i2c+0x48>
			_delay_us(10) ; //wait for a short time
			
			break;

		default:
			return 0;
     986:	80 e0       	ldi	r24, 0x00	; 0



#endif

}
     988:	08 95       	ret

0000098a <u8x8_gpio_and_delay_avr>:



unsigned char u8x8_gpio_and_delay_avr(u8x8_t *u8x8, unsigned char msg, unsigned char arg_int, void *arg_ptr)
{
    switch(msg)
     98a:	6d 32       	cpi	r22, 0x2D	; 45
     98c:	a9 f0       	breq	.+42     	; 0x9b8 <u8x8_gpio_and_delay_avr+0x2e>
     98e:	58 f4       	brcc	.+22     	; 0x9a6 <u8x8_gpio_and_delay_avr+0x1c>
     990:	68 32       	cpi	r22, 0x28	; 40
     992:	71 f0       	breq	.+28     	; 0x9b0 <u8x8_gpio_and_delay_avr+0x26>
     994:	69 32       	cpi	r22, 0x29	; 41
     996:	11 f5       	brne	.+68     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
     998:	8f ec       	ldi	r24, 0xCF	; 207
     99a:	97 e0       	ldi	r25, 0x07	; 7
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <u8x8_gpio_and_delay_avr+0x12>
     9a0:	00 c0       	rjmp	.+0      	; 0x9a2 <u8x8_gpio_and_delay_avr+0x18>
     9a2:	00 00       	nop
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
     9a6:	6c 34       	cpi	r22, 0x4C	; 76
     9a8:	61 f0       	breq	.+24     	; 0x9c2 <u8x8_gpio_and_delay_avr+0x38>
     9aa:	6d 34       	cpi	r22, 0x4D	; 77
     9ac:	89 f0       	breq	.+34     	; 0x9d0 <u8x8_gpio_and_delay_avr+0x46>
     9ae:	16 c0       	rjmp	.+44     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
            // Chip_GPIO_SetPinDIRInput(LPC_GPIO, KEY_NEXT_PORT, KEY_NEXT_PIN);

            // Chip_IOCON_PinMuxSet(LPC_IOCON, KEY_HOME_PORT, KEY_HOME_PIN, KEY_HOME_FN|IOCON_MODE_PULLUP);    
            // Chip_GPIO_SetPinDIRInput(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN);

            I2C_PORT_DIR &= ~((1<<I2C_CLOCK_PORT)|(1<<I2C_DATA_PORT));
     9b0:	87 b1       	in	r24, 0x07	; 7
     9b2:	8f 7c       	andi	r24, 0xCF	; 207
     9b4:	87 b9       	out	0x07, r24	; 7

            break;
     9b6:	12 c0       	rjmp	.+36     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	9a 95       	dec	r25
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <u8x8_gpio_and_delay_avr+0x30>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <u8x8_gpio_and_delay_avr+0x36>
     9c0:	0d c0       	rjmp	.+26     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
            //delay_micro_seconds(arg_int<=2?5:1);
            _delay_us(1);
            break;

        case U8X8_MSG_GPIO_I2C_CLOCK:
            if ( arg_int == 0 )
     9c2:	41 11       	cpse	r20, r1
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <u8x8_gpio_and_delay_avr+0x42>
            {
                //Chip_GPIO_SetPinDIROutput(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                //Chip_GPIO_SetPinOutLow(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                I2C_PORT_DIR |= (1<<I2C_CLOCK_PORT);
     9c6:	3d 9a       	sbi	0x07, 5	; 7
                I2C_PORT &= ~(1<<I2C_CLOCK_PORT);
     9c8:	45 98       	cbi	0x08, 5	; 8
     9ca:	08 c0       	rjmp	.+16     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
            }
            else
            {
                ////Chip_GPIO_SetPinOutHigh(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                //Chip_GPIO_SetPinDIRInput(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                I2C_PORT_DIR &= ~(1<<I2C_CLOCK_PORT);
     9cc:	3d 98       	cbi	0x07, 5	; 7
     9ce:	06 c0       	rjmp	.+12     	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>

            }
            break;

        case U8X8_MSG_GPIO_I2C_DATA:
            if ( arg_int == 0 )
     9d0:	41 11       	cpse	r20, r1
     9d2:	03 c0       	rjmp	.+6      	; 0x9da <u8x8_gpio_and_delay_avr+0x50>
            {
                //Chip_GPIO_SetPinDIROutput(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                //Chip_GPIO_SetPinOutLow(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                I2C_PORT_DIR |= (1<<I2C_DATA_PORT);
     9d4:	3c 9a       	sbi	0x07, 4	; 7
                I2C_PORT &= ~(1<<I2C_DATA_PORT);
     9d6:	44 98       	cbi	0x08, 4	; 8
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <u8x8_gpio_and_delay_avr+0x52>
            }
            else
            {
                // //Chip_GPIO_SetPinOutHigh(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                // Chip_GPIO_SetPinDIRInput(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                I2C_PORT_DIR &= ~(1<<I2C_DATA_PORT);
     9da:	3c 98       	cbi	0x07, 4	; 7
        default:
            // u8x8_SetGPIOResult(u8x8, 1);
            break;
    }
    return 1;
}
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	08 95       	ret

000009e0 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e5 ef       	ldi	r30, 0xF5	; 245
     9e6:	f4 e0       	ldi	r31, 0x04	; 4
     9e8:	7a c7       	rjmp	.+3828   	; 0x18de <__prologue_saves__+0x12>
     9ea:	7c 01       	movw	r14, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
     9ec:	dc 01       	movw	r26, r24
     9ee:	91 96       	adiw	r26, 0x21	; 33
     9f0:	bc 90       	ld	r11, X
     9f2:	91 97       	sbiw	r26, 0x21	; 33
  dest_row = u8g2->tile_curr_row;
     9f4:	92 96       	adiw	r26, 0x22	; 34
     9f6:	dc 90       	ld	r13, X
     9f8:	92 97       	sbiw	r26, 0x22	; 34
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
     9fa:	ed 91       	ld	r30, X+
     9fc:	fc 91       	ld	r31, X
     9fe:	c1 88       	ldd	r12, Z+17	; 0x11
     a00:	c0 e0       	ldi	r28, 0x00	; 0
     a02:	d0 e0       	ldi	r29, 0x00	; 0
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     a04:	d7 01       	movw	r26, r14
     a06:	ed 91       	ld	r30, X+
     a08:	fc 91       	ld	r31, X
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
     a0e:	5f 96       	adiw	r26, 0x1f	; 31
     a10:	0d 91       	ld	r16, X+
     a12:	1c 91       	ld	r17, X
     a14:	90 97       	sbiw	r26, 0x20	; 32
     a16:	b8 e0       	ldi	r27, 0x08	; 8
     a18:	2b 9f       	mul	r18, r27
     a1a:	a0 01       	movw	r20, r0
     a1c:	11 24       	eor	r1, r1
  offset *= w;
  offset *= 8;
     a1e:	4c 9f       	mul	r20, r28
     a20:	c0 01       	movw	r24, r0
     a22:	4d 9f       	mul	r20, r29
     a24:	90 0d       	add	r25, r0
     a26:	5c 9f       	mul	r21, r28
     a28:	90 0d       	add	r25, r0
     a2a:	11 24       	eor	r1, r1
  ptr += offset;
     a2c:	08 0f       	add	r16, r24
     a2e:	19 1f       	adc	r17, r25
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
     a30:	4c 2f       	mov	r20, r28
     a32:	4d 0d       	add	r20, r13
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	c7 01       	movw	r24, r14
     a38:	17 d6       	rcall	.+3118   	; 0x1668 <u8x8_DrawTile>
     a3a:	8c 2f       	mov	r24, r28
     a3c:	8f 5f       	subi	r24, 0xFF	; 255
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
     a3e:	8b 15       	cp	r24, r11
     a40:	28 f4       	brcc	.+10     	; 0xa4c <u8g2_send_buffer+0x6c>
     a42:	21 96       	adiw	r28, 0x01	; 1
     a44:	8c 2f       	mov	r24, r28
     a46:	8d 0d       	add	r24, r13
     a48:	8c 15       	cp	r24, r12
     a4a:	e0 f2       	brcs	.-72     	; 0xa04 <u8g2_send_buffer+0x24>
}
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	e9 e0       	ldi	r30, 0x09	; 9
     a52:	61 c7       	rjmp	.+3778   	; 0x1916 <__epilogue_restores__+0x12>

00000a54 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
     a54:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
     a56:	a0 81       	ld	r26, Z
     a58:	b1 81       	ldd	r27, Z+1	; 0x01
     a5a:	50 96       	adiw	r26, 0x10	; 16
     a5c:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
     a5e:	41 a1       	ldd	r20, Z+33	; 0x21
     a60:	94 9f       	mul	r25, r20
     a62:	a0 01       	movw	r20, r0
     a64:	11 24       	eor	r1, r1
  cnt *= 8;
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	8a 95       	dec	r24
     a6e:	e1 f7       	brne	.-8      	; 0xa68 <u8g2_ClearBuffer+0x14>
  memset(u8g2->tile_buf_ptr, 0, cnt);
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	87 8d       	ldd	r24, Z+31	; 0x1f
     a76:	90 a1       	ldd	r25, Z+32	; 0x20
     a78:	60 c7       	rjmp	.+3776   	; 0x193a <memset>

00000a7a <u8g2_SetBufferCurrTileRow>:
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
     a7a:	dc 01       	movw	r26, r24
     a7c:	92 96       	adiw	r26, 0x22	; 34
     a7e:	6c 93       	st	X, r22
     a80:	92 97       	sbiw	r26, 0x22	; 34
  u8g2->cb->update(u8g2);
     a82:	5d 96       	adiw	r26, 0x1d	; 29
     a84:	ed 91       	ld	r30, X+
     a86:	fc 91       	ld	r31, X
     a88:	5e 97       	sbiw	r26, 0x1e	; 30
     a8a:	01 90       	ld	r0, Z+
     a8c:	f0 81       	ld	r31, Z
     a8e:	e0 2d       	mov	r30, r0
     a90:	09 95       	icall
     a92:	08 95       	ret

00000a94 <u8g2_FirstPage>:
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
     a94:	cf 93       	push	r28
     a96:	df 93       	push	r29
     a98:	ec 01       	movw	r28, r24
  if ( u8g2->is_auto_page_clear )
     a9a:	fc 01       	movw	r30, r24
     a9c:	e4 5a       	subi	r30, 0xA4	; 164
     a9e:	ff 4f       	sbci	r31, 0xFF	; 255
     aa0:	80 81       	ld	r24, Z
     aa2:	88 23       	and	r24, r24
     aa4:	11 f0       	breq	.+4      	; 0xaaa <u8g2_FirstPage+0x16>
  {
    u8g2_ClearBuffer(u8g2);
     aa6:	ce 01       	movw	r24, r28
     aa8:	d5 df       	rcall	.-86     	; 0xa54 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	ce 01       	movw	r24, r28
     aae:	e5 df       	rcall	.-54     	; 0xa7a <u8g2_SetBufferCurrTileRow>
}
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
     ab6:	a1 e0       	ldi	r26, 0x01	; 1
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e0 e6       	ldi	r30, 0x60	; 96
     abc:	f5 e0       	ldi	r31, 0x05	; 5
     abe:	14 c7       	rjmp	.+3624   	; 0x18e8 <__prologue_saves__+0x1c>
     ac0:	8c 01       	movw	r16, r24
  uint8_t row;
  u8g2_send_buffer(u8g2);
     ac2:	8e df       	rcall	.-228    	; 0x9e0 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
     ac4:	d8 01       	movw	r26, r16
     ac6:	92 96       	adiw	r26, 0x22	; 34
     ac8:	6c 91       	ld	r22, X
     aca:	92 97       	sbiw	r26, 0x22	; 34
  row += u8g2->tile_buf_height;
     acc:	91 96       	adiw	r26, 0x21	; 33
     ace:	8c 91       	ld	r24, X
     ad0:	91 97       	sbiw	r26, 0x21	; 33
     ad2:	68 0f       	add	r22, r24
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
     ad4:	ed 91       	ld	r30, X+
     ad6:	fc 91       	ld	r31, X
     ad8:	81 89       	ldd	r24, Z+17	; 0x11
     ada:	68 17       	cp	r22, r24
     adc:	20 f0       	brcs	.+8      	; 0xae6 <u8g2_NextPage+0x30>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
     ade:	c8 01       	movw	r24, r16
     ae0:	fc d5       	rcall	.+3064   	; 0x16da <u8x8_RefreshDisplay>
    return 0;
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0d c0       	rjmp	.+26     	; 0xb00 <u8g2_NextPage+0x4a>
  }
  if ( u8g2->is_auto_page_clear )
     ae6:	f8 01       	movw	r30, r16
     ae8:	e4 5a       	subi	r30, 0xA4	; 164
     aea:	ff 4f       	sbci	r31, 0xFF	; 255
     aec:	80 81       	ld	r24, Z
     aee:	88 23       	and	r24, r24
     af0:	21 f0       	breq	.+8      	; 0xafa <u8g2_NextPage+0x44>
  {
    u8g2_ClearBuffer(u8g2);
     af2:	c8 01       	movw	r24, r16
     af4:	69 83       	std	Y+1, r22	; 0x01
     af6:	ae df       	rcall	.-164    	; 0xa54 <u8g2_ClearBuffer>
     af8:	69 81       	ldd	r22, Y+1	; 0x01
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
     afa:	c8 01       	movw	r24, r16
     afc:	be df       	rcall	.-132    	; 0xa7a <u8g2_SetBufferCurrTileRow>
  return 1;
     afe:	81 e0       	ldi	r24, 0x01	; 1
}
     b00:	21 96       	adiw	r28, 0x01	; 1
     b02:	e4 e0       	ldi	r30, 0x04	; 4
     b04:	0d c7       	rjmp	.+3610   	; 0x1920 <__epilogue_restores__+0x1c>

00000b06 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* clear screen buffer & display reliable for all u8g2 displays */
/* this is, becasue we can not used the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	ec 01       	movw	r28, r24
  u8g2_FirstPage(u8g2);
     b0c:	c3 df       	rcall	.-122    	; 0xa94 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
     b0e:	ce 01       	movw	r24, r28
     b10:	d2 df       	rcall	.-92     	; 0xab6 <u8g2_NextPage>
     b12:	81 11       	cpse	r24, r1
     b14:	fc cf       	rjmp	.-8      	; 0xb0e <u8g2_ClearDisplay+0x8>
}
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <u8g2_Setup_ssd1306_i2c_128x32_univision_2>:
  buf = u8g2_m_ssd1306_16_1(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 2 */
void u8g2_Setup_ssd1306_i2c_128x32_univision_2(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
     b1c:	a1 e0       	ldi	r26, 0x01	; 1
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e3 e9       	ldi	r30, 0x93	; 147
     b22:	f5 e0       	ldi	r31, 0x05	; 5
     b24:	dd c6       	rjmp	.+3514   	; 0x18e0 <__prologue_saves__+0x14>
     b26:	7c 01       	movw	r14, r24
     b28:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
     b2a:	89 01       	movw	r16, r18
     b2c:	9a 01       	movw	r18, r20
     b2e:	4a ea       	ldi	r20, 0xAA	; 170
     b30:	5a e0       	ldi	r21, 0x0A	; 10
     b32:	68 e7       	ldi	r22, 0x78	; 120
     b34:	7b e0       	ldi	r23, 0x0B	; 11
     b36:	6a d6       	rcall	.+3284   	; 0x180c <u8x8_Setup>
  buf = u8g2_m_ssd1306_16_2(&tile_buf_height);
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	7f d6       	rcall	.+3326   	; 0x183c <u8g2_m_ssd1306_16_2>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
     b3e:	86 01       	movw	r16, r12
     b40:	2e e3       	ldi	r18, 0x3E	; 62
     b42:	39 e0       	ldi	r19, 0x09	; 9
     b44:	49 81       	ldd	r20, Y+1	; 0x01
     b46:	bc 01       	movw	r22, r24
     b48:	c7 01       	movw	r24, r14
     b4a:	40 d4       	rcall	.+2176   	; 0x13cc <u8g2_SetupBuffer>
}
     b4c:	21 96       	adiw	r28, 0x01	; 1
     b4e:	e8 e0       	ldi	r30, 0x08	; 8
     b50:	e3 c6       	rjmp	.+3526   	; 0x1918 <__epilogue_restores__+0x14>

00000b52 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
     b52:	fc 01       	movw	r30, r24
     b54:	e6 0f       	add	r30, r22
     b56:	f1 1d       	adc	r31, r1
    pos = u8x8_pgm_read( font );
     b58:	84 91       	lpm	r24, Z
     b5a:	90 e0       	ldi	r25, 0x00	; 0
    font++;
    pos <<= 8;
     b5c:	98 2f       	mov	r25, r24
     b5e:	88 27       	eor	r24, r24
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    pos = u8x8_pgm_read( font );
    font++;
     b60:	31 96       	adiw	r30, 0x01	; 1
    pos <<= 8;
    pos += u8x8_pgm_read( font);
     b62:	e4 91       	lpm	r30, Z
    return pos;
}
     b64:	8e 0f       	add	r24, r30
     b66:	91 1d       	adc	r25, r1
     b68:	08 95       	ret

00000b6a <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
     b6a:	21 30       	cpi	r18, 0x01	; 1
     b6c:	39 f0       	breq	.+14     	; 0xb7c <u8g2_add_vector_y+0x12>
     b6e:	20 f0       	brcs	.+8      	; 0xb78 <u8g2_add_vector_y+0xe>
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 f4       	brne	.+12     	; 0xb80 <u8g2_add_vector_y+0x16>
      break;
    case 1:
      dy += x;
      break;
    case 2:
      dy -= y;
     b74:	84 1b       	sub	r24, r20
      break;
     b76:	08 95       	ret
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
  {
    case 0:
      dy += y;
     b78:	84 0f       	add	r24, r20
      break;
     b7a:	08 95       	ret
    case 1:
      dy += x;
     b7c:	86 0f       	add	r24, r22
      break;
     b7e:	08 95       	ret
    case 2:
      dy -= y;
      break;
    default:
      dy -= x;
     b80:	86 1b       	sub	r24, r22
      break;      
  }
  return dy;
}
     b82:	08 95       	ret

00000b84 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
     b84:	21 30       	cpi	r18, 0x01	; 1
     b86:	39 f0       	breq	.+14     	; 0xb96 <u8g2_add_vector_x+0x12>
     b88:	20 f0       	brcs	.+8      	; 0xb92 <u8g2_add_vector_x+0xe>
     b8a:	22 30       	cpi	r18, 0x02	; 2
     b8c:	31 f4       	brne	.+12     	; 0xb9a <u8g2_add_vector_x+0x16>
      break;
    case 1:
      dx -= y;
      break;
    case 2:
      dx -= x;
     b8e:	86 1b       	sub	r24, r22
      break;
     b90:	08 95       	ret
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
  {
    case 0:
      dx += x;
     b92:	86 0f       	add	r24, r22
      break;
     b94:	08 95       	ret
    case 1:
      dx -= y;
     b96:	84 1b       	sub	r24, r20
      break;
     b98:	08 95       	ret
    case 2:
      dx -= x;
      break;
    default:
      dx += y;
     b9a:	84 0f       	add	r24, r20
      break;      
  }
  return dx;
}
     b9c:	08 95       	ret

00000b9e <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	08 95       	ret

00000ba2 <u8g2_read_font_info>:
}

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
     ba2:	0f 93       	push	r16
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
     bac:	8b 01       	movw	r16, r22
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
     bae:	fb 01       	movw	r30, r22
     bb0:	84 91       	lpm	r24, Z
/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
     bb2:	88 83       	st	Y, r24

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bb4:	31 96       	adiw	r30, 0x01	; 1
  return u8x8_pgm_read( font );  
     bb6:	e4 91       	lpm	r30, Z
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
     bb8:	e9 83       	std	Y+1, r30	; 0x01

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bba:	fb 01       	movw	r30, r22
     bbc:	32 96       	adiw	r30, 0x02	; 2
  return u8x8_pgm_read( font );  
     bbe:	e4 91       	lpm	r30, Z
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
     bc0:	ea 83       	std	Y+2, r30	; 0x02

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bc2:	fb 01       	movw	r30, r22
     bc4:	33 96       	adiw	r30, 0x03	; 3
  return u8x8_pgm_read( font );  
     bc6:	e4 91       	lpm	r30, Z
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
     bc8:	eb 83       	std	Y+3, r30	; 0x03

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bca:	fb 01       	movw	r30, r22
     bcc:	34 96       	adiw	r30, 0x04	; 4
  return u8x8_pgm_read( font );  
     bce:	e4 91       	lpm	r30, Z
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
     bd0:	ec 83       	std	Y+4, r30	; 0x04

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bd2:	fb 01       	movw	r30, r22
     bd4:	35 96       	adiw	r30, 0x05	; 5
  return u8x8_pgm_read( font );  
     bd6:	e4 91       	lpm	r30, Z
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
     bd8:	ed 83       	std	Y+5, r30	; 0x05

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bda:	fb 01       	movw	r30, r22
     bdc:	36 96       	adiw	r30, 0x06	; 6
  return u8x8_pgm_read( font );  
     bde:	e4 91       	lpm	r30, Z
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
     be0:	ee 83       	std	Y+6, r30	; 0x06

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     be2:	fb 01       	movw	r30, r22
     be4:	37 96       	adiw	r30, 0x07	; 7
  return u8x8_pgm_read( font );  
     be6:	e4 91       	lpm	r30, Z
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
     be8:	ef 83       	std	Y+7, r30	; 0x07

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bea:	fb 01       	movw	r30, r22
     bec:	38 96       	adiw	r30, 0x08	; 8
  return u8x8_pgm_read( font );  
     bee:	e4 91       	lpm	r30, Z
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
     bf0:	e8 87       	std	Y+8, r30	; 0x08

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bf2:	fb 01       	movw	r30, r22
     bf4:	39 96       	adiw	r30, 0x09	; 9
  return u8x8_pgm_read( font );  
     bf6:	e4 91       	lpm	r30, Z
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
     bf8:	e9 87       	std	Y+9, r30	; 0x09

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     bfa:	fb 01       	movw	r30, r22
     bfc:	3a 96       	adiw	r30, 0x0a	; 10
  return u8x8_pgm_read( font );  
     bfe:	e4 91       	lpm	r30, Z
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
     c00:	ea 87       	std	Y+10, r30	; 0x0a

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     c02:	fb 01       	movw	r30, r22
     c04:	3b 96       	adiw	r30, 0x0b	; 11
  return u8x8_pgm_read( font );  
     c06:	e4 91       	lpm	r30, Z
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
     c08:	eb 87       	std	Y+11, r30	; 0x0b

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     c0a:	fb 01       	movw	r30, r22
     c0c:	3c 96       	adiw	r30, 0x0c	; 12
  return u8x8_pgm_read( font );  
     c0e:	e4 91       	lpm	r30, Z
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
     c10:	ec 87       	std	Y+12, r30	; 0x0c

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     c12:	fb 01       	movw	r30, r22
     c14:	3d 96       	adiw	r30, 0x0d	; 13
  return u8x8_pgm_read( font );  
     c16:	e4 91       	lpm	r30, Z
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
     c18:	ed 87       	std	Y+13, r30	; 0x0d

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     c1a:	fb 01       	movw	r30, r22
     c1c:	3e 96       	adiw	r30, 0x0e	; 14
  return u8x8_pgm_read( font );  
     c1e:	e4 91       	lpm	r30, Z
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
     c20:	ee 87       	std	Y+14, r30	; 0x0e

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     c22:	fb 01       	movw	r30, r22
     c24:	3f 96       	adiw	r30, 0x0f	; 15
  return u8x8_pgm_read( font );  
     c26:	e4 91       	lpm	r30, Z
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
     c28:	ef 87       	std	Y+15, r30	; 0x0f

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
     c2a:	fb 01       	movw	r30, r22
     c2c:	70 96       	adiw	r30, 0x10	; 16
  return u8x8_pgm_read( font );  
     c2e:	e4 91       	lpm	r30, Z
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
     c30:	e8 8b       	std	Y+16, r30	; 0x10
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
     c32:	61 e1       	ldi	r22, 0x11	; 17
     c34:	c8 01       	movw	r24, r16
     c36:	8d df       	rcall	.-230    	; 0xb52 <u8g2_font_get_word>
     c38:	9a 8b       	std	Y+18, r25	; 0x12
     c3a:	89 8b       	std	Y+17, r24	; 0x11
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
     c3c:	63 e1       	ldi	r22, 0x13	; 19
     c3e:	c8 01       	movw	r24, r16
     c40:	88 df       	rcall	.-240    	; 0xb52 <u8g2_font_get_word>
     c42:	9c 8b       	std	Y+20, r25	; 0x14
     c44:	8b 8b       	std	Y+19, r24	; 0x13
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
     c46:	65 e1       	ldi	r22, 0x15	; 21
     c48:	c8 01       	movw	r24, r16
     c4a:	83 df       	rcall	.-250    	; 0xb52 <u8g2_font_get_word>
     c4c:	9e 8b       	std	Y+22, r25	; 0x16
     c4e:	8d 8b       	std	Y+21, r24	; 0x15
#endif
}
     c50:	df 91       	pop	r29
     c52:	cf 91       	pop	r28
     c54:	1f 91       	pop	r17
     c56:	0f 91       	pop	r16
     c58:	08 95       	ret

00000c5a <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
     c5a:	dc 01       	movw	r26, r24
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
     c5c:	18 96       	adiw	r26, 0x08	; 8
     c5e:	4c 91       	ld	r20, X
     c60:	18 97       	sbiw	r26, 0x08	; 8
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
     c62:	ed 91       	ld	r30, X+
     c64:	fc 91       	ld	r31, X
     c66:	11 97       	sbiw	r26, 0x01	; 1
     c68:	24 91       	lpm	r18, Z
  
  val >>= bit_pos;
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	04 2e       	mov	r0, r20
     c6e:	02 c0       	rjmp	.+4      	; 0xc74 <u8g2_font_decode_get_unsigned_bits+0x1a>
     c70:	35 95       	asr	r19
     c72:	27 95       	ror	r18
     c74:	0a 94       	dec	r0
     c76:	e2 f7       	brpl	.-8      	; 0xc70 <u8g2_font_decode_get_unsigned_bits+0x16>
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
     c78:	86 2f       	mov	r24, r22
     c7a:	84 0f       	add	r24, r20
  if ( bit_pos_plus_cnt >= 8 )
     c7c:	88 30       	cpi	r24, 0x08	; 8
     c7e:	10 f4       	brcc	.+4      	; 0xc84 <u8g2_font_decode_get_unsigned_bits+0x2a>
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
     c80:	e2 2f       	mov	r30, r18
     c82:	0e c0       	rjmp	.+28     	; 0xca0 <u8g2_font_decode_get_unsigned_bits+0x46>
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
     c84:	31 96       	adiw	r30, 0x01	; 1
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	fc 93       	st	X, r31
     c8a:	ee 93       	st	-X, r30
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
     c8c:	94 91       	lpm	r25, Z
     c8e:	e9 2f       	mov	r30, r25
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
     c90:	98 e0       	ldi	r25, 0x08	; 8
     c92:	94 1b       	sub	r25, r20
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
     c94:	01 c0       	rjmp	.+2      	; 0xc98 <u8g2_font_decode_get_unsigned_bits+0x3e>
     c96:	ee 0f       	add	r30, r30
     c98:	9a 95       	dec	r25
     c9a:	ea f7       	brpl	.-6      	; 0xc96 <u8g2_font_decode_get_unsigned_bits+0x3c>
     c9c:	e2 2b       	or	r30, r18
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
     c9e:	88 50       	subi	r24, 0x08	; 8
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
     ca0:	18 96       	adiw	r26, 0x08	; 8
     ca2:	8c 93       	st	X, r24
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	01 c0       	rjmp	.+2      	; 0xcac <u8g2_font_decode_get_unsigned_bits+0x52>
     caa:	88 0f       	add	r24, r24
     cac:	6a 95       	dec	r22
     cae:	ea f7       	brpl	.-6      	; 0xcaa <u8g2_font_decode_get_unsigned_bits+0x50>
     cb0:	81 50       	subi	r24, 0x01	; 1
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
  return val;
}
     cb2:	8e 23       	and	r24, r30
     cb4:	08 95       	ret

00000cb6 <u8g2_font_setup_decode>:
  decode->y = ly;
  
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	ec 01       	movw	r28, r24
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
     cc0:	8c 01       	movw	r16, r24
     cc2:	0e 5c       	subi	r16, 0xCE	; 206
     cc4:	1f 4f       	sbci	r17, 0xFF	; 255
  decode->decode_ptr = glyph_data;
     cc6:	7b ab       	std	Y+51, r23	; 0x33
     cc8:	6a ab       	std	Y+50, r22	; 0x32
  decode->decode_bit_pos = 0;
     cca:	1a ae       	std	Y+58, r1	; 0x3a
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
     ccc:	fc 01       	movw	r30, r24
     cce:	ed 5b       	subi	r30, 0xBD	; 189
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	60 81       	ld	r22, Z
     cd4:	c8 01       	movw	r24, r16
     cd6:	c1 df       	rcall	.-126    	; 0xc5a <u8g2_font_decode_get_unsigned_bits>
     cd8:	88 af       	std	Y+56, r24	; 0x38
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
     cda:	fe 01       	movw	r30, r28
     cdc:	ec 5b       	subi	r30, 0xBC	; 188
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	60 81       	ld	r22, Z
     ce2:	c8 01       	movw	r24, r16
     ce4:	ba df       	rcall	.-140    	; 0xc5a <u8g2_font_decode_get_unsigned_bits>
     ce6:	89 af       	std	Y+57, r24	; 0x39
  
  decode->fg_color = u8g2->draw_color;
     ce8:	fe 01       	movw	r30, r28
     cea:	e5 5a       	subi	r30, 0xA5	; 165
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	90 81       	ld	r25, Z
     cf0:	9c af       	std	Y+60, r25	; 0x3c
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	91 11       	cpse	r25, r1
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	8d af       	std	Y+61, r24	; 0x3d
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
     d04:	cf 93       	push	r28
     d06:	c6 2f       	mov	r28, r22
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
     d08:	a8 df       	rcall	.-176    	; 0xc5a <u8g2_font_decode_get_unsigned_bits>
  d = 1;
  cnt--;
     d0a:	c1 50       	subi	r28, 0x01	; 1
  d <<= cnt;
     d0c:	21 e0       	ldi	r18, 0x01	; 1
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <u8g2_font_decode_get_signed_bits+0x10>
     d12:	22 0f       	add	r18, r18
     d14:	ca 95       	dec	r28
     d16:	ea f7       	brpl	.-6      	; 0xd12 <u8g2_font_decode_get_signed_bits+0xe>
  v -= d;
  return v;
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
     d18:	82 1b       	sub	r24, r18
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
     d1e:	a0 e0       	ldi	r26, 0x00	; 0
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e4 e9       	ldi	r30, 0x94	; 148
     d24:	f6 e0       	ldi	r31, 0x06	; 6
     d26:	d7 c5       	rjmp	.+2990   	; 0x18d6 <__prologue_saves__+0xa>
     d28:	ec 01       	movw	r28, r24
     d2a:	f6 2e       	mov	r15, r22
     d2c:	84 2e       	mov	r8, r20
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
     d2e:	1e a9       	ldd	r17, Y+54	; 0x36
  ly = decode->y;
     d30:	df a8       	ldd	r13, Y+55	; 0x37
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
     d32:	5c 01       	movw	r10, r24
     d34:	8b e5       	ldi	r24, 0x5B	; 91
     d36:	a8 0e       	add	r10, r24
     d38:	b1 1c       	adc	r11, r1
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    rem -= lx;
     d3a:	e8 ac       	ldd	r14, Y+56	; 0x38
     d3c:	e1 1a       	sub	r14, r17
     d3e:	ce 2c       	mov	r12, r14
     d40:	fe 14       	cp	r15, r14
     d42:	08 f4       	brcc	.+2      	; 0xd46 <u8g2_font_decode_len+0x28>
     d44:	cf 2c       	mov	r12, r15
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
    y = decode->target_y;
     d46:	7d a8       	ldd	r7, Y+53	; 0x35

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
     d48:	0e ad       	ldd	r16, Y+62	; 0x3e
     d4a:	20 2f       	mov	r18, r16
     d4c:	4d 2d       	mov	r20, r13
     d4e:	61 2f       	mov	r22, r17
     d50:	8c a9       	ldd	r24, Y+52	; 0x34
     d52:	18 df       	rcall	.-464    	; 0xb84 <u8g2_add_vector_x>
     d54:	98 2e       	mov	r9, r24
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
     d56:	20 2f       	mov	r18, r16
     d58:	4d 2d       	mov	r20, r13
     d5a:	61 2f       	mov	r22, r17
     d5c:	87 2d       	mov	r24, r7
     d5e:	05 df       	rcall	.-502    	; 0xb6a <u8g2_add_vector_y>
     d60:	48 2f       	mov	r20, r24
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
     d62:	88 20       	and	r8, r8
     d64:	11 f0       	breq	.+4      	; 0xd6a <u8g2_font_decode_len+0x4c>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
     d66:	9c ad       	ldd	r25, Y+60	; 0x3c
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <u8g2_font_decode_len+0x54>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
     d6a:	9b ad       	ldd	r25, Y+59	; 0x3b
     d6c:	91 11       	cpse	r25, r1
     d6e:	07 c0       	rjmp	.+14     	; 0xd7e <u8g2_font_decode_len+0x60>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
     d70:	9d ad       	ldd	r25, Y+61	; 0x3d
     d72:	f5 01       	movw	r30, r10
     d74:	90 83       	st	Z, r25
      u8g2_DrawHVLine(u8g2, 
     d76:	2c 2d       	mov	r18, r12
     d78:	69 2d       	mov	r22, r9
     d7a:	ce 01       	movw	r24, r28
     d7c:	42 d2       	rcall	.+1156   	; 0x1202 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
     d7e:	fe 14       	cp	r15, r14
     d80:	20 f0       	brcs	.+8      	; 0xd8a <u8g2_font_decode_len+0x6c>
      break;
    cnt -= rem;
     d82:	fe 18       	sub	r15, r14
    lx = 0;
    ly++;
     d84:	d3 94       	inc	r13
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
    lx = 0;
     d86:	10 e0       	ldi	r17, 0x00	; 0
    ly++;
  }
     d88:	d8 cf       	rjmp	.-80     	; 0xd3a <u8g2_font_decode_len+0x1c>
  lx += cnt;
     d8a:	1f 0d       	add	r17, r15
  
  decode->x = lx;
     d8c:	1e ab       	std	Y+54, r17	; 0x36
  decode->y = ly;
     d8e:	df aa       	std	Y+55, r13	; 0x37
  
}
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	ed e0       	ldi	r30, 0x0D	; 13
     d96:	bb c5       	rjmp	.+2934   	; 0x190e <__epilogue_restores__+0xa>

00000d98 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
     d98:	a1 e0       	ldi	r26, 0x01	; 1
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e1 ed       	ldi	r30, 0xD1	; 209
     d9e:	f6 e0       	ldi	r31, 0x06	; 6
     da0:	99 c5       	rjmp	.+2866   	; 0x18d4 <__prologue_saves__+0x8>
     da2:	3c 01       	movw	r6, r24
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
     da4:	7c 01       	movw	r14, r24
     da6:	82 e3       	ldi	r24, 0x32	; 50
     da8:	e8 0e       	add	r14, r24
     daa:	f1 1c       	adc	r15, r1
    
  u8g2_font_setup_decode(u8g2, glyph_data);
     dac:	c3 01       	movw	r24, r6
     dae:	83 df       	rcall	.-250    	; 0xcb6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
     db0:	d3 01       	movw	r26, r6
     db2:	d9 96       	adiw	r26, 0x39	; 57
     db4:	dc 90       	ld	r13, X
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
     db6:	f3 01       	movw	r30, r6
     db8:	eb 5b       	subi	r30, 0xBB	; 187
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	60 81       	ld	r22, Z
     dbe:	c7 01       	movw	r24, r14
     dc0:	a1 df       	rcall	.-190    	; 0xd04 <u8g2_font_decode_get_signed_bits>
     dc2:	a8 2e       	mov	r10, r24
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
     dc4:	f3 01       	movw	r30, r6
     dc6:	ea 5b       	subi	r30, 0xBA	; 186
     dc8:	ff 4f       	sbci	r31, 0xFF	; 255
     dca:	60 81       	ld	r22, Z
     dcc:	c7 01       	movw	r24, r14
     dce:	9a df       	rcall	.-204    	; 0xd04 <u8g2_font_decode_get_signed_bits>
     dd0:	c8 2e       	mov	r12, r24
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
     dd2:	f3 01       	movw	r30, r6
     dd4:	e9 5b       	subi	r30, 0xB9	; 185
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	60 81       	ld	r22, Z
     dda:	c7 01       	movw	r24, r14
     ddc:	93 df       	rcall	.-218    	; 0xd04 <u8g2_font_decode_get_signed_bits>
     dde:	b8 2e       	mov	r11, r24
  
  if ( decode->glyph_width > 0 )
     de0:	f3 01       	movw	r30, r6
     de2:	00 ad       	ldd	r16, Z+56	; 0x38
     de4:	10 16       	cp	r1, r16
     de6:	0c f0       	brlt	.+2      	; 0xdea <u8g2_font_decode_glyph+0x52>
     de8:	73 c0       	rjmp	.+230    	; 0xed0 <u8g2_font_decode_glyph+0x138>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
     dea:	96 ad       	ldd	r25, Z+62	; 0x3e
     dec:	cd 0c       	add	r12, r13
     dee:	c1 94       	neg	r12
     df0:	29 2f       	mov	r18, r25
     df2:	4c 2d       	mov	r20, r12
     df4:	6a 2d       	mov	r22, r10
     df6:	84 a9       	ldd	r24, Z+52	; 0x34
     df8:	99 83       	std	Y+1, r25	; 0x01
     dfa:	c4 de       	rcall	.-632    	; 0xb84 <u8g2_add_vector_x>
     dfc:	18 2f       	mov	r17, r24
     dfe:	d3 01       	movw	r26, r6
     e00:	d4 96       	adiw	r26, 0x34	; 52
     e02:	8c 93       	st	X, r24
     e04:	d4 97       	sbiw	r26, 0x34	; 52
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
     e06:	99 81       	ldd	r25, Y+1	; 0x01
     e08:	29 2f       	mov	r18, r25
     e0a:	4c 2d       	mov	r20, r12
     e0c:	6a 2d       	mov	r22, r10
     e0e:	d5 96       	adiw	r26, 0x35	; 53
     e10:	8c 91       	ld	r24, X
     e12:	ab de       	rcall	.-682    	; 0xb6a <u8g2_add_vector_y>
     e14:	48 2f       	mov	r20, r24
     e16:	f3 01       	movw	r30, r6
     e18:	85 ab       	std	Z+53, r24	; 0x35
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
     e1a:	99 81       	ldd	r25, Y+1	; 0x01
     e1c:	91 30       	cpi	r25, 0x01	; 1
     e1e:	91 f0       	breq	.+36     	; 0xe44 <u8g2_font_decode_glyph+0xac>
     e20:	60 f0       	brcs	.+24     	; 0xe3a <u8g2_font_decode_glyph+0xa2>
     e22:	92 30       	cpi	r25, 0x02	; 2
     e24:	a9 f0       	breq	.+42     	; 0xe50 <u8g2_font_decode_glyph+0xb8>
     e26:	93 30       	cpi	r25, 0x03	; 3
     e28:	f1 f4       	brne	.+60     	; 0xe66 <u8g2_font_decode_glyph+0xce>
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
     e2a:	21 2f       	mov	r18, r17
     e2c:	2d 0d       	add	r18, r13
     e2e:	80 1b       	sub	r24, r16
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
     e30:	01 e0       	ldi	r16, 0x01	; 1
     e32:	04 0f       	add	r16, r20
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     e34:	41 e0       	ldi	r20, 0x01	; 1
     e36:	48 0f       	add	r20, r24
	    y1++;
	    break;	  
     e38:	18 c0       	rjmp	.+48     	; 0xe6a <u8g2_font_decode_glyph+0xd2>
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
      {
	case 0:
	    x1 += decode->glyph_width;
     e3a:	21 2f       	mov	r18, r17
     e3c:	20 0f       	add	r18, r16
	    y1 += h;
     e3e:	08 2f       	mov	r16, r24
     e40:	0d 0d       	add	r16, r13
	    break;
     e42:	13 c0       	rjmp	.+38     	; 0xe6a <u8g2_font_decode_glyph+0xd2>
     e44:	9d 19       	sub	r25, r13
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    x1++;
     e46:	21 e0       	ldi	r18, 0x01	; 1
     e48:	21 0f       	add	r18, r17
	    y1 += decode->glyph_width;
     e4a:	08 0f       	add	r16, r24
	    x1 += decode->glyph_width;
	    y1 += h;
	    break;
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     e4c:	19 0f       	add	r17, r25
	    x1++;
	    y1 += decode->glyph_width;
	    break;
     e4e:	0d c0       	rjmp	.+26     	; 0xe6a <u8g2_font_decode_glyph+0xd2>
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	89 2f       	mov	r24, r25
     e54:	80 1b       	sub	r24, r16
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    x1++;
     e56:	21 e0       	ldi	r18, 0x01	; 1
     e58:	21 0f       	add	r18, r17
     e5a:	9d 19       	sub	r25, r13
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
     e5c:	01 e0       	ldi	r16, 0x01	; 1
     e5e:	04 0f       	add	r16, r20
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    x1++;
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     e60:	49 0f       	add	r20, r25
	    x1++;
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
     e62:	18 0f       	add	r17, r24
	    x1++;
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
	    break;	  
     e64:	02 c0       	rjmp	.+4      	; 0xe6a <u8g2_font_decode_glyph+0xd2>
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
     e66:	08 2f       	mov	r16, r24
#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
      y0 = decode->target_y;
      x1 = x0;
     e68:	21 2f       	mov	r18, r17
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
     e6a:	61 2f       	mov	r22, r17
     e6c:	c3 01       	movw	r24, r6
     e6e:	ef d1       	rcall	.+990    	; 0x124e <u8g2_IsIntersection>
     e70:	88 23       	and	r24, r24
     e72:	71 f1       	breq	.+92     	; 0xed0 <u8g2_font_decode_glyph+0x138>
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
     e74:	d3 01       	movw	r26, r6
     e76:	d6 96       	adiw	r26, 0x36	; 54
     e78:	1c 92       	st	X, r1
     e7a:	d6 97       	sbiw	r26, 0x36	; 54
    decode->y = 0;
     e7c:	d7 96       	adiw	r26, 0x37	; 55
     e7e:	1c 92       	st	X, r1
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
     e80:	83 01       	movw	r16, r6
     e82:	0f 5b       	subi	r16, 0xBF	; 191
     e84:	1f 4f       	sbci	r17, 0xFF	; 255
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
     e86:	43 01       	movw	r8, r6
     e88:	b2 e4       	ldi	r27, 0x42	; 66
     e8a:	8b 0e       	add	r8, r27
     e8c:	91 1c       	adc	r9, r1
    decode->y = 0;
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
     e8e:	f8 01       	movw	r30, r16
     e90:	60 81       	ld	r22, Z
     e92:	c7 01       	movw	r24, r14
     e94:	e2 de       	rcall	.-572    	; 0xc5a <u8g2_font_decode_get_unsigned_bits>
     e96:	a8 2e       	mov	r10, r24
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
     e98:	d4 01       	movw	r26, r8
     e9a:	6c 91       	ld	r22, X
     e9c:	c7 01       	movw	r24, r14
     e9e:	dd de       	rcall	.-582    	; 0xc5a <u8g2_font_decode_get_unsigned_bits>
     ea0:	c8 2e       	mov	r12, r24
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	6a 2d       	mov	r22, r10
     ea6:	c3 01       	movw	r24, r6
     ea8:	3a df       	rcall	.-396    	; 0xd1e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
     eaa:	41 e0       	ldi	r20, 0x01	; 1
     eac:	6c 2d       	mov	r22, r12
     eae:	c3 01       	movw	r24, r6
     eb0:	36 df       	rcall	.-404    	; 0xd1e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	c7 01       	movw	r24, r14
     eb6:	d1 de       	rcall	.-606    	; 0xc5a <u8g2_font_decode_get_unsigned_bits>
     eb8:	81 11       	cpse	r24, r1
     eba:	f3 cf       	rjmp	.-26     	; 0xea2 <u8g2_font_decode_glyph+0x10a>

      if ( decode->y >= h )
     ebc:	f3 01       	movw	r30, r6
     ebe:	87 a9       	ldd	r24, Z+55	; 0x37
     ec0:	8d 15       	cp	r24, r13
     ec2:	2c f3       	brlt	.-54     	; 0xe8e <u8g2_font_decode_glyph+0xf6>
	break;
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
     ec4:	e5 5a       	subi	r30, 0xA5	; 165
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	d3 01       	movw	r26, r6
     eca:	dc 96       	adiw	r26, 0x3c	; 60
     ecc:	8c 91       	ld	r24, X
     ece:	80 83       	st	Z, r24
  }
  return d;
}
     ed0:	8b 2d       	mov	r24, r11
     ed2:	21 96       	adiw	r28, 0x01	; 1
     ed4:	ee e0       	ldi	r30, 0x0E	; 14
     ed6:	1a c5       	rjmp	.+2612   	; 0x190c <__epilogue_restores__+0x8>

00000ed8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
     ed8:	fc 01       	movw	r30, r24
  const uint8_t *font = u8g2->font;
     eda:	86 a5       	ldd	r24, Z+46	; 0x2e
     edc:	97 a5       	ldd	r25, Z+47	; 0x2f
  font += U8G2_FONT_DATA_STRUCT_SIZE;
     ede:	47 96       	adiw	r24, 0x17	; 23

  
  if ( encoding <= 255 )
     ee0:	6f 3f       	cpi	r22, 0xFF	; 255
     ee2:	71 05       	cpc	r23, r1
     ee4:	09 f0       	breq	.+2      	; 0xee8 <u8g2_font_get_glyph_data+0x10>
     ee6:	18 f5       	brcc	.+70     	; 0xf2e <u8g2_font_get_glyph_data+0x56>
  {
    if ( encoding >= 'a' )
     ee8:	61 36       	cpi	r22, 0x61	; 97
     eea:	71 05       	cpc	r23, r1
     eec:	18 f0       	brcs	.+6      	; 0xef4 <u8g2_font_get_glyph_data+0x1c>
    {
      font += u8g2->font_info.start_pos_lower_a;
     eee:	ee 5a       	subi	r30, 0xAE	; 174
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	05 c0       	rjmp	.+10     	; 0xefe <u8g2_font_get_glyph_data+0x26>
    }
    else if ( encoding >= 'A' )
     ef4:	61 34       	cpi	r22, 0x41	; 65
     ef6:	71 05       	cpc	r23, r1
     ef8:	30 f0       	brcs	.+12     	; 0xf06 <u8g2_font_get_glyph_data+0x2e>
    {
      font += u8g2->font_info.start_pos_upper_A;
     efa:	e0 5b       	subi	r30, 0xB0	; 176
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	20 81       	ld	r18, Z
     f00:	31 81       	ldd	r19, Z+1	; 0x01
     f02:	82 0f       	add	r24, r18
     f04:	93 1f       	adc	r25, r19
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
     f06:	9c 01       	movw	r18, r24
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	f9 01       	movw	r30, r18
     f0e:	44 91       	lpm	r20, Z
     f10:	44 23       	and	r20, r20
     f12:	49 f1       	breq	.+82     	; 0xf66 <u8g2_font_get_glyph_data+0x8e>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
     f14:	fc 01       	movw	r30, r24
     f16:	44 91       	lpm	r20, Z
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	46 17       	cp	r20, r22
     f1c:	57 07       	cpc	r21, r23
     f1e:	11 f4       	brne	.+4      	; 0xf24 <u8g2_font_get_glyph_data+0x4c>
      {
	return font+2;	/* skip encoding and glyph size */
     f20:	02 96       	adiw	r24, 0x02	; 2
     f22:	08 95       	ret
      }
      font += u8x8_pgm_read( font + 1 );
     f24:	f9 01       	movw	r30, r18
     f26:	24 91       	lpm	r18, Z
     f28:	82 0f       	add	r24, r18
     f2a:	91 1d       	adc	r25, r1
    }
     f2c:	ec cf       	rjmp	.-40     	; 0xf06 <u8g2_font_get_glyph_data+0x2e>
  }
#ifdef U8G2_WITH_UNICODE
  else
  {
    uint16_t e;
    font += u8g2->font_info.start_pos_unicode;
     f2e:	ec 5a       	subi	r30, 0xAC	; 172
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	20 81       	ld	r18, Z
     f34:	31 81       	ldd	r19, Z+1	; 0x01
     f36:	82 0f       	add	r24, r18
     f38:	93 1f       	adc	r25, r19
    for(;;)
    {
      e = u8x8_pgm_read( font );
     f3a:	fc 01       	movw	r30, r24
     f3c:	24 91       	lpm	r18, Z
     f3e:	30 e0       	ldi	r19, 0x00	; 0
      e <<= 8;
     f40:	32 2f       	mov	r19, r18
     f42:	22 27       	eor	r18, r18
      e |= u8x8_pgm_read( font + 1 );
     f44:	31 96       	adiw	r30, 0x01	; 1
     f46:	e4 91       	lpm	r30, Z
     f48:	2e 2b       	or	r18, r30
  
      if ( e == 0 )
     f4a:	21 15       	cp	r18, r1
     f4c:	31 05       	cpc	r19, r1
     f4e:	59 f0       	breq	.+22     	; 0xf66 <u8g2_font_get_glyph_data+0x8e>
	break;
  
      if ( e == encoding )
     f50:	26 17       	cp	r18, r22
     f52:	37 07       	cpc	r19, r23
     f54:	11 f4       	brne	.+4      	; 0xf5a <u8g2_font_get_glyph_data+0x82>
      {
	return font+3;	/* skip encoding and glyph size */
     f56:	03 96       	adiw	r24, 0x03	; 3
     f58:	08 95       	ret
      }
      font += u8x8_pgm_read( font + 2 );
     f5a:	fc 01       	movw	r30, r24
     f5c:	32 96       	adiw	r30, 0x02	; 2
     f5e:	e4 91       	lpm	r30, Z
     f60:	8e 0f       	add	r24, r30
     f62:	91 1d       	adc	r25, r1
    }  
     f64:	ea cf       	rjmp	.-44     	; 0xf3a <u8g2_font_get_glyph_data+0x62>
  }
#endif
  
  return NULL;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	90 e0       	ldi	r25, 0x00	; 0
}
     f6a:	08 95       	ret

00000f6c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
     f6c:	fc 01       	movw	r30, r24
     f6e:	63 af       	std	Z+59, r22	; 0x3b
     f70:	08 95       	ret

00000f72 <u8g2_DrawGlyph>:
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
     f72:	ef 92       	push	r14
     f74:	ff 92       	push	r15
     f76:	0f 93       	push	r16
     f78:	1f 93       	push	r17
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec 01       	movw	r28, r24
     f80:	06 2f       	mov	r16, r22
     f82:	14 2f       	mov	r17, r20
     f84:	79 01       	movw	r14, r18
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
     f86:	8e ad       	ldd	r24, Y+62	; 0x3e
     f88:	81 30       	cpi	r24, 0x01	; 1
     f8a:	89 f0       	breq	.+34     	; 0xfae <u8g2_DrawGlyph+0x3c>
     f8c:	50 f0       	brcs	.+20     	; 0xfa2 <u8g2_DrawGlyph+0x30>
     f8e:	82 30       	cpi	r24, 0x02	; 2
     f90:	a1 f0       	breq	.+40     	; 0xfba <u8g2_DrawGlyph+0x48>
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	b9 f4       	brne	.+46     	; 0xfc4 <u8g2_DrawGlyph+0x52>
      break;
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
      break;
    case 3:
      x += u8g2->font_calc_vref(u8g2);
     f96:	e8 a9       	ldd	r30, Y+48	; 0x30
     f98:	f9 a9       	ldd	r31, Y+49	; 0x31
     f9a:	ce 01       	movw	r24, r28
     f9c:	09 95       	icall
     f9e:	08 0f       	add	r16, r24
      break;
     fa0:	11 c0       	rjmp	.+34     	; 0xfc4 <u8g2_DrawGlyph+0x52>
{
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
     fa2:	e8 a9       	ldd	r30, Y+48	; 0x30
     fa4:	f9 a9       	ldd	r31, Y+49	; 0x31
     fa6:	ce 01       	movw	r24, r28
     fa8:	09 95       	icall
     faa:	18 0f       	add	r17, r24
      break;
     fac:	0b c0       	rjmp	.+22     	; 0xfc4 <u8g2_DrawGlyph+0x52>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
     fae:	e8 a9       	ldd	r30, Y+48	; 0x30
     fb0:	f9 a9       	ldd	r31, Y+49	; 0x31
     fb2:	ce 01       	movw	r24, r28
     fb4:	09 95       	icall
     fb6:	08 1b       	sub	r16, r24
      break;
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <u8g2_DrawGlyph+0x52>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
     fba:	e8 a9       	ldd	r30, Y+48	; 0x30
     fbc:	f9 a9       	ldd	r31, Y+49	; 0x31
     fbe:	ce 01       	movw	r24, r28
     fc0:	09 95       	icall
     fc2:	18 1b       	sub	r17, r24
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
     fc4:	0c ab       	std	Y+52, r16	; 0x34
  u8g2->font_decode.target_y = y;
     fc6:	1d ab       	std	Y+53, r17	; 0x35
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
     fc8:	b7 01       	movw	r22, r14
     fca:	ce 01       	movw	r24, r28
     fcc:	85 df       	rcall	.-246    	; 0xed8 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	21 f0       	breq	.+8      	; 0xfda <u8g2_DrawGlyph+0x68>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
     fd2:	bc 01       	movw	r22, r24
     fd4:	ce 01       	movw	r24, r28
     fd6:	e0 de       	rcall	.-576    	; 0xd98 <u8g2_font_decode_glyph>
     fd8:	01 c0       	rjmp	.+2      	; 0xfdc <u8g2_DrawGlyph+0x6a>
  return NULL;
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
     fda:	80 e0       	ldi	r24, 0x00	; 0
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	e6 e0       	ldi	r30, 0x06	; 6
     fe2:	9c c4       	rjmp	.+2360   	; 0x191c <__epilogue_restores__+0x18>

00000fe4 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
     fe4:	af 92       	push	r10
     fe6:	bf 92       	push	r11
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	00 d0       	rcall	.+0      	; 0xff8 <u8g2_draw_string+0x14>
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	5c 01       	movw	r10, r24
     ffe:	16 2f       	mov	r17, r22
    1000:	04 2f       	mov	r16, r20
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
    1002:	29 83       	std	Y+1, r18	; 0x01
    1004:	3a 83       	std	Y+2, r19	; 0x02
    1006:	0f d2       	rcall	.+1054   	; 0x1426 <u8x8_utf8_init>
    1008:	29 81       	ldd	r18, Y+1	; 0x01
    100a:	e2 2e       	mov	r14, r18
    100c:	3a 81       	ldd	r19, Y+2	; 0x02
    100e:	f3 2e       	mov	r15, r19
  sum = 0;
    1010:	d1 2c       	mov	r13, r1
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    1012:	d7 01       	movw	r26, r14
    1014:	6d 91       	ld	r22, X+
    1016:	7d 01       	movw	r14, r26
    1018:	d5 01       	movw	r26, r10
    101a:	12 96       	adiw	r26, 0x02	; 2
    101c:	ed 91       	ld	r30, X+
    101e:	fc 91       	ld	r31, X
    1020:	13 97       	sbiw	r26, 0x03	; 3
    1022:	c5 01       	movw	r24, r10
    1024:	09 95       	icall
    if ( e == 0x0ffff )
    1026:	8f 3f       	cpi	r24, 0xFF	; 255
    1028:	bf ef       	ldi	r27, 0xFF	; 255
    102a:	9b 07       	cpc	r25, r27
    102c:	e1 f0       	breq	.+56     	; 0x1066 <u8g2_draw_string+0x82>
      break;
    str++;
    if ( e != 0x0fffe )
    102e:	8e 3f       	cpi	r24, 0xFE	; 254
    1030:	ef ef       	ldi	r30, 0xFF	; 255
    1032:	9e 07       	cpc	r25, r30
    1034:	71 f3       	breq	.-36     	; 0x1012 <u8g2_draw_string+0x2e>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    1036:	9c 01       	movw	r18, r24
    1038:	40 2f       	mov	r20, r16
    103a:	61 2f       	mov	r22, r17
    103c:	c5 01       	movw	r24, r10
    103e:	99 df       	rcall	.-206    	; 0xf72 <u8g2_DrawGlyph>
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
    1040:	d5 01       	movw	r26, r10
    1042:	de 96       	adiw	r26, 0x3e	; 62
    1044:	2c 91       	ld	r18, X
    1046:	21 30       	cpi	r18, 0x01	; 1
    1048:	49 f0       	breq	.+18     	; 0x105c <u8g2_draw_string+0x78>
    104a:	30 f0       	brcs	.+12     	; 0x1058 <u8g2_draw_string+0x74>
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	41 f0       	breq	.+16     	; 0x1060 <u8g2_draw_string+0x7c>
    1050:	23 30       	cpi	r18, 0x03	; 3
    1052:	39 f4       	brne	.+14     	; 0x1062 <u8g2_draw_string+0x7e>
	  break;
	case 2:
	  x -= delta;
	  break;
	case 3:
	  y -= delta;
    1054:	08 1b       	sub	r16, r24
	  break;
    1056:	05 c0       	rjmp	.+10     	; 0x1062 <u8g2_draw_string+0x7e>
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
      {
	case 0:
	  x += delta;
    1058:	18 0f       	add	r17, r24
	  break;
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <u8g2_draw_string+0x7e>
	case 1:
	  y += delta;
    105c:	08 0f       	add	r16, r24
	  break;
    105e:	01 c0       	rjmp	.+2      	; 0x1062 <u8g2_draw_string+0x7e>
	case 2:
	  x -= delta;
    1060:	18 1b       	sub	r17, r24
      }
#else
      x += delta;
#endif

      sum += delta;    
    1062:	d8 0e       	add	r13, r24
    1064:	d6 cf       	rjmp	.-84     	; 0x1012 <u8g2_draw_string+0x2e>
    }
  }
  return sum;
}
    1066:	8d 2d       	mov	r24, r13
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	bf 90       	pop	r11
    107c:	af 90       	pop	r10
    107e:	08 95       	ret

00001080 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    1080:	e9 e0       	ldi	r30, 0x09	; 9
    1082:	fa e0       	ldi	r31, 0x0A	; 10
    1084:	dc 01       	movw	r26, r24
    1086:	13 96       	adiw	r26, 0x03	; 3
    1088:	fc 93       	st	X, r31
    108a:	ee 93       	st	-X, r30
    108c:	12 97       	sbiw	r26, 0x02	; 2
  return u8g2_draw_string(u8g2, x, y, str);
    108e:	aa cf       	rjmp	.-172    	; 0xfe4 <u8g2_draw_string>

00001090 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
  if ( u8g2->font == NULL )
    1094:	fc 01       	movw	r30, r24
    1096:	26 a5       	ldd	r18, Z+46	; 0x2e
    1098:	37 a5       	ldd	r19, Z+47	; 0x2f
    109a:	23 2b       	or	r18, r19
    109c:	c9 f1       	breq	.+114    	; 0x1110 <u8g2_UpdateRefHeight+0x80>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    109e:	e4 5b       	subi	r30, 0xB4	; 180
    10a0:	ff 4f       	sbci	r31, 0xFF	; 255
    10a2:	20 81       	ld	r18, Z
    10a4:	ec 01       	movw	r28, r24
    10a6:	c9 5a       	subi	r28, 0xA9	; 169
    10a8:	df 4f       	sbci	r29, 0xFF	; 255
    10aa:	28 83       	st	Y, r18
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    10ac:	31 96       	adiw	r30, 0x01	; 1
    10ae:	50 81       	ld	r21, Z
    10b0:	dc 01       	movw	r26, r24
    10b2:	a8 5a       	subi	r26, 0xA8	; 168
    10b4:	bf 4f       	sbci	r27, 0xFF	; 255
    10b6:	5c 93       	st	X, r21
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    10b8:	39 96       	adiw	r30, 0x09	; 9
    10ba:	30 81       	ld	r19, Z
    10bc:	33 23       	and	r19, r19
    10be:	41 f1       	breq	.+80     	; 0x1110 <u8g2_UpdateRefHeight+0x80>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    10c0:	31 30       	cpi	r19, 0x01	; 1
    10c2:	69 f4       	brne	.+26     	; 0x10de <u8g2_UpdateRefHeight+0x4e>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    10c4:	38 97       	sbiw	r30, 0x08	; 8
    10c6:	30 81       	ld	r19, Z
    10c8:	23 17       	cp	r18, r19
    10ca:	0c f4       	brge	.+2      	; 0x10ce <u8g2_UpdateRefHeight+0x3e>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    10cc:	38 83       	st	Y, r19
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    10ce:	fc 01       	movw	r30, r24
    10d0:	e1 5b       	subi	r30, 0xB1	; 177
    10d2:	ff 4f       	sbci	r31, 0xFF	; 255
    10d4:	80 81       	ld	r24, Z
    10d6:	85 17       	cp	r24, r21
    10d8:	dc f4       	brge	.+54     	; 0x1110 <u8g2_UpdateRefHeight+0x80>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    10da:	8c 93       	st	X, r24
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <u8g2_UpdateRefHeight+0x80>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    10de:	fc 01       	movw	r30, r24
    10e0:	e7 5b       	subi	r30, 0xB7	; 183
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	40 81       	ld	r20, Z
    10e6:	32 96       	adiw	r30, 0x02	; 2
    10e8:	30 81       	ld	r19, Z
    10ea:	82 2f       	mov	r24, r18
    10ec:	22 0f       	add	r18, r18
    10ee:	99 0b       	sbc	r25, r25
    10f0:	63 2f       	mov	r22, r19
    10f2:	03 2e       	mov	r0, r19
    10f4:	00 0c       	add	r0, r0
    10f6:	77 0b       	sbc	r23, r23
    10f8:	64 0f       	add	r22, r20
    10fa:	71 1d       	adc	r23, r1
    10fc:	47 fd       	sbrc	r20, 7
    10fe:	7a 95       	dec	r23
    1100:	86 17       	cp	r24, r22
    1102:	97 07       	cpc	r25, r23
    1104:	14 f4       	brge	.+4      	; 0x110a <u8g2_UpdateRefHeight+0x7a>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    1106:	43 0f       	add	r20, r19
    1108:	48 83       	st	Y, r20
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    110a:	35 17       	cp	r19, r21
    110c:	0c f4       	brge	.+2      	; 0x1110 <u8g2_UpdateRefHeight+0x80>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    110e:	3c 93       	st	X, r19
  }  
}
    1110:	df 91       	pop	r29
    1112:	cf 91       	pop	r28
    1114:	08 95       	ret

00001116 <u8g2_SetFontPosBaseline>:
  return 0;
}

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
    1116:	2f ec       	ldi	r18, 0xCF	; 207
    1118:	35 e0       	ldi	r19, 0x05	; 5
    111a:	fc 01       	movw	r30, r24
    111c:	31 ab       	std	Z+49, r19	; 0x31
    111e:	20 ab       	std	Z+48, r18	; 0x30
    1120:	08 95       	ret

00001122 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
  if ( u8g2->font != font )
    1126:	fc 01       	movw	r30, r24
    1128:	26 a5       	ldd	r18, Z+46	; 0x2e
    112a:	37 a5       	ldd	r19, Z+47	; 0x2f
    112c:	26 17       	cp	r18, r22
    112e:	37 07       	cpc	r19, r23
    1130:	39 f0       	breq	.+14     	; 0x1140 <u8g2_SetFont+0x1e>
    1132:	ec 01       	movw	r28, r24
  {
    u8g2->font = font;
    1134:	77 a7       	std	Z+47, r23	; 0x2f
    1136:	66 a7       	std	Z+46, r22	; 0x2e
    u8g2_read_font_info(&(u8g2->font_info), font);
    1138:	cf 96       	adiw	r24, 0x3f	; 63
    113a:	33 dd       	rcall	.-1434   	; 0xba2 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    113c:	ce 01       	movw	r24, r28
    113e:	a8 df       	rcall	.-176    	; 0x1090 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    1140:	df 91       	pop	r29
    1142:	cf 91       	pop	r28
    1144:	08 95       	ret

00001146 <u8g2_draw_hv_line_4dir>:

  This function will remove directions 2 and 3. Instead 0 and 1 are used.

*/
void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1146:	0f 93       	push	r16
    1148:	dc 01       	movw	r26, r24
    114a:	92 96       	adiw	r26, 0x22	; 34
    114c:	5c 91       	ld	r21, X
    114e:	92 97       	sbiw	r26, 0x22	; 34
    1150:	93 96       	adiw	r26, 0x23	; 35
    1152:	3c 91       	ld	r19, X

  /* additional optimization for one pixel draw */
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
    1154:	21 30       	cpi	r18, 0x01	; 1
    1156:	89 f4       	brne	.+34     	; 0x117a <u8g2_draw_hv_line_4dir+0x34>
  {
    y -= u8g2->tile_curr_row*8;
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
    1158:	63 17       	cp	r22, r19
    115a:	08 f0       	brcs	.+2      	; 0x115e <u8g2_draw_hv_line_4dir+0x18>
    115c:	50 c0       	rjmp	.+160    	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
  /* requires about 60 bytes on the ATMega flash memory */
  /* 20% improvement for single pixel draw test in FPS.ino */
#ifdef U8G2_WITH_ONE_PIXEL_OPTIMIZATION
  if ( len == 1 )
  {
    y -= u8g2->tile_curr_row*8;
    115e:	b8 ef       	ldi	r27, 0xF8	; 248
    1160:	5b 9f       	mul	r21, r27
    1162:	40 0d       	add	r20, r0
    1164:	11 24       	eor	r1, r1
    if ( x < u8g2->pixel_buf_width && y < u8g2->pixel_buf_height )
    1166:	fc 01       	movw	r30, r24
    1168:	24 a1       	ldd	r18, Z+36	; 0x24
    116a:	42 17       	cp	r20, r18
    116c:	08 f0       	brcs	.+2      	; 0x1170 <u8g2_draw_hv_line_4dir+0x2a>
    116e:	47 c0       	rjmp	.+142    	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
      u8g2->ll_hvline(u8g2, x, y, len, dir);
    1170:	03 8c       	ldd	r0, Z+27	; 0x1b
    1172:	f4 8d       	ldd	r31, Z+28	; 0x1c
    1174:	e0 2d       	mov	r30, r0
    1176:	21 e0       	ldi	r18, 0x01	; 1
    1178:	41 c0       	rjmp	.+130    	; 0x11fc <u8g2_draw_hv_line_4dir+0xb6>
    return;
  }
#endif
  
  if ( dir == 2 )
    117a:	02 30       	cpi	r16, 0x02	; 2
    117c:	19 f4       	brne	.+6      	; 0x1184 <u8g2_draw_hv_line_4dir+0x3e>
    117e:	6f 5f       	subi	r22, 0xFF	; 255
  {
    x -= len;
    x++;
    1180:	62 1b       	sub	r22, r18
    1182:	04 c0       	rjmp	.+8      	; 0x118c <u8g2_draw_hv_line_4dir+0x46>
  }
  else if ( dir == 3 )
    1184:	03 30       	cpi	r16, 0x03	; 3
    1186:	11 f4       	brne	.+4      	; 0x118c <u8g2_draw_hv_line_4dir+0x46>
    1188:	4f 5f       	subi	r20, 0xFF	; 255
  {
    y -= len;
    y++;
    118a:	42 1b       	sub	r20, r18
static void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
  u8g2_uint_t a;
  register u8g2_uint_t w, h;

  y -= u8g2->tile_curr_row*8;
    118c:	f8 ef       	ldi	r31, 0xF8	; 248
    118e:	5f 9f       	mul	r21, r31
    1190:	40 0d       	add	r20, r0
    1192:	11 24       	eor	r1, r1
  
  
  h = u8g2->pixel_buf_height;		// this must be the real buffer height
    1194:	dc 01       	movw	r26, r24
    1196:	94 96       	adiw	r26, 0x24	; 36
    1198:	5c 91       	ld	r21, X
  w = u8g2->pixel_buf_width;		// this could be replaced by u8g2->u8x8.display_info->pixel_width


  if ( dir == 0 )
    119a:	70 2f       	mov	r23, r16
    119c:	71 70       	andi	r23, 0x01	; 1
    119e:	00 fd       	sbrc	r16, 0
    11a0:	14 c0       	rjmp	.+40     	; 0x11ca <u8g2_draw_hv_line_4dir+0x84>
  {
    if ( y >= h )
    11a2:	45 17       	cp	r20, r21
    11a4:	60 f5       	brcc	.+88     	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
      return;
    a = x;
    a += len;
    11a6:	26 0f       	add	r18, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    11a8:	26 17       	cp	r18, r22
    11aa:	30 f4       	brcc	.+12     	; 0x11b8 <u8g2_draw_hv_line_4dir+0x72>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    11ac:	63 17       	cp	r22, r19
    11ae:	18 f4       	brcc	.+6      	; 0x11b6 <u8g2_draw_hv_line_4dir+0x70>
    {
      b = d;
      b--;
    11b0:	2f ef       	ldi	r18, 0xFF	; 255
    11b2:	23 0f       	add	r18, r19
    11b4:	03 c0       	rjmp	.+6      	; 0x11bc <u8g2_draw_hv_line_4dir+0x76>
      *bp = b;
    }
    else
    {
      a = 0;
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    11b8:	63 17       	cp	r22, r19
    11ba:	08 f5       	brcc	.+66     	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
    return 0;
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
    11bc:	22 23       	and	r18, r18
    11be:	f9 f0       	breq	.+62     	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
    11c0:	32 17       	cp	r19, r18
    11c2:	08 f4       	brcc	.+2      	; 0x11c6 <u8g2_draw_hv_line_4dir+0x80>
    11c4:	23 2f       	mov	r18, r19
    a = x;
    a += len;
    if ( u8g2_clip_intersection(&x, &a, w) == 0 )
      return;
    len = a;
    len -= x;
    11c6:	26 1b       	sub	r18, r22
    11c8:	13 c0       	rjmp	.+38     	; 0x11f0 <u8g2_draw_hv_line_4dir+0xaa>
  }
  else
  {
    if ( x >= w )
    11ca:	63 17       	cp	r22, r19
    11cc:	c0 f4       	brcc	.+48     	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
      return;
    a = y;
    a += len;
    11ce:	24 0f       	add	r18, r20
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    11d0:	24 17       	cp	r18, r20
    11d2:	30 f4       	brcc	.+12     	; 0x11e0 <u8g2_draw_hv_line_4dir+0x9a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    11d4:	45 17       	cp	r20, r21
    11d6:	18 f4       	brcc	.+6      	; 0x11de <u8g2_draw_hv_line_4dir+0x98>
    {
      b = d;
      b--;
    11d8:	2f ef       	ldi	r18, 0xFF	; 255
    11da:	25 0f       	add	r18, r21
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <u8g2_draw_hv_line_4dir+0x9e>
      *bp = b;
    }
    else
    {
      a = 0;
    11de:	40 e0       	ldi	r20, 0x00	; 0
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    11e0:	45 17       	cp	r20, r21
    11e2:	68 f4       	brcc	.+26     	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
    return 0;
  if ( b <= 0 )		// was b <= c, could be replaced with b == 0
    11e4:	22 23       	and	r18, r18
    11e6:	59 f0       	breq	.+22     	; 0x11fe <u8g2_draw_hv_line_4dir+0xb8>
    11e8:	52 17       	cp	r21, r18
    11ea:	08 f4       	brcc	.+2      	; 0x11ee <u8g2_draw_hv_line_4dir+0xa8>
    11ec:	25 2f       	mov	r18, r21
    a = y;
    a += len;
    if ( u8g2_clip_intersection(&y, &a, h) == 0 )
      return;
    len = a;
    len -= y;
    11ee:	24 1b       	sub	r18, r20
  }
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    11f0:	dc 01       	movw	r26, r24
    11f2:	5b 96       	adiw	r26, 0x1b	; 27
    11f4:	ed 91       	ld	r30, X+
    11f6:	fc 91       	ld	r31, X
    11f8:	5c 97       	sbiw	r26, 0x1c	; 28
    11fa:	07 2f       	mov	r16, r23
    11fc:	09 95       	icall
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
#else
  u8g2->ll_hvline(u8g2, x, y, len, dir);
  //u8g2_draw_low_level_hv_line(u8g2, x, y, len, dir);
#endif
}
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <u8g2_DrawHVLine>:
/*
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1202:	0f 93       	push	r16
  
  
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  if ( len != 0 )
    1204:	22 23       	and	r18, r18
    1206:	49 f0       	breq	.+18     	; 0x121a <u8g2_DrawHVLine+0x18>
    u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    1208:	dc 01       	movw	r26, r24
    120a:	5d 96       	adiw	r26, 0x1d	; 29
    120c:	ed 91       	ld	r30, X+
    120e:	fc 91       	ld	r31, X
    1210:	5e 97       	sbiw	r26, 0x1e	; 30
    1212:	02 80       	ldd	r0, Z+2	; 0x02
    1214:	f3 81       	ldd	r31, Z+3	; 0x03
    1216:	e0 2d       	mov	r30, r0
    1218:	09 95       	icall
}
    121a:	0f 91       	pop	r16
    121c:	08 95       	ret

0000121e <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
    121e:	fc 01       	movw	r30, r24
    1220:	e5 5a       	subi	r30, 0xA5	; 165
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    1224:	63 30       	cpi	r22, 0x03	; 3
    1226:	10 f4       	brcc	.+4      	; 0x122c <u8g2_SetDrawColor+0xe>
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    1228:	60 83       	st	Z, r22
    122a:	08 95       	ret
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 83       	st	Z, r24
    1230:	08 95       	ret

00001232 <u8g2_is_intersection_decision_tree>:
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1232:	46 17       	cp	r20, r22
    1234:	30 f4       	brcc	.+12     	; 0x1242 <u8g2_is_intersection_decision_tree+0x10>
  {
    if ( v1 > a0 )	// v1 >= a0
    1236:	82 17       	cp	r24, r18
    1238:	40 f0       	brcs	.+16     	; 0x124a <u8g2_is_intersection_decision_tree+0x18>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	24 17       	cp	r18, r20
    123e:	30 f0       	brcs	.+12     	; 0x124c <u8g2_is_intersection_decision_tree+0x1a>
    1240:	02 c0       	rjmp	.+4      	; 0x1246 <u8g2_is_intersection_decision_tree+0x14>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1242:	82 17       	cp	r24, r18
    1244:	d0 f3       	brcs	.-12     	; 0x123a <u8g2_is_intersection_decision_tree+0x8>
	return 0;
      }
    }
    else
    {
      return 0;
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	08 95       	ret
{
  if ( v0 < a1 )		// v0 <= a1
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      return 1;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    else
    {
      return 0;
    }
  }
}
    124c:	08 95       	ret

0000124e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	ec 01       	movw	r28, r24
    125a:	16 2f       	mov	r17, r22
    125c:	f2 2e       	mov	r15, r18
    125e:	20 2f       	mov	r18, r16
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    1260:	6d a5       	ldd	r22, Y+45	; 0x2d
    1262:	8c a5       	ldd	r24, Y+44	; 0x2c
    1264:	e6 df       	rcall	.-52     	; 0x1232 <u8g2_is_intersection_decision_tree>
    1266:	88 23       	and	r24, r24
    1268:	29 f0       	breq	.+10     	; 0x1274 <u8g2_IsIntersection+0x26>
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    126a:	2f 2d       	mov	r18, r15
    126c:	41 2f       	mov	r20, r17
    126e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1270:	8a a5       	ldd	r24, Y+42	; 0x2a
    1272:	df df       	rcall	.-66     	; 0x1232 <u8g2_is_intersection_decision_tree>
}
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	e5 e0       	ldi	r30, 0x05	; 5
    127a:	51 c3       	rjmp	.+1698   	; 0x191e <__epilogue_restores__+0x1a>

0000127c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    127c:	ef 92       	push	r14
    127e:	ff 92       	push	r15
    1280:	0f 93       	push	r16
    1282:	1f 93       	push	r17
    1284:	cf 93       	push	r28
    1286:	df 93       	push	r29
    1288:	dc 01       	movw	r26, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    128a:	94 2f       	mov	r25, r20
    128c:	97 70       	andi	r25, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    128e:	e1 e0       	ldi	r30, 0x01	; 1
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	09 2e       	mov	r0, r25
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <u8g2_ll_hvline_vertical_top_lsb+0x1c>
    1296:	ee 0f       	add	r30, r30
    1298:	0a 94       	dec	r0
    129a:	ea f7       	brpl	.-6      	; 0x1296 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
    129c:	1e 2f       	mov	r17, r30

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    129e:	ed 01       	movw	r28, r26
    12a0:	c5 5a       	subi	r28, 0xA5	; 165
    12a2:	df 4f       	sbci	r29, 0xFF	; 255
    12a4:	88 81       	ld	r24, Y
    12a6:	82 30       	cpi	r24, 0x02	; 2
    12a8:	28 f4       	brcc	.+10     	; 0x12b4 <u8g2_ll_hvline_vertical_top_lsb+0x38>
    or_mask  = mask;
    12aa:	7e 2f       	mov	r23, r30
  if ( u8g2->draw_color != 1 )
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	19 f4       	brne	.+6      	; 0x12b6 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    12b0:	10 e0       	ldi	r17, 0x00	; 0
    12b2:	01 c0       	rjmp	.+2      	; 0x12b6 <u8g2_ll_hvline_vertical_top_lsb+0x3a>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    12b6:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    12b8:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    12ba:	5f 96       	adiw	r26, 0x1f	; 31
    12bc:	ed 90       	ld	r14, X+
    12be:	fc 90       	ld	r15, X
    12c0:	90 97       	sbiw	r26, 0x20	; 32
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    12c2:	ed 91       	ld	r30, X+
    12c4:	fc 91       	ld	r31, X
    12c6:	11 97       	sbiw	r26, 0x01	; 1
    12c8:	80 89       	ldd	r24, Z+16	; 0x10
    12ca:	84 9f       	mul	r24, r20
    12cc:	f0 01       	movw	r30, r0
    12ce:	85 9f       	mul	r24, r21
    12d0:	f0 0d       	add	r31, r0
    12d2:	11 24       	eor	r1, r1
    12d4:	e6 0f       	add	r30, r22
    12d6:	f1 1d       	adc	r31, r1
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    12d8:	ee 0d       	add	r30, r14
    12da:	ff 1d       	adc	r31, r15
  
  if ( dir == 0 )
    12dc:	01 11       	cpse	r16, r1
    12de:	0c c0       	rjmp	.+24     	; 0x12f8 <u8g2_ll_hvline_vertical_top_lsb+0x7c>
    12e0:	2e 0f       	add	r18, r30
  {
      do
      {
	*ptr |= or_mask;
    12e2:	80 81       	ld	r24, Z
    12e4:	87 2b       	or	r24, r23
	*ptr ^= xor_mask;
    12e6:	81 27       	eor	r24, r17
    12e8:	81 93       	st	Z+, r24
	ptr++;
	len--;
      } while( len != 0 );
    12ea:	2e 13       	cpse	r18, r30
    12ec:	fa cf       	rjmp	.-12     	; 0x12e2 <u8g2_ll_hvline_vertical_top_lsb+0x66>
    12ee:	1d c0       	rjmp	.+58     	; 0x132a <u8g2_ll_hvline_vertical_top_lsb+0xae>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    12f0:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    12f2:	11 0f       	add	r17, r17
      }
    } while( len != 0 );
    12f4:	22 23       	and	r18, r18
    12f6:	c9 f0       	breq	.+50     	; 0x132a <u8g2_ll_hvline_vertical_top_lsb+0xae>
  }
  else
  {    
    do
    {
      *ptr |= or_mask;
    12f8:	30 81       	ld	r19, Z
    12fa:	37 2b       	or	r19, r23
      *ptr ^= xor_mask;
    12fc:	31 27       	eor	r19, r17
    12fe:	30 83       	st	Z, r19
      
      bit_pos++;
    1300:	9f 5f       	subi	r25, 0xFF	; 255
      bit_pos &= 7;
    1302:	97 70       	andi	r25, 0x07	; 7

      len--;
    1304:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    1306:	91 11       	cpse	r25, r1
    1308:	f3 cf       	rjmp	.-26     	; 0x12f0 <u8g2_ll_hvline_vertical_top_lsb+0x74>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    130a:	93 96       	adiw	r26, 0x23	; 35
    130c:	8c 91       	ld	r24, X
    130e:	93 97       	sbiw	r26, 0x23	; 35
    1310:	e8 0f       	add	r30, r24
    1312:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    1314:	88 81       	ld	r24, Y
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	20 f4       	brcc	.+8      	; 0x1322 <u8g2_ll_hvline_vertical_top_lsb+0xa6>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	21 f0       	breq	.+8      	; 0x1326 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
	  xor_mask = 1;
    131e:	11 e0       	ldi	r17, 0x01	; 1
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <u8g2_ll_hvline_vertical_top_lsb+0xaa>
    1322:	11 e0       	ldi	r17, 0x01	; 1
    1324:	e7 cf       	rjmp	.-50     	; 0x12f4 <u8g2_ll_hvline_vertical_top_lsb+0x78>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    1326:	71 e0       	ldi	r23, 0x01	; 1
    1328:	e5 cf       	rjmp	.-54     	; 0x12f4 <u8g2_ll_hvline_vertical_top_lsb+0x78>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	e6 e0       	ldi	r30, 0x06	; 6
    1330:	f5 c2       	rjmp	.+1514   	; 0x191c <__epilogue_restores__+0x18>

00001332 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
    1332:	fc 01       	movw	r30, r24
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
    1334:	91 a1       	ldd	r25, Z+33	; 0x21
  t *= 8;
    1336:	89 2f       	mov	r24, r25
    1338:	88 0f       	add	r24, r24
    133a:	88 0f       	add	r24, r24
    133c:	88 0f       	add	r24, r24
  u8g2->pixel_buf_height = t;
    133e:	84 a3       	std	Z+36, r24	; 0x24
  
  t = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1340:	a0 81       	ld	r26, Z
    1342:	b1 81       	ldd	r27, Z+1	; 0x01
    1344:	50 96       	adiw	r26, 0x10	; 16
    1346:	8c 91       	ld	r24, X
    1348:	50 97       	sbiw	r26, 0x10	; 16
    134a:	80 32       	cpi	r24, 0x20	; 32
    134c:	08 f0       	brcs	.+2      	; 0x1350 <u8g2_update_dimension_common+0x1e>
    134e:	8f e1       	ldi	r24, 0x1F	; 31
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
    1350:	88 0f       	add	r24, r24
    1352:	88 0f       	add	r24, r24
    1354:	88 0f       	add	r24, r24
  u8g2->pixel_buf_width = t;
    1356:	83 a3       	std	Z+35, r24	; 0x23
  
  t = u8g2->tile_curr_row;
    1358:	22 a1       	ldd	r18, Z+34	; 0x22
  t *= 8;
    135a:	82 2f       	mov	r24, r18
    135c:	88 0f       	add	r24, r24
    135e:	88 0f       	add	r24, r24
    1360:	88 0f       	add	r24, r24
  u8g2->pixel_curr_row = t;
    1362:	85 a3       	std	Z+37, r24	; 0x25
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > u8g2_GetU8x8(u8g2)->display_info->tile_height )
    1364:	51 96       	adiw	r26, 0x11	; 17
    1366:	3c 91       	ld	r19, X
    1368:	51 97       	sbiw	r26, 0x11	; 17
    136a:	42 2f       	mov	r20, r18
    136c:	50 e0       	ldi	r21, 0x00	; 0
    136e:	49 0f       	add	r20, r25
    1370:	51 1d       	adc	r21, r1
    1372:	63 2f       	mov	r22, r19
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	64 17       	cp	r22, r20
    1378:	75 07       	cpc	r23, r21
    137a:	14 f4       	brge	.+4      	; 0x1380 <u8g2_update_dimension_common+0x4e>
    t = u8g2_GetU8x8(u8g2)->display_info->tile_height - u8g2->tile_curr_row;
    137c:	93 2f       	mov	r25, r19
    137e:	92 1b       	sub	r25, r18
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
    1380:	86 a3       	std	Z+38, r24	; 0x26
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    1382:	28 e0       	ldi	r18, 0x08	; 8
    1384:	92 9f       	mul	r25, r18
    1386:	80 0d       	add	r24, r0
    1388:	11 24       	eor	r1, r1
    138a:	87 a3       	std	Z+39, r24	; 0x27
  
#ifdef U8G2_16BIT
  u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
#else
  u8g2->width = 240;
    138c:	80 ef       	ldi	r24, 0xF0	; 240
    138e:	80 a7       	std	Z+40, r24	; 0x28
  if ( u8g2_GetU8x8(u8g2)->display_info->pixel_width <= 240 )
    1390:	54 96       	adiw	r26, 0x14	; 20
    1392:	8d 91       	ld	r24, X+
    1394:	9c 91       	ld	r25, X
    1396:	55 97       	sbiw	r26, 0x15	; 21
    1398:	81 3f       	cpi	r24, 0xF1	; 241
    139a:	91 05       	cpc	r25, r1
    139c:	08 f4       	brcc	.+2      	; 0x13a0 <u8g2_update_dimension_common+0x6e>
    u8g2->width = u8g2_GetU8x8(u8g2)->display_info->pixel_width;
    139e:	80 a7       	std	Z+40, r24	; 0x28
  u8g2->height = u8g2_GetU8x8(u8g2)->display_info->pixel_height;
    13a0:	56 96       	adiw	r26, 0x16	; 22
    13a2:	8c 91       	ld	r24, X
    13a4:	81 a7       	std	Z+41, r24	; 0x29
    13a6:	08 95       	ret

000013a8 <u8g2_update_dimension_r0>:
#endif

}

void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	ec 01       	movw	r28, r24
  u8g2_update_dimension_common(u8g2);
    13ae:	c1 df       	rcall	.-126    	; 0x1332 <u8g2_update_dimension_common>

  u8g2->user_x0 = 0;
    13b0:	1a a6       	std	Y+42, r1	; 0x2a
  u8g2->user_x1 = u8g2->pixel_buf_width;	/* pixel_buf_width replaced with width */
    13b2:	8b a1       	ldd	r24, Y+35	; 0x23
    13b4:	8b a7       	std	Y+43, r24	; 0x2b
  
  u8g2->user_y0 = u8g2->buf_y0;
    13b6:	8e a1       	ldd	r24, Y+38	; 0x26
    13b8:	8c a7       	std	Y+44, r24	; 0x2c
  u8g2->user_y1 = u8g2->buf_y1;
    13ba:	8f a1       	ldd	r24, Y+39	; 0x27
    13bc:	8d a7       	std	Y+45, r24	; 0x2d
  
//  printf("x0=%d x1=%d y0=%d y1=%d\n", 
//      u8g2->user_x0, u8g2->user_x1, u8g2->user_y0, u8g2->user_y1);
}
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	08 95       	ret

000013c4 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_4dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    13c4:	0f 93       	push	r16
  u8g2_draw_hv_line_4dir(u8g2, x, y, len, dir);
    13c6:	bf de       	rcall	.-642    	; 0x1146 <u8g2_draw_hv_line_4dir>
}
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    13cc:	0f 93       	push	r16
    13ce:	1f 93       	push	r17
    13d0:	cf 93       	push	r28
    13d2:	df 93       	push	r29
    13d4:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    13d6:	1f a6       	std	Y+47, r1	; 0x2f
    13d8:	1e a6       	std	Y+46, r1	; 0x2e
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    13da:	3c 8f       	std	Y+28, r19	; 0x1c
    13dc:	2b 8f       	std	Y+27, r18	; 0x1b
  
  u8g2->tile_buf_ptr = buf;
    13de:	78 a3       	std	Y+32, r23	; 0x20
    13e0:	6f 8f       	std	Y+31, r22	; 0x1f
  u8g2->tile_buf_height = tile_buf_height;
    13e2:	49 a3       	std	Y+33, r20	; 0x21
  
  u8g2->tile_curr_row = 0;
    13e4:	1a a2       	std	Y+34, r1	; 0x22
  u8g2->draw_color = 1;
    13e6:	fc 01       	movw	r30, r24
    13e8:	e5 5a       	subi	r30, 0xA5	; 165
    13ea:	ff 4f       	sbci	r31, 0xFF	; 255
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    13f0:	31 96       	adiw	r30, 0x01	; 1
    13f2:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    13f4:	1e 8f       	std	Y+30, r17	; 0x1e
    13f6:	0d 8f       	std	Y+29, r16	; 0x1d
  u8g2->cb->update(u8g2);
    13f8:	d8 01       	movw	r26, r16
    13fa:	ed 91       	ld	r30, X+
    13fc:	fc 91       	ld	r31, X
    13fe:	ce 01       	movw	r24, r28
    1400:	09 95       	icall

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    1402:	ce 01       	movw	r24, r28
    1404:	88 de       	rcall	.-752    	; 0x1116 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    1406:	1e ae       	std	Y+62, r1	; 0x3e
#endif
}
    1408:	df 91       	pop	r29
    140a:	cf 91       	pop	r28
    140c:	1f 91       	pop	r17
    140e:	0f 91       	pop	r16
    1410:	08 95       	ret

00001412 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    1412:	66 23       	and	r22, r22
    1414:	29 f0       	breq	.+10     	; 0x1420 <u8x8_ascii_next+0xe>
    1416:	6a 30       	cpi	r22, 0x0A	; 10
    1418:	19 f0       	breq	.+6      	; 0x1420 <u8x8_ascii_next+0xe>
    return 0x0ffff;	/* end of string detected*/
  return b;
    141a:	86 2f       	mov	r24, r22
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	08 95       	ret
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
    1420:	8f ef       	ldi	r24, 0xFF	; 255
    1422:	9f ef       	ldi	r25, 0xFF	; 255
  return b;
}
    1424:	08 95       	ret

00001426 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    1426:	fc 01       	movw	r30, r24
    1428:	15 8a       	std	Z+21, r1	; 0x15
    142a:	08 95       	ret

0000142c <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
    142c:	ef 92       	push	r14
    142e:	ff 92       	push	r15
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
    1436:	ec 01       	movw	r28, r24
    1438:	16 2f       	mov	r17, r22
    143a:	7a 01       	movw	r14, r20
    u8x8_byte_StartTransfer(u8x8);    
    143c:	1d d2       	rcall	.+1082   	; 0x1878 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
    143e:	60 e4       	ldi	r22, 0x40	; 64
    1440:	ce 01       	movw	r24, r28
    1442:	0c d2       	rcall	.+1048   	; 0x185c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    1444:	e8 85       	ldd	r30, Y+8	; 0x08
    1446:	f9 85       	ldd	r31, Y+9	; 0x09
    1448:	97 01       	movw	r18, r14
    144a:	41 2f       	mov	r20, r17
    144c:	67 e1       	ldi	r22, 0x17	; 23
    144e:	ce 01       	movw	r24, r28
    1450:	09 95       	icall
    u8x8_byte_EndTransfer(u8x8);
    1452:	ce 01       	movw	r24, r28
    1454:	1c d2       	rcall	.+1080   	; 0x188e <u8x8_byte_EndTransfer>
}
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	08 95       	ret

00001462 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
    1462:	46 2f       	mov	r20, r22
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
    1464:	dc 01       	movw	r26, r24
    1466:	16 96       	adiw	r26, 0x06	; 6
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	17 97       	sbiw	r26, 0x07	; 7
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	65 e1       	ldi	r22, 0x15	; 21
    1474:	09 95       	icall
}
    1476:	08 95       	ret

00001478 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
    1478:	46 2f       	mov	r20, r22
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    147a:	dc 01       	movw	r26, r24
    147c:	16 96       	adiw	r26, 0x06	; 6
    147e:	ed 91       	ld	r30, X+
    1480:	fc 91       	ld	r31, X
    1482:	17 97       	sbiw	r26, 0x07	; 7
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	66 e1       	ldi	r22, 0x16	; 22
    148a:	09 95       	icall
}
    148c:	08 95       	ret

0000148e <u8x8_cad_SendData>:

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    148e:	9a 01       	movw	r18, r20
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
    1490:	dc 01       	movw	r26, r24
    1492:	16 96       	adiw	r26, 0x06	; 6
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	17 97       	sbiw	r26, 0x07	; 7
    149a:	46 2f       	mov	r20, r22
    149c:	67 e1       	ldi	r22, 0x17	; 23
    149e:	09 95       	icall
}
    14a0:	08 95       	ret

000014a2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
    14a2:	dc 01       	movw	r26, r24
    14a4:	16 96       	adiw	r26, 0x06	; 6
    14a6:	ed 91       	ld	r30, X+
    14a8:	fc 91       	ld	r31, X
    14aa:	17 97       	sbiw	r26, 0x07	; 7
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	68 e1       	ldi	r22, 0x18	; 24
    14b4:	09 95       	icall
}
    14b6:	08 95       	ret

000014b8 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    14b8:	dc 01       	movw	r26, r24
    14ba:	16 96       	adiw	r26, 0x06	; 6
    14bc:	ed 91       	ld	r30, X+
    14be:	fc 91       	ld	r31, X
    14c0:	17 97       	sbiw	r26, 0x07	; 7
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	69 e1       	ldi	r22, 0x19	; 25
    14ca:	09 95       	icall
}
    14cc:	08 95       	ret

000014ce <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
    14ce:	a1 e0       	ldi	r26, 0x01	; 1
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	ec e6       	ldi	r30, 0x6C	; 108
    14d4:	fa e0       	ldi	r31, 0x0A	; 10
    14d6:	06 c2       	rjmp	.+1036   	; 0x18e4 <__prologue_saves__+0x18>
    14d8:	7c 01       	movw	r14, r24
    14da:	8b 01       	movw	r16, r22
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    14dc:	d8 01       	movw	r26, r16
    14de:	6c 91       	ld	r22, X
    data++;
    switch( cmd )
    14e0:	67 31       	cpi	r22, 0x17	; 23
    14e2:	d9 f0       	breq	.+54     	; 0x151a <u8x8_cad_SendSequence+0x4c>
    14e4:	78 f4       	brcc	.+30     	; 0x1504 <u8x8_cad_SendSequence+0x36>
    14e6:	65 31       	cpi	r22, 0x15	; 21
    14e8:	90 f1       	brcs	.+100    	; 0x154e <u8x8_cad_SendSequence+0x80>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
    14ea:	f8 01       	movw	r30, r16
    14ec:	41 81       	ldd	r20, Z+1	; 0x01
    14ee:	49 83       	std	Y+1, r20	; 0x01
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    14f0:	d7 01       	movw	r26, r14
    14f2:	16 96       	adiw	r26, 0x06	; 6
    14f4:	ed 91       	ld	r30, X+
    14f6:	fc 91       	ld	r31, X
    14f8:	17 97       	sbiw	r26, 0x07	; 7
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	c7 01       	movw	r24, r14
    1500:	09 95       	icall
    1502:	22 c0       	rjmp	.+68     	; 0x1548 <u8x8_cad_SendSequence+0x7a>

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    1504:	6a 31       	cpi	r22, 0x1A	; 26
    1506:	98 f0       	brcs	.+38     	; 0x152e <u8x8_cad_SendSequence+0x60>
    1508:	6e 3f       	cpi	r22, 0xFE	; 254
    150a:	09 f5       	brne	.+66     	; 0x154e <u8x8_cad_SendSequence+0x80>
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
    150c:	f8 01       	movw	r30, r16
    150e:	41 81       	ldd	r20, Z+1	; 0x01
    1510:	49 83       	std	Y+1, r20	; 0x01
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    1512:	69 e2       	ldi	r22, 0x29	; 41
    1514:	c7 01       	movw	r24, r14
    1516:	5b d1       	rcall	.+694    	; 0x17ce <u8x8_gpio_call>
    1518:	17 c0       	rjmp	.+46     	; 0x1548 <u8x8_cad_SendSequence+0x7a>
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
    151a:	f8 01       	movw	r30, r16
    151c:	81 81       	ldd	r24, Z+1	; 0x01
    151e:	89 83       	std	Y+1, r24	; 0x01
	  u8x8_cad_SendData(u8x8, 1, &v);
    1520:	ae 01       	movw	r20, r28
    1522:	4f 5f       	subi	r20, 0xFF	; 255
    1524:	5f 4f       	sbci	r21, 0xFF	; 255
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	c7 01       	movw	r24, r14
    152a:	b1 df       	rcall	.-158    	; 0x148e <u8x8_cad_SendData>
    152c:	0d c0       	rjmp	.+26     	; 0x1548 <u8x8_cad_SendSequence+0x7a>
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    data++;
    152e:	0f 5f       	subi	r16, 0xFF	; 255
    1530:	1f 4f       	sbci	r17, 0xFF	; 255
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    1532:	d7 01       	movw	r26, r14
    1534:	16 96       	adiw	r26, 0x06	; 6
    1536:	ed 91       	ld	r30, X+
    1538:	fc 91       	ld	r31, X
    153a:	17 97       	sbiw	r26, 0x07	; 7
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	c7 01       	movw	r24, r14
    1544:	09 95       	icall
	  break;
    1546:	ca cf       	rjmp	.-108    	; 0x14dc <u8x8_cad_SendSequence+0xe>
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
    1548:	0e 5f       	subi	r16, 0xFE	; 254
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
	  break;
    154c:	c7 cf       	rjmp	.-114    	; 0x14dc <u8x8_cad_SendSequence+0xe>
      default:
	return;
    }
  }
}
    154e:	21 96       	adiw	r28, 0x01	; 1
    1550:	e6 e0       	ldi	r30, 0x06	; 6
    1552:	e4 c1       	rjmp	.+968    	; 0x191c <__epilogue_restores__+0x18>

00001554 <u8x8_cad_ssd13xx_i2c>:
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
}

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    1554:	ef 92       	push	r14
    1556:	ff 92       	push	r15
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	00 d0       	rcall	.+0      	; 0x1560 <u8x8_cad_ssd13xx_i2c+0xc>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	7c 01       	movw	r14, r24
    1566:	14 2f       	mov	r17, r20
  uint8_t *p;
  switch(msg)
    1568:	67 31       	cpi	r22, 0x17	; 23
    156a:	28 f4       	brcc	.+10     	; 0x1576 <u8x8_cad_ssd13xx_i2c+0x22>
    156c:	65 31       	cpi	r22, 0x15	; 21
    156e:	40 f4       	brcc	.+16     	; 0x1580 <u8x8_cad_ssd13xx_i2c+0x2c>
    1570:	64 31       	cpi	r22, 0x14	; 20
    1572:	19 f1       	breq	.+70     	; 0x15ba <u8x8_cad_ssd13xx_i2c+0x66>
    1574:	35 c0       	rjmp	.+106    	; 0x15e0 <u8x8_cad_ssd13xx_i2c+0x8c>
    1576:	67 31       	cpi	r22, 0x17	; 23
    1578:	69 f0       	breq	.+26     	; 0x1594 <u8x8_cad_ssd13xx_i2c+0x40>
    157a:	6a 31       	cpi	r22, 0x1A	; 26
    157c:	e0 f0       	brcs	.+56     	; 0x15b6 <u8x8_cad_ssd13xx_i2c+0x62>
    157e:	30 c0       	rjmp	.+96     	; 0x15e0 <u8x8_cad_ssd13xx_i2c+0x8c>
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
    1580:	7b d1       	rcall	.+758    	; 0x1878 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
    1582:	60 e0       	ldi	r22, 0x00	; 0
    1584:	c7 01       	movw	r24, r14
    1586:	6a d1       	rcall	.+724    	; 0x185c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    1588:	61 2f       	mov	r22, r17
    158a:	c7 01       	movw	r24, r14
    158c:	67 d1       	rcall	.+718    	; 0x185c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
    158e:	c7 01       	movw	r24, r14
    1590:	7e d1       	rcall	.+764    	; 0x188e <u8x8_byte_EndTransfer>
    1592:	11 c0       	rjmp	.+34     	; 0x15b6 <u8x8_cad_ssd13xx_i2c+0x62>
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    1594:	a9 01       	movw	r20, r18
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    1596:	19 31       	cpi	r17, 0x19	; 25
    1598:	58 f0       	brcs	.+22     	; 0x15b0 <u8x8_cad_ssd13xx_i2c+0x5c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    159a:	68 e1       	ldi	r22, 0x18	; 24
    159c:	c7 01       	movw	r24, r14
    159e:	29 83       	std	Y+1, r18	; 0x01
    15a0:	3a 83       	std	Y+2, r19	; 0x02
    15a2:	44 df       	rcall	.-376    	; 0x142c <u8x8_i2c_data_transfer>
	arg_int-=24;
    15a4:	18 51       	subi	r17, 0x18	; 24
	p+=24;
    15a6:	29 81       	ldd	r18, Y+1	; 0x01
    15a8:	3a 81       	ldd	r19, Y+2	; 0x02
    15aa:	28 5e       	subi	r18, 0xE8	; 232
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	f2 cf       	rjmp	.-28     	; 0x1594 <u8x8_cad_ssd13xx_i2c+0x40>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    15b0:	61 2f       	mov	r22, r17
    15b2:	c7 01       	movw	r24, r14
    15b4:	3b df       	rcall	.-394    	; 0x142c <u8x8_i2c_data_transfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <u8x8_cad_ssd13xx_i2c+0x8e>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    15ba:	dc 01       	movw	r26, r24
    15bc:	52 96       	adiw	r26, 0x12	; 18
    15be:	8c 91       	ld	r24, X
    15c0:	52 97       	sbiw	r26, 0x12	; 18
    15c2:	8f 3f       	cpi	r24, 0xFF	; 255
    15c4:	19 f4       	brne	.+6      	; 0x15cc <u8x8_cad_ssd13xx_i2c+0x78>
	u8x8->i2c_address = 0x078;
    15c6:	88 e7       	ldi	r24, 0x78	; 120
    15c8:	52 96       	adiw	r26, 0x12	; 18
    15ca:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    15cc:	d7 01       	movw	r26, r14
    15ce:	18 96       	adiw	r26, 0x08	; 8
    15d0:	ed 91       	ld	r30, X+
    15d2:	fc 91       	ld	r31, X
    15d4:	19 97       	sbiw	r26, 0x09	; 9
    15d6:	41 2f       	mov	r20, r17
    15d8:	64 e1       	ldi	r22, 0x14	; 20
    15da:	c7 01       	movw	r24, r14
    15dc:	09 95       	icall
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <u8x8_cad_ssd13xx_i2c+0x8e>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
    15e0:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	08 95       	ret

000015f2 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
    15f2:	fc 01       	movw	r30, r24
    15f4:	71 83       	std	Z+1, r23	; 0x01
    15f6:	60 83       	st	Z, r22
      u8x8->x_offset = u8x8->display_info->default_x_offset;
    15f8:	fb 01       	movw	r30, r22
    15fa:	22 89       	ldd	r18, Z+18	; 0x12
    15fc:	fc 01       	movw	r30, r24
    15fe:	20 8b       	std	Z+16, r18	; 0x10
    1600:	08 95       	ret

00001602 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	ec 01       	movw	r28, r24
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    1608:	ea 85       	ldd	r30, Y+10	; 0x0a
    160a:	fb 85       	ldd	r31, Y+11	; 0x0b
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	68 e2       	ldi	r22, 0x28	; 40
    1614:	09 95       	icall
      u8x8_cad_Init(u8x8);
    1616:	ee 81       	ldd	r30, Y+6	; 0x06
    1618:	ff 81       	ldd	r31, Y+7	; 0x07
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	64 e1       	ldi	r22, 0x14	; 20
    1622:	ce 01       	movw	r24, r28
    1624:	09 95       	icall

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	6b e4       	ldi	r22, 0x4B	; 75
    162a:	ce 01       	movw	r24, r28
    162c:	d0 d0       	rcall	.+416    	; 0x17ce <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    162e:	e8 81       	ld	r30, Y
    1630:	f9 81       	ldd	r31, Y+1	; 0x01
    1632:	44 81       	ldd	r20, Z+4	; 0x04
    1634:	69 e2       	ldi	r22, 0x29	; 41
    1636:	ce 01       	movw	r24, r28
    1638:	ca d0       	rcall	.+404    	; 0x17ce <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
    163a:	40 e0       	ldi	r20, 0x00	; 0
    163c:	6b e4       	ldi	r22, 0x4B	; 75
    163e:	ce 01       	movw	r24, r28
    1640:	c6 d0       	rcall	.+396    	; 0x17ce <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    1642:	e8 81       	ld	r30, Y
    1644:	f9 81       	ldd	r31, Y+1	; 0x01
    1646:	44 81       	ldd	r20, Z+4	; 0x04
    1648:	69 e2       	ldi	r22, 0x29	; 41
    164a:	ce 01       	movw	r24, r28
    164c:	c0 d0       	rcall	.+384    	; 0x17ce <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
    164e:	41 e0       	ldi	r20, 0x01	; 1
    1650:	6b e4       	ldi	r22, 0x4B	; 75
    1652:	ce 01       	movw	r24, r28
    1654:	bc d0       	rcall	.+376    	; 0x17ce <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    1656:	e8 81       	ld	r30, Y
    1658:	f9 81       	ldd	r31, Y+1	; 0x01
    165a:	45 81       	ldd	r20, Z+5	; 0x05
    165c:	69 e2       	ldi	r22, 0x29	; 41
    165e:	ce 01       	movw	r24, r28
    1660:	b6 d0       	rcall	.+364    	; 0x17ce <u8x8_gpio_call>
}    
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
    1668:	a5 e0       	ldi	r26, 0x05	; 5
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e9 e3       	ldi	r30, 0x39	; 57
    166e:	fb e0       	ldi	r31, 0x0B	; 11
    1670:	3b c1       	rjmp	.+630    	; 0x18e8 <__prologue_saves__+0x1c>
  u8x8_tile_t tile;
  tile.x_pos = x;
    1672:	6c 83       	std	Y+4, r22	; 0x04
  tile.y_pos = y;
    1674:	4d 83       	std	Y+5, r20	; 0x05
  tile.cnt = cnt;
    1676:	2b 83       	std	Y+3, r18	; 0x03
  tile.tile_ptr = tile_ptr;
    1678:	1a 83       	std	Y+2, r17	; 0x02
    167a:	09 83       	std	Y+1, r16	; 0x01
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    167c:	dc 01       	movw	r26, r24
    167e:	14 96       	adiw	r26, 0x04	; 4
    1680:	ed 91       	ld	r30, X+
    1682:	fc 91       	ld	r31, X
    1684:	15 97       	sbiw	r26, 0x05	; 5
    1686:	9e 01       	movw	r18, r28
    1688:	2f 5f       	subi	r18, 0xFF	; 255
    168a:	3f 4f       	sbci	r19, 0xFF	; 255
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	6f e0       	ldi	r22, 0x0F	; 15
    1690:	09 95       	icall
}
    1692:	25 96       	adiw	r28, 0x05	; 5
    1694:	e4 e0       	ldi	r30, 0x04	; 4
    1696:	44 c1       	rjmp	.+648    	; 0x1920 <__epilogue_restores__+0x1c>

00001698 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    1698:	dc 01       	movw	r26, r24
    169a:	14 96       	adiw	r26, 0x04	; 4
    169c:	ed 91       	ld	r30, X+
    169e:	fc 91       	ld	r31, X
    16a0:	15 97       	sbiw	r26, 0x05	; 5
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	40 e0       	ldi	r20, 0x00	; 0
    16a8:	69 e0       	ldi	r22, 0x09	; 9
    16aa:	09 95       	icall
    16ac:	08 95       	ret

000016ae <u8x8_InitDisplay>:
}

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
    16ae:	dc 01       	movw	r26, r24
    16b0:	14 96       	adiw	r26, 0x04	; 4
    16b2:	ed 91       	ld	r30, X+
    16b4:	fc 91       	ld	r31, X
    16b6:	15 97       	sbiw	r26, 0x05	; 5
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	6a e0       	ldi	r22, 0x0A	; 10
    16c0:	09 95       	icall
    16c2:	08 95       	ret

000016c4 <u8x8_SetPowerSave>:
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    16c4:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    16c6:	dc 01       	movw	r26, r24
    16c8:	14 96       	adiw	r26, 0x04	; 4
    16ca:	ed 91       	ld	r30, X+
    16cc:	fc 91       	ld	r31, X
    16ce:	15 97       	sbiw	r26, 0x05	; 5
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	6b e0       	ldi	r22, 0x0B	; 11
    16d6:	09 95       	icall
    16d8:	08 95       	ret

000016da <u8x8_RefreshDisplay>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    16da:	dc 01       	movw	r26, r24
    16dc:	14 96       	adiw	r26, 0x04	; 4
    16de:	ed 91       	ld	r30, X+
    16e0:	fc 91       	ld	r31, X
    16e2:	15 97       	sbiw	r26, 0x05	; 5
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	60 e1       	ldi	r22, 0x10	; 16
    16ec:	09 95       	icall
    16ee:	08 95       	ret

000016f0 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	ec 01       	movw	r28, r24
    16fe:	14 2f       	mov	r17, r20
    1700:	79 01       	movw	r14, r18
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
    1702:	69 30       	cpi	r22, 0x09	; 9
    1704:	21 f4       	brne	.+8      	; 0x170e <u8x8_d_ssd1306_128x32_univision+0x1e>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
    1706:	64 e2       	ldi	r22, 0x24	; 36
    1708:	71 e0       	ldi	r23, 0x01	; 1
    170a:	73 df       	rcall	.-282    	; 0x15f2 <u8x8_d_helper_display_setup_memory>
    170c:	59 c0       	rjmp	.+178    	; 0x17c0 <u8x8_d_ssd1306_128x32_univision+0xd0>

static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    170e:	6d 30       	cpi	r22, 0x0D	; 13
    1710:	89 f1       	breq	.+98     	; 0x1774 <u8x8_d_ssd1306_128x32_univision+0x84>
    1712:	28 f4       	brcc	.+10     	; 0x171e <u8x8_d_ssd1306_128x32_univision+0x2e>
    1714:	6a 30       	cpi	r22, 0x0A	; 10
    1716:	01 f1       	breq	.+64     	; 0x1758 <u8x8_d_ssd1306_128x32_univision+0x68>
    1718:	6b 30       	cpi	r22, 0x0B	; 11
    171a:	11 f1       	breq	.+68     	; 0x1760 <u8x8_d_ssd1306_128x32_univision+0x70>
    171c:	53 c0       	rjmp	.+166    	; 0x17c4 <u8x8_d_ssd1306_128x32_univision+0xd4>
    171e:	6e 30       	cpi	r22, 0x0E	; 14
    1720:	d1 f1       	breq	.+116    	; 0x1796 <u8x8_d_ssd1306_128x32_univision+0xa6>
    1722:	6f 30       	cpi	r22, 0x0F	; 15
    1724:	09 f0       	breq	.+2      	; 0x1728 <u8x8_d_ssd1306_128x32_univision+0x38>
    1726:	4e c0       	rjmp	.+156    	; 0x17c4 <u8x8_d_ssd1306_128x32_univision+0xd4>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1728:	bc de       	rcall	.-648    	; 0x14a2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    172a:	f7 01       	movw	r30, r14
    172c:	83 81       	ldd	r24, Z+3	; 0x03
      x *= 8;
      x += u8x8->x_offset;
    172e:	08 89       	ldd	r16, Y+16	; 0x10
    1730:	f8 e0       	ldi	r31, 0x08	; 8
    1732:	8f 9f       	mul	r24, r31
    1734:	00 0d       	add	r16, r0
    1736:	11 24       	eor	r1, r1
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1738:	60 2f       	mov	r22, r16
    173a:	62 95       	swap	r22
    173c:	6f 70       	andi	r22, 0x0F	; 15
    173e:	60 61       	ori	r22, 0x10	; 16
    1740:	ce 01       	movw	r24, r28
    1742:	8f de       	rcall	.-738    	; 0x1462 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    1744:	60 2f       	mov	r22, r16
    1746:	6f 70       	andi	r22, 0x0F	; 15
    1748:	ce 01       	movw	r24, r28
    174a:	8b de       	rcall	.-746    	; 0x1462 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    174c:	f7 01       	movw	r30, r14
    174e:	64 81       	ldd	r22, Z+4	; 0x04
    1750:	60 6b       	ori	r22, 0xB0	; 176
    1752:	ce 01       	movw	r24, r28
    1754:	86 de       	rcall	.-756    	; 0x1462 <u8x8_cad_SendCmd>
    1756:	27 c0       	rjmp	.+78     	; 0x17a6 <u8x8_d_ssd1306_128x32_univision+0xb6>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    1758:	54 df       	rcall	.-344    	; 0x1602 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
    175a:	64 e5       	ldi	r22, 0x54	; 84
    175c:	71 e0       	ldi	r23, 0x01	; 1
    175e:	07 c0       	rjmp	.+14     	; 0x176e <u8x8_d_ssd1306_128x32_univision+0x7e>
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    1760:	41 11       	cpse	r20, r1
    1762:	03 c0       	rjmp	.+6      	; 0x176a <u8x8_d_ssd1306_128x32_univision+0x7a>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
    1764:	6f e4       	ldi	r22, 0x4F	; 79
    1766:	71 e0       	ldi	r23, 0x01	; 1
    1768:	02 c0       	rjmp	.+4      	; 0x176e <u8x8_d_ssd1306_128x32_univision+0x7e>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
    176a:	6a e4       	ldi	r22, 0x4A	; 74
    176c:	71 e0       	ldi	r23, 0x01	; 1
    176e:	ce 01       	movw	r24, r28
    1770:	ae de       	rcall	.-676    	; 0x14ce <u8x8_cad_SendSequence>
    1772:	26 c0       	rjmp	.+76     	; 0x17c0 <u8x8_d_ssd1306_128x32_univision+0xd0>
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1774:	41 11       	cpse	r20, r1
    1776:	07 c0       	rjmp	.+14     	; 0x1786 <u8x8_d_ssd1306_128x32_univision+0x96>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
    1778:	63 e4       	ldi	r22, 0x43	; 67
    177a:	71 e0       	ldi	r23, 0x01	; 1
    177c:	a8 de       	rcall	.-688    	; 0x14ce <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    177e:	e8 81       	ld	r30, Y
    1780:	f9 81       	ldd	r31, Y+1	; 0x01
    1782:	82 89       	ldd	r24, Z+18	; 0x12
    1784:	06 c0       	rjmp	.+12     	; 0x1792 <u8x8_d_ssd1306_128x32_univision+0xa2>
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
    1786:	6c e3       	ldi	r22, 0x3C	; 60
    1788:	71 e0       	ldi	r23, 0x01	; 1
    178a:	a1 de       	rcall	.-702    	; 0x14ce <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    178c:	e8 81       	ld	r30, Y
    178e:	f9 81       	ldd	r31, Y+1	; 0x01
    1790:	83 89       	ldd	r24, Z+19	; 0x13
    1792:	88 8b       	std	Y+16, r24	; 0x10
    1794:	15 c0       	rjmp	.+42     	; 0x17c0 <u8x8_d_ssd1306_128x32_univision+0xd0>
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1796:	85 de       	rcall	.-758    	; 0x14a2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1798:	61 e8       	ldi	r22, 0x81	; 129
    179a:	ce 01       	movw	r24, r28
    179c:	62 de       	rcall	.-828    	; 0x1462 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    179e:	61 2f       	mov	r22, r17
    17a0:	ce 01       	movw	r24, r28
    17a2:	6a de       	rcall	.-812    	; 0x1478 <u8x8_cad_SendArg>
    17a4:	0b c0       	rjmp	.+22     	; 0x17bc <u8x8_d_ssd1306_128x32_univision+0xcc>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    17a6:	f7 01       	movw	r30, r14
    17a8:	40 81       	ld	r20, Z
    17aa:	51 81       	ldd	r21, Z+1	; 0x01
    17ac:	62 81       	ldd	r22, Z+2	; 0x02
    17ae:	66 0f       	add	r22, r22
    17b0:	66 0f       	add	r22, r22
    17b2:	66 0f       	add	r22, r22
    17b4:	ce 01       	movw	r24, r28
    17b6:	6b de       	rcall	.-810    	; 0x148e <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    17b8:	11 50       	subi	r17, 0x01	; 1
      } while( arg_int > 0 );
    17ba:	a9 f7       	brne	.-22     	; 0x17a6 <u8x8_d_ssd1306_128x32_univision+0xb6>
      
      u8x8_cad_EndTransfer(u8x8);
    17bc:	ce 01       	movw	r24, r28
    17be:	7c de       	rcall	.-776    	; 0x14b8 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <u8x8_d_ssd1306_128x32_univision+0xd6>
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      return 1;
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
}
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	e6 e0       	ldi	r30, 0x06	; 6
    17cc:	a7 c0       	rjmp	.+334    	; 0x191c <__epilogue_restores__+0x18>

000017ce <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    17ce:	dc 01       	movw	r26, r24
    17d0:	1a 96       	adiw	r26, 0x0a	; 10
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	1b 97       	sbiw	r26, 0x0b	; 11
    17d8:	20 e0       	ldi	r18, 0x00	; 0
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	09 95       	icall
    17de:	08 95       	ret

000017e0 <u8x8_dummy_cb>:

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 95       	ret

000017e4 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    17e4:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    17e6:	11 82       	std	Z+1, r1	; 0x01
    17e8:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    17ea:	80 ef       	ldi	r24, 0xF0	; 240
    17ec:	9b e0       	ldi	r25, 0x0B	; 11
    17ee:	95 83       	std	Z+5, r25	; 0x05
    17f0:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    17f2:	97 83       	std	Z+7, r25	; 0x07
    17f4:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    17f6:	91 87       	std	Z+9, r25	; 0x09
    17f8:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    17fa:	93 87       	std	Z+11, r25	; 0x0b
    17fc:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    17fe:	11 8a       	std	Z+17, r1	; 0x11
    u8x8->device_address = 0;
    1800:	14 8a       	std	Z+20, r1	; 0x14
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    1802:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->i2c_address = 255;
    1804:	8f ef       	ldi	r24, 0xFF	; 255
    1806:	82 8b       	std	Z+18, r24	; 0x12
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1808:	87 8b       	std	Z+23, r24	; 0x17
    180a:	08 95       	ret

0000180c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    180c:	a0 e0       	ldi	r26, 0x00	; 0
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	eb e0       	ldi	r30, 0x0B	; 11
    1812:	fc e0       	ldi	r31, 0x0C	; 12
    1814:	63 c0       	rjmp	.+198    	; 0x18dc <__prologue_saves__+0x10>
    1816:	ec 01       	movw	r28, r24
    1818:	5b 01       	movw	r10, r22
    181a:	6a 01       	movw	r12, r20
    181c:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    181e:	e2 df       	rcall	.-60     	; 0x17e4 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    1820:	bd 82       	std	Y+5, r11	; 0x05
    1822:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1824:	df 82       	std	Y+7, r13	; 0x07
    1826:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1828:	f9 86       	std	Y+9, r15	; 0x09
    182a:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    182c:	1b 87       	std	Y+11, r17	; 0x0b
    182e:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    1830:	ce 01       	movw	r24, r28
    1832:	32 df       	rcall	.-412    	; 0x1698 <u8x8_SetupMemory>
}
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	ea e0       	ldi	r30, 0x0A	; 10
    183a:	6c c0       	rjmp	.+216    	; 0x1914 <__epilogue_restores__+0x10>

0000183c <u8g2_m_ssd1306_16_2>:
  return buf;
}
uint8_t *u8g2_m_ssd1306_16_2(uint8_t *page_cnt)
{
  static uint8_t buf[256];
  *page_cnt = 2;
    183c:	22 e0       	ldi	r18, 0x02	; 2
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
  return buf;
}
    1842:	81 e0       	ldi	r24, 0x01	; 1
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	08 95       	ret

00001848 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    1848:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    184a:	dc 01       	movw	r26, r24
    184c:	18 96       	adiw	r26, 0x08	; 8
    184e:	ed 91       	ld	r30, X+
    1850:	fc 91       	ld	r31, X
    1852:	19 97       	sbiw	r26, 0x09	; 9
    1854:	46 2f       	mov	r20, r22
    1856:	67 e1       	ldi	r22, 0x17	; 23
    1858:	09 95       	icall
}
    185a:	08 95       	ret

0000185c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    185c:	a1 e0       	ldi	r26, 0x01	; 1
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e3 e3       	ldi	r30, 0x33	; 51
    1862:	fc e0       	ldi	r31, 0x0C	; 12
    1864:	43 c0       	rjmp	.+134    	; 0x18ec <__prologue_saves__+0x20>
    1866:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    1868:	ae 01       	movw	r20, r28
    186a:	4f 5f       	subi	r20, 0xFF	; 255
    186c:	5f 4f       	sbci	r21, 0xFF	; 255
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	eb df       	rcall	.-42     	; 0x1848 <u8x8_byte_SendBytes>
}
    1872:	21 96       	adiw	r28, 0x01	; 1
    1874:	e2 e0       	ldi	r30, 0x02	; 2
    1876:	56 c0       	rjmp	.+172    	; 0x1924 <__epilogue_restores__+0x20>

00001878 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    1878:	dc 01       	movw	r26, r24
    187a:	18 96       	adiw	r26, 0x08	; 8
    187c:	ed 91       	ld	r30, X+
    187e:	fc 91       	ld	r31, X
    1880:	19 97       	sbiw	r26, 0x09	; 9
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	68 e1       	ldi	r22, 0x18	; 24
    188a:	09 95       	icall
}
    188c:	08 95       	ret

0000188e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    188e:	dc 01       	movw	r26, r24
    1890:	18 96       	adiw	r26, 0x08	; 8
    1892:	ed 91       	ld	r30, X+
    1894:	fc 91       	ld	r31, X
    1896:	19 97       	sbiw	r26, 0x09	; 9
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	69 e1       	ldi	r22, 0x19	; 25
    18a0:	09 95       	icall
}
    18a2:	08 95       	ret

000018a4 <__udivmodhi4>:
    18a4:	aa 1b       	sub	r26, r26
    18a6:	bb 1b       	sub	r27, r27
    18a8:	51 e1       	ldi	r21, 0x11	; 17
    18aa:	07 c0       	rjmp	.+14     	; 0x18ba <__udivmodhi4_ep>

000018ac <__udivmodhi4_loop>:
    18ac:	aa 1f       	adc	r26, r26
    18ae:	bb 1f       	adc	r27, r27
    18b0:	a6 17       	cp	r26, r22
    18b2:	b7 07       	cpc	r27, r23
    18b4:	10 f0       	brcs	.+4      	; 0x18ba <__udivmodhi4_ep>
    18b6:	a6 1b       	sub	r26, r22
    18b8:	b7 0b       	sbc	r27, r23

000018ba <__udivmodhi4_ep>:
    18ba:	88 1f       	adc	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	5a 95       	dec	r21
    18c0:	a9 f7       	brne	.-22     	; 0x18ac <__udivmodhi4_loop>
    18c2:	80 95       	com	r24
    18c4:	90 95       	com	r25
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	08 95       	ret

000018cc <__prologue_saves__>:
    18cc:	2f 92       	push	r2
    18ce:	3f 92       	push	r3
    18d0:	4f 92       	push	r4
    18d2:	5f 92       	push	r5
    18d4:	6f 92       	push	r6
    18d6:	7f 92       	push	r7
    18d8:	8f 92       	push	r8
    18da:	9f 92       	push	r9
    18dc:	af 92       	push	r10
    18de:	bf 92       	push	r11
    18e0:	cf 92       	push	r12
    18e2:	df 92       	push	r13
    18e4:	ef 92       	push	r14
    18e6:	ff 92       	push	r15
    18e8:	0f 93       	push	r16
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29
    18f0:	cd b7       	in	r28, 0x3d	; 61
    18f2:	de b7       	in	r29, 0x3e	; 62
    18f4:	ca 1b       	sub	r28, r26
    18f6:	db 0b       	sbc	r29, r27
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	09 94       	ijmp

00001904 <__epilogue_restores__>:
    1904:	2a 88       	ldd	r2, Y+18	; 0x12
    1906:	39 88       	ldd	r3, Y+17	; 0x11
    1908:	48 88       	ldd	r4, Y+16	; 0x10
    190a:	5f 84       	ldd	r5, Y+15	; 0x0f
    190c:	6e 84       	ldd	r6, Y+14	; 0x0e
    190e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1910:	8c 84       	ldd	r8, Y+12	; 0x0c
    1912:	9b 84       	ldd	r9, Y+11	; 0x0b
    1914:	aa 84       	ldd	r10, Y+10	; 0x0a
    1916:	b9 84       	ldd	r11, Y+9	; 0x09
    1918:	c8 84       	ldd	r12, Y+8	; 0x08
    191a:	df 80       	ldd	r13, Y+7	; 0x07
    191c:	ee 80       	ldd	r14, Y+6	; 0x06
    191e:	fd 80       	ldd	r15, Y+5	; 0x05
    1920:	0c 81       	ldd	r16, Y+4	; 0x04
    1922:	1b 81       	ldd	r17, Y+3	; 0x03
    1924:	aa 81       	ldd	r26, Y+2	; 0x02
    1926:	b9 81       	ldd	r27, Y+1	; 0x01
    1928:	ce 0f       	add	r28, r30
    192a:	d1 1d       	adc	r29, r1
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	ed 01       	movw	r28, r26
    1938:	08 95       	ret

0000193a <memset>:
    193a:	dc 01       	movw	r26, r24
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <memset+0x6>
    193e:	6d 93       	st	X+, r22
    1940:	41 50       	subi	r20, 0x01	; 1
    1942:	50 40       	sbci	r21, 0x00	; 0
    1944:	e0 f7       	brcc	.-8      	; 0x193e <memset+0x4>
    1946:	08 95       	ret

00001948 <strcpy>:
    1948:	fb 01       	movw	r30, r22
    194a:	dc 01       	movw	r26, r24
    194c:	01 90       	ld	r0, Z+
    194e:	0d 92       	st	X+, r0
    1950:	00 20       	and	r0, r0
    1952:	e1 f7       	brne	.-8      	; 0x194c <strcpy+0x4>
    1954:	08 95       	ret

00001956 <sprintf>:
    1956:	ae e0       	ldi	r26, 0x0E	; 14
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e0 eb       	ldi	r30, 0xB0	; 176
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	c4 cf       	rjmp	.-120    	; 0x18e8 <__prologue_saves__+0x1c>
    1960:	0d 89       	ldd	r16, Y+21	; 0x15
    1962:	1e 89       	ldd	r17, Y+22	; 0x16
    1964:	86 e0       	ldi	r24, 0x06	; 6
    1966:	8c 83       	std	Y+4, r24	; 0x04
    1968:	1a 83       	std	Y+2, r17	; 0x02
    196a:	09 83       	std	Y+1, r16	; 0x01
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	9f e7       	ldi	r25, 0x7F	; 127
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	ae 01       	movw	r20, r28
    1976:	47 5e       	subi	r20, 0xE7	; 231
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	6f 89       	ldd	r22, Y+23	; 0x17
    197c:	78 8d       	ldd	r23, Y+24	; 0x18
    197e:	ce 01       	movw	r24, r28
    1980:	01 96       	adiw	r24, 0x01	; 1
    1982:	09 d0       	rcall	.+18     	; 0x1996 <vfprintf>
    1984:	2f 81       	ldd	r18, Y+7	; 0x07
    1986:	38 85       	ldd	r19, Y+8	; 0x08
    1988:	f8 01       	movw	r30, r16
    198a:	e2 0f       	add	r30, r18
    198c:	f3 1f       	adc	r31, r19
    198e:	10 82       	st	Z, r1
    1990:	2e 96       	adiw	r28, 0x0e	; 14
    1992:	e4 e0       	ldi	r30, 0x04	; 4
    1994:	c5 cf       	rjmp	.-118    	; 0x1920 <__epilogue_restores__+0x1c>

00001996 <vfprintf>:
    1996:	ac e0       	ldi	r26, 0x0C	; 12
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e0 ed       	ldi	r30, 0xD0	; 208
    199c:	fc e0       	ldi	r31, 0x0C	; 12
    199e:	96 cf       	rjmp	.-212    	; 0x18cc <__prologue_saves__>
    19a0:	7c 01       	movw	r14, r24
    19a2:	6b 01       	movw	r12, r22
    19a4:	8a 01       	movw	r16, r20
    19a6:	fc 01       	movw	r30, r24
    19a8:	17 82       	std	Z+7, r1	; 0x07
    19aa:	16 82       	std	Z+6, r1	; 0x06
    19ac:	83 81       	ldd	r24, Z+3	; 0x03
    19ae:	81 ff       	sbrs	r24, 1
    19b0:	b0 c1       	rjmp	.+864    	; 0x1d12 <vfprintf+0x37c>
    19b2:	ce 01       	movw	r24, r28
    19b4:	01 96       	adiw	r24, 0x01	; 1
    19b6:	4c 01       	movw	r8, r24
    19b8:	f7 01       	movw	r30, r14
    19ba:	93 81       	ldd	r25, Z+3	; 0x03
    19bc:	f6 01       	movw	r30, r12
    19be:	93 fd       	sbrc	r25, 3
    19c0:	85 91       	lpm	r24, Z+
    19c2:	93 ff       	sbrs	r25, 3
    19c4:	81 91       	ld	r24, Z+
    19c6:	6f 01       	movw	r12, r30
    19c8:	88 23       	and	r24, r24
    19ca:	09 f4       	brne	.+2      	; 0x19ce <vfprintf+0x38>
    19cc:	9e c1       	rjmp	.+828    	; 0x1d0a <vfprintf+0x374>
    19ce:	85 32       	cpi	r24, 0x25	; 37
    19d0:	39 f4       	brne	.+14     	; 0x19e0 <vfprintf+0x4a>
    19d2:	93 fd       	sbrc	r25, 3
    19d4:	85 91       	lpm	r24, Z+
    19d6:	93 ff       	sbrs	r25, 3
    19d8:	81 91       	ld	r24, Z+
    19da:	6f 01       	movw	r12, r30
    19dc:	85 32       	cpi	r24, 0x25	; 37
    19de:	21 f4       	brne	.+8      	; 0x19e8 <vfprintf+0x52>
    19e0:	b7 01       	movw	r22, r14
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	b1 d1       	rcall	.+866    	; 0x1d48 <fputc>
    19e6:	e8 cf       	rjmp	.-48     	; 0x19b8 <vfprintf+0x22>
    19e8:	51 2c       	mov	r5, r1
    19ea:	31 2c       	mov	r3, r1
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	20 32       	cpi	r18, 0x20	; 32
    19f0:	a0 f4       	brcc	.+40     	; 0x1a1a <vfprintf+0x84>
    19f2:	8b 32       	cpi	r24, 0x2B	; 43
    19f4:	69 f0       	breq	.+26     	; 0x1a10 <vfprintf+0x7a>
    19f6:	30 f4       	brcc	.+12     	; 0x1a04 <vfprintf+0x6e>
    19f8:	80 32       	cpi	r24, 0x20	; 32
    19fa:	59 f0       	breq	.+22     	; 0x1a12 <vfprintf+0x7c>
    19fc:	83 32       	cpi	r24, 0x23	; 35
    19fe:	69 f4       	brne	.+26     	; 0x1a1a <vfprintf+0x84>
    1a00:	20 61       	ori	r18, 0x10	; 16
    1a02:	2c c0       	rjmp	.+88     	; 0x1a5c <vfprintf+0xc6>
    1a04:	8d 32       	cpi	r24, 0x2D	; 45
    1a06:	39 f0       	breq	.+14     	; 0x1a16 <vfprintf+0x80>
    1a08:	80 33       	cpi	r24, 0x30	; 48
    1a0a:	39 f4       	brne	.+14     	; 0x1a1a <vfprintf+0x84>
    1a0c:	21 60       	ori	r18, 0x01	; 1
    1a0e:	26 c0       	rjmp	.+76     	; 0x1a5c <vfprintf+0xc6>
    1a10:	22 60       	ori	r18, 0x02	; 2
    1a12:	24 60       	ori	r18, 0x04	; 4
    1a14:	23 c0       	rjmp	.+70     	; 0x1a5c <vfprintf+0xc6>
    1a16:	28 60       	ori	r18, 0x08	; 8
    1a18:	21 c0       	rjmp	.+66     	; 0x1a5c <vfprintf+0xc6>
    1a1a:	27 fd       	sbrc	r18, 7
    1a1c:	27 c0       	rjmp	.+78     	; 0x1a6c <vfprintf+0xd6>
    1a1e:	30 ed       	ldi	r19, 0xD0	; 208
    1a20:	38 0f       	add	r19, r24
    1a22:	3a 30       	cpi	r19, 0x0A	; 10
    1a24:	78 f4       	brcc	.+30     	; 0x1a44 <vfprintf+0xae>
    1a26:	26 ff       	sbrs	r18, 6
    1a28:	06 c0       	rjmp	.+12     	; 0x1a36 <vfprintf+0xa0>
    1a2a:	fa e0       	ldi	r31, 0x0A	; 10
    1a2c:	5f 9e       	mul	r5, r31
    1a2e:	30 0d       	add	r19, r0
    1a30:	11 24       	eor	r1, r1
    1a32:	53 2e       	mov	r5, r19
    1a34:	13 c0       	rjmp	.+38     	; 0x1a5c <vfprintf+0xc6>
    1a36:	8a e0       	ldi	r24, 0x0A	; 10
    1a38:	38 9e       	mul	r3, r24
    1a3a:	30 0d       	add	r19, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	33 2e       	mov	r3, r19
    1a40:	20 62       	ori	r18, 0x20	; 32
    1a42:	0c c0       	rjmp	.+24     	; 0x1a5c <vfprintf+0xc6>
    1a44:	8e 32       	cpi	r24, 0x2E	; 46
    1a46:	21 f4       	brne	.+8      	; 0x1a50 <vfprintf+0xba>
    1a48:	26 fd       	sbrc	r18, 6
    1a4a:	5f c1       	rjmp	.+702    	; 0x1d0a <vfprintf+0x374>
    1a4c:	20 64       	ori	r18, 0x40	; 64
    1a4e:	06 c0       	rjmp	.+12     	; 0x1a5c <vfprintf+0xc6>
    1a50:	8c 36       	cpi	r24, 0x6C	; 108
    1a52:	11 f4       	brne	.+4      	; 0x1a58 <vfprintf+0xc2>
    1a54:	20 68       	ori	r18, 0x80	; 128
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <vfprintf+0xc6>
    1a58:	88 36       	cpi	r24, 0x68	; 104
    1a5a:	41 f4       	brne	.+16     	; 0x1a6c <vfprintf+0xd6>
    1a5c:	f6 01       	movw	r30, r12
    1a5e:	93 fd       	sbrc	r25, 3
    1a60:	85 91       	lpm	r24, Z+
    1a62:	93 ff       	sbrs	r25, 3
    1a64:	81 91       	ld	r24, Z+
    1a66:	6f 01       	movw	r12, r30
    1a68:	81 11       	cpse	r24, r1
    1a6a:	c1 cf       	rjmp	.-126    	; 0x19ee <vfprintf+0x58>
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	9f 7d       	andi	r25, 0xDF	; 223
    1a70:	95 54       	subi	r25, 0x45	; 69
    1a72:	93 30       	cpi	r25, 0x03	; 3
    1a74:	28 f4       	brcc	.+10     	; 0x1a80 <vfprintf+0xea>
    1a76:	0c 5f       	subi	r16, 0xFC	; 252
    1a78:	1f 4f       	sbci	r17, 0xFF	; 255
    1a7a:	ff e3       	ldi	r31, 0x3F	; 63
    1a7c:	f9 83       	std	Y+1, r31	; 0x01
    1a7e:	0d c0       	rjmp	.+26     	; 0x1a9a <vfprintf+0x104>
    1a80:	83 36       	cpi	r24, 0x63	; 99
    1a82:	31 f0       	breq	.+12     	; 0x1a90 <vfprintf+0xfa>
    1a84:	83 37       	cpi	r24, 0x73	; 115
    1a86:	71 f0       	breq	.+28     	; 0x1aa4 <vfprintf+0x10e>
    1a88:	83 35       	cpi	r24, 0x53	; 83
    1a8a:	09 f0       	breq	.+2      	; 0x1a8e <vfprintf+0xf8>
    1a8c:	57 c0       	rjmp	.+174    	; 0x1b3c <vfprintf+0x1a6>
    1a8e:	21 c0       	rjmp	.+66     	; 0x1ad2 <vfprintf+0x13c>
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 81       	ld	r24, Z
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	0e 5f       	subi	r16, 0xFE	; 254
    1a98:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9a:	44 24       	eor	r4, r4
    1a9c:	43 94       	inc	r4
    1a9e:	51 2c       	mov	r5, r1
    1aa0:	54 01       	movw	r10, r8
    1aa2:	14 c0       	rjmp	.+40     	; 0x1acc <vfprintf+0x136>
    1aa4:	38 01       	movw	r6, r16
    1aa6:	f2 e0       	ldi	r31, 0x02	; 2
    1aa8:	6f 0e       	add	r6, r31
    1aaa:	71 1c       	adc	r7, r1
    1aac:	f8 01       	movw	r30, r16
    1aae:	a0 80       	ld	r10, Z
    1ab0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ab2:	26 ff       	sbrs	r18, 6
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <vfprintf+0x126>
    1ab6:	65 2d       	mov	r22, r5
    1ab8:	70 e0       	ldi	r23, 0x00	; 0
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <vfprintf+0x12a>
    1abc:	6f ef       	ldi	r22, 0xFF	; 255
    1abe:	7f ef       	ldi	r23, 0xFF	; 255
    1ac0:	c5 01       	movw	r24, r10
    1ac2:	2c 87       	std	Y+12, r18	; 0x0c
    1ac4:	36 d1       	rcall	.+620    	; 0x1d32 <strnlen>
    1ac6:	2c 01       	movw	r4, r24
    1ac8:	83 01       	movw	r16, r6
    1aca:	2c 85       	ldd	r18, Y+12	; 0x0c
    1acc:	2f 77       	andi	r18, 0x7F	; 127
    1ace:	22 2e       	mov	r2, r18
    1ad0:	16 c0       	rjmp	.+44     	; 0x1afe <vfprintf+0x168>
    1ad2:	38 01       	movw	r6, r16
    1ad4:	f2 e0       	ldi	r31, 0x02	; 2
    1ad6:	6f 0e       	add	r6, r31
    1ad8:	71 1c       	adc	r7, r1
    1ada:	f8 01       	movw	r30, r16
    1adc:	a0 80       	ld	r10, Z
    1ade:	b1 80       	ldd	r11, Z+1	; 0x01
    1ae0:	26 ff       	sbrs	r18, 6
    1ae2:	03 c0       	rjmp	.+6      	; 0x1aea <vfprintf+0x154>
    1ae4:	65 2d       	mov	r22, r5
    1ae6:	70 e0       	ldi	r23, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <vfprintf+0x158>
    1aea:	6f ef       	ldi	r22, 0xFF	; 255
    1aec:	7f ef       	ldi	r23, 0xFF	; 255
    1aee:	c5 01       	movw	r24, r10
    1af0:	2c 87       	std	Y+12, r18	; 0x0c
    1af2:	14 d1       	rcall	.+552    	; 0x1d1c <strnlen_P>
    1af4:	2c 01       	movw	r4, r24
    1af6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af8:	20 68       	ori	r18, 0x80	; 128
    1afa:	22 2e       	mov	r2, r18
    1afc:	83 01       	movw	r16, r6
    1afe:	23 fc       	sbrc	r2, 3
    1b00:	19 c0       	rjmp	.+50     	; 0x1b34 <vfprintf+0x19e>
    1b02:	83 2d       	mov	r24, r3
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	48 16       	cp	r4, r24
    1b08:	59 06       	cpc	r5, r25
    1b0a:	a0 f4       	brcc	.+40     	; 0x1b34 <vfprintf+0x19e>
    1b0c:	b7 01       	movw	r22, r14
    1b0e:	80 e2       	ldi	r24, 0x20	; 32
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	1a d1       	rcall	.+564    	; 0x1d48 <fputc>
    1b14:	3a 94       	dec	r3
    1b16:	f5 cf       	rjmp	.-22     	; 0x1b02 <vfprintf+0x16c>
    1b18:	f5 01       	movw	r30, r10
    1b1a:	27 fc       	sbrc	r2, 7
    1b1c:	85 91       	lpm	r24, Z+
    1b1e:	27 fe       	sbrs	r2, 7
    1b20:	81 91       	ld	r24, Z+
    1b22:	5f 01       	movw	r10, r30
    1b24:	b7 01       	movw	r22, r14
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	0f d1       	rcall	.+542    	; 0x1d48 <fputc>
    1b2a:	31 10       	cpse	r3, r1
    1b2c:	3a 94       	dec	r3
    1b2e:	f1 e0       	ldi	r31, 0x01	; 1
    1b30:	4f 1a       	sub	r4, r31
    1b32:	51 08       	sbc	r5, r1
    1b34:	41 14       	cp	r4, r1
    1b36:	51 04       	cpc	r5, r1
    1b38:	79 f7       	brne	.-34     	; 0x1b18 <vfprintf+0x182>
    1b3a:	de c0       	rjmp	.+444    	; 0x1cf8 <vfprintf+0x362>
    1b3c:	84 36       	cpi	r24, 0x64	; 100
    1b3e:	11 f0       	breq	.+4      	; 0x1b44 <vfprintf+0x1ae>
    1b40:	89 36       	cpi	r24, 0x69	; 105
    1b42:	31 f5       	brne	.+76     	; 0x1b90 <vfprintf+0x1fa>
    1b44:	f8 01       	movw	r30, r16
    1b46:	27 ff       	sbrs	r18, 7
    1b48:	07 c0       	rjmp	.+14     	; 0x1b58 <vfprintf+0x1c2>
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	0c 5f       	subi	r16, 0xFC	; 252
    1b54:	1f 4f       	sbci	r17, 0xFF	; 255
    1b56:	08 c0       	rjmp	.+16     	; 0x1b68 <vfprintf+0x1d2>
    1b58:	60 81       	ld	r22, Z
    1b5a:	71 81       	ldd	r23, Z+1	; 0x01
    1b5c:	07 2e       	mov	r0, r23
    1b5e:	00 0c       	add	r0, r0
    1b60:	88 0b       	sbc	r24, r24
    1b62:	99 0b       	sbc	r25, r25
    1b64:	0e 5f       	subi	r16, 0xFE	; 254
    1b66:	1f 4f       	sbci	r17, 0xFF	; 255
    1b68:	2f 76       	andi	r18, 0x6F	; 111
    1b6a:	72 2e       	mov	r7, r18
    1b6c:	97 ff       	sbrs	r25, 7
    1b6e:	09 c0       	rjmp	.+18     	; 0x1b82 <vfprintf+0x1ec>
    1b70:	90 95       	com	r25
    1b72:	80 95       	com	r24
    1b74:	70 95       	com	r23
    1b76:	61 95       	neg	r22
    1b78:	7f 4f       	sbci	r23, 0xFF	; 255
    1b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7e:	20 68       	ori	r18, 0x80	; 128
    1b80:	72 2e       	mov	r7, r18
    1b82:	2a e0       	ldi	r18, 0x0A	; 10
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	a4 01       	movw	r20, r8
    1b88:	17 d1       	rcall	.+558    	; 0x1db8 <__ultoa_invert>
    1b8a:	a8 2e       	mov	r10, r24
    1b8c:	a8 18       	sub	r10, r8
    1b8e:	43 c0       	rjmp	.+134    	; 0x1c16 <vfprintf+0x280>
    1b90:	85 37       	cpi	r24, 0x75	; 117
    1b92:	29 f4       	brne	.+10     	; 0x1b9e <vfprintf+0x208>
    1b94:	2f 7e       	andi	r18, 0xEF	; 239
    1b96:	b2 2e       	mov	r11, r18
    1b98:	2a e0       	ldi	r18, 0x0A	; 10
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	25 c0       	rjmp	.+74     	; 0x1be8 <vfprintf+0x252>
    1b9e:	f2 2f       	mov	r31, r18
    1ba0:	f9 7f       	andi	r31, 0xF9	; 249
    1ba2:	bf 2e       	mov	r11, r31
    1ba4:	8f 36       	cpi	r24, 0x6F	; 111
    1ba6:	c1 f0       	breq	.+48     	; 0x1bd8 <vfprintf+0x242>
    1ba8:	18 f4       	brcc	.+6      	; 0x1bb0 <vfprintf+0x21a>
    1baa:	88 35       	cpi	r24, 0x58	; 88
    1bac:	79 f0       	breq	.+30     	; 0x1bcc <vfprintf+0x236>
    1bae:	ad c0       	rjmp	.+346    	; 0x1d0a <vfprintf+0x374>
    1bb0:	80 37       	cpi	r24, 0x70	; 112
    1bb2:	19 f0       	breq	.+6      	; 0x1bba <vfprintf+0x224>
    1bb4:	88 37       	cpi	r24, 0x78	; 120
    1bb6:	21 f0       	breq	.+8      	; 0x1bc0 <vfprintf+0x22a>
    1bb8:	a8 c0       	rjmp	.+336    	; 0x1d0a <vfprintf+0x374>
    1bba:	2f 2f       	mov	r18, r31
    1bbc:	20 61       	ori	r18, 0x10	; 16
    1bbe:	b2 2e       	mov	r11, r18
    1bc0:	b4 fe       	sbrs	r11, 4
    1bc2:	0d c0       	rjmp	.+26     	; 0x1bde <vfprintf+0x248>
    1bc4:	8b 2d       	mov	r24, r11
    1bc6:	84 60       	ori	r24, 0x04	; 4
    1bc8:	b8 2e       	mov	r11, r24
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <vfprintf+0x248>
    1bcc:	24 ff       	sbrs	r18, 4
    1bce:	0a c0       	rjmp	.+20     	; 0x1be4 <vfprintf+0x24e>
    1bd0:	9f 2f       	mov	r25, r31
    1bd2:	96 60       	ori	r25, 0x06	; 6
    1bd4:	b9 2e       	mov	r11, r25
    1bd6:	06 c0       	rjmp	.+12     	; 0x1be4 <vfprintf+0x24e>
    1bd8:	28 e0       	ldi	r18, 0x08	; 8
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	05 c0       	rjmp	.+10     	; 0x1be8 <vfprintf+0x252>
    1bde:	20 e1       	ldi	r18, 0x10	; 16
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <vfprintf+0x252>
    1be4:	20 e1       	ldi	r18, 0x10	; 16
    1be6:	32 e0       	ldi	r19, 0x02	; 2
    1be8:	f8 01       	movw	r30, r16
    1bea:	b7 fe       	sbrs	r11, 7
    1bec:	07 c0       	rjmp	.+14     	; 0x1bfc <vfprintf+0x266>
    1bee:	60 81       	ld	r22, Z
    1bf0:	71 81       	ldd	r23, Z+1	; 0x01
    1bf2:	82 81       	ldd	r24, Z+2	; 0x02
    1bf4:	93 81       	ldd	r25, Z+3	; 0x03
    1bf6:	0c 5f       	subi	r16, 0xFC	; 252
    1bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfa:	06 c0       	rjmp	.+12     	; 0x1c08 <vfprintf+0x272>
    1bfc:	60 81       	ld	r22, Z
    1bfe:	71 81       	ldd	r23, Z+1	; 0x01
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	0e 5f       	subi	r16, 0xFE	; 254
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	a4 01       	movw	r20, r8
    1c0a:	d6 d0       	rcall	.+428    	; 0x1db8 <__ultoa_invert>
    1c0c:	a8 2e       	mov	r10, r24
    1c0e:	a8 18       	sub	r10, r8
    1c10:	fb 2d       	mov	r31, r11
    1c12:	ff 77       	andi	r31, 0x7F	; 127
    1c14:	7f 2e       	mov	r7, r31
    1c16:	76 fe       	sbrs	r7, 6
    1c18:	0b c0       	rjmp	.+22     	; 0x1c30 <vfprintf+0x29a>
    1c1a:	37 2d       	mov	r19, r7
    1c1c:	3e 7f       	andi	r19, 0xFE	; 254
    1c1e:	a5 14       	cp	r10, r5
    1c20:	50 f4       	brcc	.+20     	; 0x1c36 <vfprintf+0x2a0>
    1c22:	74 fe       	sbrs	r7, 4
    1c24:	0a c0       	rjmp	.+20     	; 0x1c3a <vfprintf+0x2a4>
    1c26:	72 fc       	sbrc	r7, 2
    1c28:	08 c0       	rjmp	.+16     	; 0x1c3a <vfprintf+0x2a4>
    1c2a:	37 2d       	mov	r19, r7
    1c2c:	3e 7e       	andi	r19, 0xEE	; 238
    1c2e:	05 c0       	rjmp	.+10     	; 0x1c3a <vfprintf+0x2a4>
    1c30:	ba 2c       	mov	r11, r10
    1c32:	37 2d       	mov	r19, r7
    1c34:	03 c0       	rjmp	.+6      	; 0x1c3c <vfprintf+0x2a6>
    1c36:	ba 2c       	mov	r11, r10
    1c38:	01 c0       	rjmp	.+2      	; 0x1c3c <vfprintf+0x2a6>
    1c3a:	b5 2c       	mov	r11, r5
    1c3c:	34 ff       	sbrs	r19, 4
    1c3e:	0d c0       	rjmp	.+26     	; 0x1c5a <vfprintf+0x2c4>
    1c40:	fe 01       	movw	r30, r28
    1c42:	ea 0d       	add	r30, r10
    1c44:	f1 1d       	adc	r31, r1
    1c46:	80 81       	ld	r24, Z
    1c48:	80 33       	cpi	r24, 0x30	; 48
    1c4a:	11 f4       	brne	.+4      	; 0x1c50 <vfprintf+0x2ba>
    1c4c:	39 7e       	andi	r19, 0xE9	; 233
    1c4e:	09 c0       	rjmp	.+18     	; 0x1c62 <vfprintf+0x2cc>
    1c50:	32 ff       	sbrs	r19, 2
    1c52:	06 c0       	rjmp	.+12     	; 0x1c60 <vfprintf+0x2ca>
    1c54:	b3 94       	inc	r11
    1c56:	b3 94       	inc	r11
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <vfprintf+0x2cc>
    1c5a:	83 2f       	mov	r24, r19
    1c5c:	86 78       	andi	r24, 0x86	; 134
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <vfprintf+0x2cc>
    1c60:	b3 94       	inc	r11
    1c62:	33 fd       	sbrc	r19, 3
    1c64:	12 c0       	rjmp	.+36     	; 0x1c8a <vfprintf+0x2f4>
    1c66:	30 ff       	sbrs	r19, 0
    1c68:	06 c0       	rjmp	.+12     	; 0x1c76 <vfprintf+0x2e0>
    1c6a:	5a 2c       	mov	r5, r10
    1c6c:	b3 14       	cp	r11, r3
    1c6e:	18 f4       	brcc	.+6      	; 0x1c76 <vfprintf+0x2e0>
    1c70:	53 0c       	add	r5, r3
    1c72:	5b 18       	sub	r5, r11
    1c74:	b3 2c       	mov	r11, r3
    1c76:	b3 14       	cp	r11, r3
    1c78:	60 f4       	brcc	.+24     	; 0x1c92 <vfprintf+0x2fc>
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	3c 87       	std	Y+12, r19	; 0x0c
    1c82:	62 d0       	rcall	.+196    	; 0x1d48 <fputc>
    1c84:	b3 94       	inc	r11
    1c86:	3c 85       	ldd	r19, Y+12	; 0x0c
    1c88:	f6 cf       	rjmp	.-20     	; 0x1c76 <vfprintf+0x2e0>
    1c8a:	b3 14       	cp	r11, r3
    1c8c:	10 f4       	brcc	.+4      	; 0x1c92 <vfprintf+0x2fc>
    1c8e:	3b 18       	sub	r3, r11
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <vfprintf+0x2fe>
    1c92:	31 2c       	mov	r3, r1
    1c94:	34 ff       	sbrs	r19, 4
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <vfprintf+0x324>
    1c98:	b7 01       	movw	r22, r14
    1c9a:	80 e3       	ldi	r24, 0x30	; 48
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	3c 87       	std	Y+12, r19	; 0x0c
    1ca0:	53 d0       	rcall	.+166    	; 0x1d48 <fputc>
    1ca2:	3c 85       	ldd	r19, Y+12	; 0x0c
    1ca4:	32 ff       	sbrs	r19, 2
    1ca6:	16 c0       	rjmp	.+44     	; 0x1cd4 <vfprintf+0x33e>
    1ca8:	31 fd       	sbrc	r19, 1
    1caa:	03 c0       	rjmp	.+6      	; 0x1cb2 <vfprintf+0x31c>
    1cac:	88 e7       	ldi	r24, 0x78	; 120
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <vfprintf+0x320>
    1cb2:	88 e5       	ldi	r24, 0x58	; 88
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	b7 01       	movw	r22, r14
    1cb8:	0c c0       	rjmp	.+24     	; 0x1cd2 <vfprintf+0x33c>
    1cba:	83 2f       	mov	r24, r19
    1cbc:	86 78       	andi	r24, 0x86	; 134
    1cbe:	51 f0       	breq	.+20     	; 0x1cd4 <vfprintf+0x33e>
    1cc0:	31 ff       	sbrs	r19, 1
    1cc2:	02 c0       	rjmp	.+4      	; 0x1cc8 <vfprintf+0x332>
    1cc4:	8b e2       	ldi	r24, 0x2B	; 43
    1cc6:	01 c0       	rjmp	.+2      	; 0x1cca <vfprintf+0x334>
    1cc8:	80 e2       	ldi	r24, 0x20	; 32
    1cca:	37 fd       	sbrc	r19, 7
    1ccc:	8d e2       	ldi	r24, 0x2D	; 45
    1cce:	b7 01       	movw	r22, r14
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	3a d0       	rcall	.+116    	; 0x1d48 <fputc>
    1cd4:	a5 14       	cp	r10, r5
    1cd6:	30 f4       	brcc	.+12     	; 0x1ce4 <vfprintf+0x34e>
    1cd8:	b7 01       	movw	r22, r14
    1cda:	80 e3       	ldi	r24, 0x30	; 48
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	34 d0       	rcall	.+104    	; 0x1d48 <fputc>
    1ce0:	5a 94       	dec	r5
    1ce2:	f8 cf       	rjmp	.-16     	; 0x1cd4 <vfprintf+0x33e>
    1ce4:	aa 94       	dec	r10
    1ce6:	f4 01       	movw	r30, r8
    1ce8:	ea 0d       	add	r30, r10
    1cea:	f1 1d       	adc	r31, r1
    1cec:	80 81       	ld	r24, Z
    1cee:	b7 01       	movw	r22, r14
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	2a d0       	rcall	.+84     	; 0x1d48 <fputc>
    1cf4:	a1 10       	cpse	r10, r1
    1cf6:	f6 cf       	rjmp	.-20     	; 0x1ce4 <vfprintf+0x34e>
    1cf8:	33 20       	and	r3, r3
    1cfa:	09 f4       	brne	.+2      	; 0x1cfe <vfprintf+0x368>
    1cfc:	5d ce       	rjmp	.-838    	; 0x19b8 <vfprintf+0x22>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	21 d0       	rcall	.+66     	; 0x1d48 <fputc>
    1d06:	3a 94       	dec	r3
    1d08:	f7 cf       	rjmp	.-18     	; 0x1cf8 <vfprintf+0x362>
    1d0a:	f7 01       	movw	r30, r14
    1d0c:	86 81       	ldd	r24, Z+6	; 0x06
    1d0e:	97 81       	ldd	r25, Z+7	; 0x07
    1d10:	02 c0       	rjmp	.+4      	; 0x1d16 <vfprintf+0x380>
    1d12:	8f ef       	ldi	r24, 0xFF	; 255
    1d14:	9f ef       	ldi	r25, 0xFF	; 255
    1d16:	2c 96       	adiw	r28, 0x0c	; 12
    1d18:	e2 e1       	ldi	r30, 0x12	; 18
    1d1a:	f4 cd       	rjmp	.-1048   	; 0x1904 <__epilogue_restores__>

00001d1c <strnlen_P>:
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	05 90       	lpm	r0, Z+
    1d20:	61 50       	subi	r22, 0x01	; 1
    1d22:	70 40       	sbci	r23, 0x00	; 0
    1d24:	01 10       	cpse	r0, r1
    1d26:	d8 f7       	brcc	.-10     	; 0x1d1e <strnlen_P+0x2>
    1d28:	80 95       	com	r24
    1d2a:	90 95       	com	r25
    1d2c:	8e 0f       	add	r24, r30
    1d2e:	9f 1f       	adc	r25, r31
    1d30:	08 95       	ret

00001d32 <strnlen>:
    1d32:	fc 01       	movw	r30, r24
    1d34:	61 50       	subi	r22, 0x01	; 1
    1d36:	70 40       	sbci	r23, 0x00	; 0
    1d38:	01 90       	ld	r0, Z+
    1d3a:	01 10       	cpse	r0, r1
    1d3c:	d8 f7       	brcc	.-10     	; 0x1d34 <strnlen+0x2>
    1d3e:	80 95       	com	r24
    1d40:	90 95       	com	r25
    1d42:	8e 0f       	add	r24, r30
    1d44:	9f 1f       	adc	r25, r31
    1d46:	08 95       	ret

00001d48 <fputc>:
    1d48:	0f 93       	push	r16
    1d4a:	1f 93       	push	r17
    1d4c:	cf 93       	push	r28
    1d4e:	df 93       	push	r29
    1d50:	fb 01       	movw	r30, r22
    1d52:	23 81       	ldd	r18, Z+3	; 0x03
    1d54:	21 fd       	sbrc	r18, 1
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <fputc+0x16>
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	9f ef       	ldi	r25, 0xFF	; 255
    1d5c:	28 c0       	rjmp	.+80     	; 0x1dae <fputc+0x66>
    1d5e:	22 ff       	sbrs	r18, 2
    1d60:	16 c0       	rjmp	.+44     	; 0x1d8e <fputc+0x46>
    1d62:	46 81       	ldd	r20, Z+6	; 0x06
    1d64:	57 81       	ldd	r21, Z+7	; 0x07
    1d66:	24 81       	ldd	r18, Z+4	; 0x04
    1d68:	35 81       	ldd	r19, Z+5	; 0x05
    1d6a:	42 17       	cp	r20, r18
    1d6c:	53 07       	cpc	r21, r19
    1d6e:	44 f4       	brge	.+16     	; 0x1d80 <fputc+0x38>
    1d70:	a0 81       	ld	r26, Z
    1d72:	b1 81       	ldd	r27, Z+1	; 0x01
    1d74:	9d 01       	movw	r18, r26
    1d76:	2f 5f       	subi	r18, 0xFF	; 255
    1d78:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7a:	31 83       	std	Z+1, r19	; 0x01
    1d7c:	20 83       	st	Z, r18
    1d7e:	8c 93       	st	X, r24
    1d80:	26 81       	ldd	r18, Z+6	; 0x06
    1d82:	37 81       	ldd	r19, Z+7	; 0x07
    1d84:	2f 5f       	subi	r18, 0xFF	; 255
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	37 83       	std	Z+7, r19	; 0x07
    1d8a:	26 83       	std	Z+6, r18	; 0x06
    1d8c:	10 c0       	rjmp	.+32     	; 0x1dae <fputc+0x66>
    1d8e:	eb 01       	movw	r28, r22
    1d90:	09 2f       	mov	r16, r25
    1d92:	18 2f       	mov	r17, r24
    1d94:	00 84       	ldd	r0, Z+8	; 0x08
    1d96:	f1 85       	ldd	r31, Z+9	; 0x09
    1d98:	e0 2d       	mov	r30, r0
    1d9a:	09 95       	icall
    1d9c:	89 2b       	or	r24, r25
    1d9e:	e1 f6       	brne	.-72     	; 0x1d58 <fputc+0x10>
    1da0:	8e 81       	ldd	r24, Y+6	; 0x06
    1da2:	9f 81       	ldd	r25, Y+7	; 0x07
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	9f 83       	std	Y+7, r25	; 0x07
    1da8:	8e 83       	std	Y+6, r24	; 0x06
    1daa:	81 2f       	mov	r24, r17
    1dac:	90 2f       	mov	r25, r16
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret

00001db8 <__ultoa_invert>:
    1db8:	fa 01       	movw	r30, r20
    1dba:	aa 27       	eor	r26, r26
    1dbc:	28 30       	cpi	r18, 0x08	; 8
    1dbe:	51 f1       	breq	.+84     	; 0x1e14 <__ultoa_invert+0x5c>
    1dc0:	20 31       	cpi	r18, 0x10	; 16
    1dc2:	81 f1       	breq	.+96     	; 0x1e24 <__ultoa_invert+0x6c>
    1dc4:	e8 94       	clt
    1dc6:	6f 93       	push	r22
    1dc8:	6e 7f       	andi	r22, 0xFE	; 254
    1dca:	6e 5f       	subi	r22, 0xFE	; 254
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	af 4f       	sbci	r26, 0xFF	; 255
    1dd4:	b1 e0       	ldi	r27, 0x01	; 1
    1dd6:	3e d0       	rcall	.+124    	; 0x1e54 <__ultoa_invert+0x9c>
    1dd8:	b4 e0       	ldi	r27, 0x04	; 4
    1dda:	3c d0       	rcall	.+120    	; 0x1e54 <__ultoa_invert+0x9c>
    1ddc:	67 0f       	add	r22, r23
    1dde:	78 1f       	adc	r23, r24
    1de0:	89 1f       	adc	r24, r25
    1de2:	9a 1f       	adc	r25, r26
    1de4:	a1 1d       	adc	r26, r1
    1de6:	68 0f       	add	r22, r24
    1de8:	79 1f       	adc	r23, r25
    1dea:	8a 1f       	adc	r24, r26
    1dec:	91 1d       	adc	r25, r1
    1dee:	a1 1d       	adc	r26, r1
    1df0:	6a 0f       	add	r22, r26
    1df2:	71 1d       	adc	r23, r1
    1df4:	81 1d       	adc	r24, r1
    1df6:	91 1d       	adc	r25, r1
    1df8:	a1 1d       	adc	r26, r1
    1dfa:	20 d0       	rcall	.+64     	; 0x1e3c <__ultoa_invert+0x84>
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <__ultoa_invert+0x48>
    1dfe:	68 94       	set
    1e00:	3f 91       	pop	r19
    1e02:	2a e0       	ldi	r18, 0x0A	; 10
    1e04:	26 9f       	mul	r18, r22
    1e06:	11 24       	eor	r1, r1
    1e08:	30 19       	sub	r19, r0
    1e0a:	30 5d       	subi	r19, 0xD0	; 208
    1e0c:	31 93       	st	Z+, r19
    1e0e:	de f6       	brtc	.-74     	; 0x1dc6 <__ultoa_invert+0xe>
    1e10:	cf 01       	movw	r24, r30
    1e12:	08 95       	ret
    1e14:	46 2f       	mov	r20, r22
    1e16:	47 70       	andi	r20, 0x07	; 7
    1e18:	40 5d       	subi	r20, 0xD0	; 208
    1e1a:	41 93       	st	Z+, r20
    1e1c:	b3 e0       	ldi	r27, 0x03	; 3
    1e1e:	0f d0       	rcall	.+30     	; 0x1e3e <__ultoa_invert+0x86>
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__ultoa_invert+0x5c>
    1e22:	f6 cf       	rjmp	.-20     	; 0x1e10 <__ultoa_invert+0x58>
    1e24:	46 2f       	mov	r20, r22
    1e26:	4f 70       	andi	r20, 0x0F	; 15
    1e28:	40 5d       	subi	r20, 0xD0	; 208
    1e2a:	4a 33       	cpi	r20, 0x3A	; 58
    1e2c:	18 f0       	brcs	.+6      	; 0x1e34 <__ultoa_invert+0x7c>
    1e2e:	49 5d       	subi	r20, 0xD9	; 217
    1e30:	31 fd       	sbrc	r19, 1
    1e32:	40 52       	subi	r20, 0x20	; 32
    1e34:	41 93       	st	Z+, r20
    1e36:	02 d0       	rcall	.+4      	; 0x1e3c <__ultoa_invert+0x84>
    1e38:	a9 f7       	brne	.-22     	; 0x1e24 <__ultoa_invert+0x6c>
    1e3a:	ea cf       	rjmp	.-44     	; 0x1e10 <__ultoa_invert+0x58>
    1e3c:	b4 e0       	ldi	r27, 0x04	; 4
    1e3e:	a6 95       	lsr	r26
    1e40:	97 95       	ror	r25
    1e42:	87 95       	ror	r24
    1e44:	77 95       	ror	r23
    1e46:	67 95       	ror	r22
    1e48:	ba 95       	dec	r27
    1e4a:	c9 f7       	brne	.-14     	; 0x1e3e <__ultoa_invert+0x86>
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	61 05       	cpc	r22, r1
    1e50:	71 05       	cpc	r23, r1
    1e52:	08 95       	ret
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	0a 2e       	mov	r0, r26
    1e5a:	06 94       	lsr	r0
    1e5c:	57 95       	ror	r21
    1e5e:	47 95       	ror	r20
    1e60:	37 95       	ror	r19
    1e62:	27 95       	ror	r18
    1e64:	ba 95       	dec	r27
    1e66:	c9 f7       	brne	.-14     	; 0x1e5a <__ultoa_invert+0xa2>
    1e68:	62 0f       	add	r22, r18
    1e6a:	73 1f       	adc	r23, r19
    1e6c:	84 1f       	adc	r24, r20
    1e6e:	95 1f       	adc	r25, r21
    1e70:	a0 1d       	adc	r26, r0
    1e72:	08 95       	ret

00001e74 <_exit>:
    1e74:	f8 94       	cli

00001e76 <__stop_program>:
    1e76:	ff cf       	rjmp	.-2      	; 0x1e76 <__stop_program>
