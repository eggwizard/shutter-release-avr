
output.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	9a c1       	rjmp	.+820    	; 0x336 <__ctors_end>
       2:	b4 c1       	rjmp	.+872    	; 0x36c <__bad_interrupt>
       4:	b3 c1       	rjmp	.+870    	; 0x36c <__bad_interrupt>
       6:	b2 c1       	rjmp	.+868    	; 0x36c <__bad_interrupt>
       8:	60 c5       	rjmp	.+2752   	; 0xaca <__vector_4>
       a:	b0 c1       	rjmp	.+864    	; 0x36c <__bad_interrupt>
       c:	af c1       	rjmp	.+862    	; 0x36c <__bad_interrupt>
       e:	ae c1       	rjmp	.+860    	; 0x36c <__bad_interrupt>
      10:	ad c1       	rjmp	.+858    	; 0x36c <__bad_interrupt>
      12:	ac c1       	rjmp	.+856    	; 0x36c <__bad_interrupt>
      14:	ab c1       	rjmp	.+854    	; 0x36c <__bad_interrupt>
      16:	aa c1       	rjmp	.+852    	; 0x36c <__bad_interrupt>
      18:	a9 c1       	rjmp	.+850    	; 0x36c <__bad_interrupt>
      1a:	a8 c1       	rjmp	.+848    	; 0x36c <__bad_interrupt>
      1c:	20 c2       	rjmp	.+1088   	; 0x45e <__vector_14>
      1e:	a6 c1       	rjmp	.+844    	; 0x36c <__bad_interrupt>
      20:	a5 c1       	rjmp	.+842    	; 0x36c <__bad_interrupt>
      22:	a4 c1       	rjmp	.+840    	; 0x36c <__bad_interrupt>
      24:	a3 c1       	rjmp	.+838    	; 0x36c <__bad_interrupt>
      26:	a2 c1       	rjmp	.+836    	; 0x36c <__bad_interrupt>
      28:	a1 c1       	rjmp	.+834    	; 0x36c <__bad_interrupt>
      2a:	a0 c1       	rjmp	.+832    	; 0x36c <__bad_interrupt>
      2c:	9f c1       	rjmp	.+830    	; 0x36c <__bad_interrupt>
      2e:	9e c1       	rjmp	.+828    	; 0x36c <__bad_interrupt>
      30:	9d c1       	rjmp	.+826    	; 0x36c <__bad_interrupt>
      32:	9c c1       	rjmp	.+824    	; 0x36c <__bad_interrupt>

00000034 <__trampolines_end>:
      34:	20 7f       	andi	r18, 0xF0	; 240
	...
      3e:	00 00       	nop
      40:	00 5f       	subi	r16, 0xF0	; 240
      42:	00 00       	nop
      44:	00 00       	nop
      46:	00 07       	cpc	r16, r16
      48:	00 00       	nop
      4a:	00 07       	cpc	r16, r16
      4c:	00 00       	nop
      4e:	00 22       	and	r0, r16
      50:	7f 22       	and	r7, r31
      52:	22 7f       	andi	r18, 0xF2	; 242
      54:	22 00       	.word	0x0022	; ????
      56:	00 24       	eor	r0, r0
      58:	2a 6b       	ori	r18, 0xBA	; 186
      5a:	2a 12       	cpse	r2, r26
      5c:	00 00       	nop
      5e:	00 22       	and	r0, r16
      60:	10 08       	sbc	r1, r0
      62:	04 22       	and	r0, r20
      64:	00 00       	nop
      66:	20 56       	subi	r18, 0x60	; 96
      68:	49 49       	sbci	r20, 0x99	; 153
      6a:	56 20       	and	r5, r6
      6c:	50 00       	.word	0x0050	; ????
      6e:	00 00       	nop
      70:	00 07       	cpc	r16, r16
      72:	00 00       	nop
      74:	00 00       	nop
      76:	00 00       	nop
      78:	1c 22       	and	r1, r28
      7a:	41 00       	.word	0x0041	; ????
      7c:	00 00       	nop
      7e:	00 00       	nop
      80:	41 22       	and	r4, r17
      82:	1c 00       	.word	0x001c	; ????
      84:	00 00       	nop
      86:	00 2a       	or	r0, r16
      88:	1c 7f       	andi	r17, 0xFC	; 252
      8a:	1c 2a       	or	r1, r28
      8c:	00 00       	nop
      8e:	00 08       	sbc	r0, r0
      90:	08 3e       	cpi	r16, 0xE8	; 232
      92:	08 08       	sbc	r0, r8
      94:	00 00       	nop
      96:	00 00       	nop
      98:	40 30       	cpi	r20, 0x00	; 0
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	00 08       	sbc	r0, r0
      a0:	08 08       	sbc	r0, r8
      a2:	08 08       	sbc	r0, r8
      a4:	08 00       	.word	0x0008	; ????
      a6:	00 00       	nop
      a8:	00 60       	ori	r16, 0x00	; 0
      aa:	60 00       	.word	0x0060	; ????
      ac:	00 00       	nop
      ae:	00 40       	sbci	r16, 0x00	; 0
      b0:	20 10       	cpse	r2, r0
      b2:	08 04       	cpc	r0, r8
      b4:	02 00       	.word	0x0002	; ????
      b6:	00 3e       	cpi	r16, 0xE0	; 224
      b8:	51 49       	sbci	r21, 0x91	; 145
      ba:	45 3e       	cpi	r20, 0xE5	; 229
      bc:	00 00       	nop
      be:	00 40       	sbci	r16, 0x00	; 0
      c0:	42 7f       	andi	r20, 0xF2	; 242
      c2:	40 40       	sbci	r20, 0x00	; 0
      c4:	00 00       	nop
      c6:	00 62       	ori	r16, 0x20	; 32
      c8:	51 49       	sbci	r21, 0x91	; 145
      ca:	49 46       	sbci	r20, 0x69	; 105
      cc:	00 00       	nop
      ce:	00 22       	and	r0, r16
      d0:	41 49       	sbci	r20, 0x91	; 145
      d2:	49 36       	cpi	r20, 0x69	; 105
      d4:	00 00       	nop
      d6:	00 1c       	adc	r0, r0
      d8:	12 51       	subi	r17, 0x12	; 18
      da:	7f 50       	subi	r23, 0x0F	; 15
      dc:	00 00       	nop
      de:	00 27       	eor	r16, r16
      e0:	45 45       	sbci	r20, 0x55	; 85
      e2:	45 39       	cpi	r20, 0x95	; 149
      e4:	00 00       	nop
      e6:	00 3c       	cpi	r16, 0xC0	; 192
      e8:	4a 49       	sbci	r20, 0x9A	; 154
      ea:	49 30       	cpi	r20, 0x09	; 9
      ec:	00 00       	nop
      ee:	00 01       	movw	r0, r0
      f0:	01 79       	andi	r16, 0x91	; 145
      f2:	05 03       	mulsu	r16, r21
      f4:	00 00       	nop
      f6:	00 36       	cpi	r16, 0x60	; 96
      f8:	49 49       	sbci	r20, 0x99	; 153
      fa:	49 36       	cpi	r20, 0x69	; 105
      fc:	00 00       	nop
      fe:	00 06       	cpc	r0, r16
     100:	49 49       	sbci	r20, 0x99	; 153
     102:	29 1e       	adc	r2, r25
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 12       	cpse	r0, r16
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 00       	nop
     110:	40 32       	cpi	r20, 0x20	; 32
     112:	00 00       	nop
     114:	00 00       	nop
     116:	00 00       	nop
     118:	08 14       	cp	r0, r8
     11a:	22 41       	sbci	r18, 0x12	; 18
     11c:	00 00       	nop
     11e:	00 14       	cp	r0, r0
     120:	14 14       	cp	r1, r4
     122:	14 14       	cp	r1, r4
     124:	14 00       	.word	0x0014	; ????
     126:	00 00       	nop
     128:	41 22       	and	r4, r17
     12a:	14 08       	sbc	r1, r4
     12c:	00 00       	nop
     12e:	00 02       	muls	r16, r16
     130:	01 59       	subi	r16, 0x91	; 145
     132:	09 06       	cpc	r0, r25
     134:	00 00       	nop
     136:	3c 42       	sbci	r19, 0x2C	; 44
     138:	99 a5       	ldd	r25, Y+41	; 0x29
     13a:	a5 b9       	out	0x05, r26	; 5
     13c:	22 1c       	adc	r2, r2
     13e:	00 7e       	andi	r16, 0xE0	; 224
     140:	09 09       	sbc	r16, r9
     142:	09 7e       	andi	r16, 0xE9	; 233
     144:	00 00       	nop
     146:	00 7f       	andi	r16, 0xF0	; 240
     148:	49 49       	sbci	r20, 0x99	; 153
     14a:	49 36       	cpi	r20, 0x69	; 105
     14c:	00 00       	nop
     14e:	00 3e       	cpi	r16, 0xE0	; 224
     150:	41 41       	sbci	r20, 0x11	; 17
     152:	41 22       	and	r4, r17
     154:	00 00       	nop
     156:	00 7f       	andi	r16, 0xF0	; 240
     158:	41 41       	sbci	r20, 0x11	; 17
     15a:	41 3e       	cpi	r20, 0xE1	; 225
     15c:	00 00       	nop
     15e:	00 7f       	andi	r16, 0xF0	; 240
     160:	49 49       	sbci	r20, 0x99	; 153
     162:	41 41       	sbci	r20, 0x11	; 17
     164:	00 00       	nop
     166:	00 7f       	andi	r16, 0xF0	; 240
     168:	09 09       	sbc	r16, r9
     16a:	09 01       	movw	r0, r18
     16c:	00 00       	nop
     16e:	00 3e       	cpi	r16, 0xE0	; 224
     170:	41 41       	sbci	r20, 0x11	; 17
     172:	49 3a       	cpi	r20, 0xA9	; 169
     174:	00 00       	nop
     176:	00 7f       	andi	r16, 0xF0	; 240
     178:	08 08       	sbc	r0, r8
     17a:	08 7f       	andi	r16, 0xF8	; 248
     17c:	00 00       	nop
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	41 00       	.word	0x0041	; ????
     184:	00 00       	nop
     186:	00 20       	and	r0, r0
     188:	40 40       	sbci	r20, 0x00	; 0
     18a:	40 3f       	cpi	r20, 0xF0	; 240
     18c:	00 00       	nop
     18e:	00 7f       	andi	r16, 0xF0	; 240
     190:	08 14       	cp	r0, r8
     192:	22 41       	sbci	r18, 0x12	; 18
     194:	00 00       	nop
     196:	00 7f       	andi	r16, 0xF0	; 240
     198:	40 40       	sbci	r20, 0x00	; 0
     19a:	40 40       	sbci	r20, 0x00	; 0
     19c:	00 00       	nop
     19e:	00 7f       	andi	r16, 0xF0	; 240
     1a0:	02 04       	cpc	r0, r2
     1a2:	02 7f       	andi	r16, 0xF2	; 242
     1a4:	00 00       	nop
     1a6:	00 7f       	andi	r16, 0xF0	; 240
     1a8:	04 08       	sbc	r0, r4
     1aa:	10 7f       	andi	r17, 0xF0	; 240
     1ac:	00 00       	nop
     1ae:	00 3e       	cpi	r16, 0xE0	; 224
     1b0:	41 41       	sbci	r20, 0x11	; 17
     1b2:	41 3e       	cpi	r20, 0xE1	; 225
     1b4:	00 00       	nop
     1b6:	00 7f       	andi	r16, 0xF0	; 240
     1b8:	09 09       	sbc	r16, r9
     1ba:	09 06       	cpc	r0, r25
     1bc:	00 00       	nop
     1be:	00 3e       	cpi	r16, 0xE0	; 224
     1c0:	41 61       	ori	r20, 0x11	; 17
     1c2:	41 be       	out	0x31, r4	; 49
     1c4:	00 00       	nop
     1c6:	00 7f       	andi	r16, 0xF0	; 240
     1c8:	09 19       	sub	r16, r9
     1ca:	29 46       	sbci	r18, 0x69	; 105
     1cc:	00 00       	nop
     1ce:	00 26       	eor	r0, r16
     1d0:	49 49       	sbci	r20, 0x99	; 153
     1d2:	49 32       	cpi	r20, 0x29	; 41
     1d4:	00 00       	nop
     1d6:	00 01       	movw	r0, r0
     1d8:	01 7f       	andi	r16, 0xF1	; 241
     1da:	01 01       	movw	r0, r2
     1dc:	00 00       	nop
     1de:	00 3f       	cpi	r16, 0xF0	; 240
     1e0:	40 40       	sbci	r20, 0x00	; 0
     1e2:	40 3f       	cpi	r20, 0xF0	; 240
     1e4:	00 00       	nop
     1e6:	00 1f       	adc	r16, r16
     1e8:	20 40       	sbci	r18, 0x00	; 0
     1ea:	20 1f       	adc	r18, r16
     1ec:	00 00       	nop
     1ee:	00 7f       	andi	r16, 0xF0	; 240
     1f0:	20 10       	cpse	r2, r0
     1f2:	20 7f       	andi	r18, 0xF0	; 240
     1f4:	00 00       	nop
     1f6:	00 63       	ori	r16, 0x30	; 48
     1f8:	14 08       	sbc	r1, r4
     1fa:	14 63       	ori	r17, 0x34	; 52
     1fc:	00 00       	nop
     1fe:	00 07       	cpc	r16, r16
     200:	08 70       	andi	r16, 0x08	; 8
     202:	08 07       	cpc	r16, r24
     204:	00 00       	nop
     206:	00 61       	ori	r16, 0x10	; 16
     208:	51 49       	sbci	r21, 0x91	; 145
     20a:	45 43       	sbci	r20, 0x35	; 53
     20c:	00 00       	nop
     20e:	00 00       	nop
     210:	7f 41       	sbci	r23, 0x1F	; 31
     212:	41 00       	.word	0x0041	; ????
     214:	00 00       	nop
     216:	00 02       	muls	r16, r16
     218:	04 08       	sbc	r0, r4
     21a:	10 20       	and	r1, r0
     21c:	40 00       	.word	0x0040	; ????
     21e:	00 00       	nop
     220:	00 41       	sbci	r16, 0x10	; 16
     222:	41 7f       	andi	r20, 0xF1	; 241
     224:	00 00       	nop
     226:	00 00       	nop
     228:	04 02       	muls	r16, r20
     22a:	01 02       	muls	r16, r17
     22c:	04 00       	.word	0x0004	; ????
     22e:	80 80       	ld	r8, Z
     230:	80 80       	ld	r8, Z
     232:	80 80       	ld	r8, Z
     234:	80 80       	ld	r8, Z
     236:	00 00       	nop
     238:	00 01       	movw	r0, r0
     23a:	02 00       	.word	0x0002	; ????
     23c:	00 00       	nop
     23e:	00 20       	and	r0, r0
     240:	54 54       	subi	r21, 0x44	; 68
     242:	54 78       	andi	r21, 0x84	; 132
     244:	00 00       	nop
     246:	00 7f       	andi	r16, 0xF0	; 240
     248:	44 44       	sbci	r20, 0x44	; 68
     24a:	44 38       	cpi	r20, 0x84	; 132
     24c:	00 00       	nop
     24e:	00 38       	cpi	r16, 0x80	; 128
     250:	44 44       	sbci	r20, 0x44	; 68
     252:	44 28       	or	r4, r4
     254:	00 00       	nop
     256:	00 38       	cpi	r16, 0x80	; 128
     258:	44 44       	sbci	r20, 0x44	; 68
     25a:	44 7f       	andi	r20, 0xF4	; 244
     25c:	00 00       	nop
     25e:	00 38       	cpi	r16, 0x80	; 128
     260:	54 54       	subi	r21, 0x44	; 68
     262:	54 48       	sbci	r21, 0x84	; 132
     264:	00 00       	nop
     266:	00 00       	nop
     268:	04 7e       	andi	r16, 0xE4	; 228
     26a:	05 05       	cpc	r16, r5
     26c:	00 00       	nop
     26e:	00 18       	sub	r0, r0
     270:	a4 a4       	ldd	r10, Z+44	; 0x2c
     272:	a4 7c       	andi	r26, 0xC4	; 196
     274:	00 00       	nop
     276:	00 7f       	andi	r16, 0xF0	; 240
     278:	04 04       	cpc	r0, r4
     27a:	04 78       	andi	r16, 0x84	; 132
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	44 7d       	andi	r20, 0xD4	; 212
     282:	40 00       	.word	0x0040	; ????
     284:	00 00       	nop
     286:	00 40       	sbci	r16, 0x00	; 0
     288:	80 80       	ld	r8, Z
     28a:	84 7d       	andi	r24, 0xD4	; 212
     28c:	00 00       	nop
     28e:	00 7f       	andi	r16, 0xF0	; 240
     290:	10 10       	cpse	r1, r0
     292:	28 44       	sbci	r18, 0x48	; 72
     294:	00 00       	nop
     296:	00 00       	nop
     298:	41 7f       	andi	r20, 0xF1	; 241
     29a:	40 00       	.word	0x0040	; ????
     29c:	00 00       	nop
     29e:	00 7c       	andi	r16, 0xC0	; 192
     2a0:	04 78       	andi	r16, 0x84	; 132
     2a2:	04 78       	andi	r16, 0x84	; 132
     2a4:	00 00       	nop
     2a6:	00 7c       	andi	r16, 0xC0	; 192
     2a8:	04 04       	cpc	r0, r4
     2aa:	04 78       	andi	r16, 0x84	; 132
     2ac:	00 00       	nop
     2ae:	00 38       	cpi	r16, 0x80	; 128
     2b0:	44 44       	sbci	r20, 0x44	; 68
     2b2:	44 38       	cpi	r20, 0x84	; 132
     2b4:	00 00       	nop
     2b6:	00 fc       	sbrc	r0, 0
     2b8:	44 44       	sbci	r20, 0x44	; 68
     2ba:	44 38       	cpi	r20, 0x84	; 132
     2bc:	00 00       	nop
     2be:	00 38       	cpi	r16, 0x80	; 128
     2c0:	44 44       	sbci	r20, 0x44	; 68
     2c2:	44 fc       	sbrc	r4, 4
     2c4:	00 00       	nop
     2c6:	00 7c       	andi	r16, 0xC0	; 192
     2c8:	08 04       	cpc	r0, r8
     2ca:	04 04       	cpc	r0, r4
     2cc:	00 00       	nop
     2ce:	00 48       	sbci	r16, 0x80	; 128
     2d0:	54 54       	subi	r21, 0x44	; 68
     2d2:	54 24       	eor	r5, r4
     2d4:	00 00       	nop
     2d6:	00 00       	nop
     2d8:	04 3f       	cpi	r16, 0xF4	; 244
     2da:	44 00       	.word	0x0044	; ????
     2dc:	00 00       	nop
     2de:	00 3c       	cpi	r16, 0xC0	; 192
     2e0:	40 40       	sbci	r20, 0x00	; 0
     2e2:	20 7c       	andi	r18, 0xC0	; 192
     2e4:	00 00       	nop
     2e6:	00 1c       	adc	r0, r0
     2e8:	20 40       	sbci	r18, 0x00	; 0
     2ea:	20 1c       	adc	r2, r0
     2ec:	00 00       	nop
     2ee:	00 1c       	adc	r0, r0
     2f0:	60 1c       	adc	r6, r0
     2f2:	60 1c       	adc	r6, r0
     2f4:	00 00       	nop
     2f6:	00 44       	sbci	r16, 0x40	; 64
     2f8:	28 10       	cpse	r2, r8
     2fa:	28 44       	sbci	r18, 0x48	; 72
     2fc:	00 00       	nop
     2fe:	00 1c       	adc	r0, r0
     300:	a0 a0       	ldd	r10, Z+32	; 0x20
     302:	a0 7c       	andi	r26, 0xC0	; 192
     304:	00 00       	nop
     306:	00 44       	sbci	r16, 0x40	; 64
     308:	64 54       	subi	r22, 0x44	; 68
     30a:	4c 44       	sbci	r20, 0x4C	; 76
     30c:	00 00       	nop
     30e:	00 00       	nop
     310:	08 36       	cpi	r16, 0x68	; 104
     312:	41 00       	.word	0x0041	; ????
     314:	00 00       	nop
     316:	00 00       	nop
     318:	00 ff       	sbrs	r16, 0
     31a:	00 00       	nop
     31c:	00 00       	nop
     31e:	00 00       	nop
     320:	41 36       	cpi	r20, 0x61	; 97
     322:	08 00       	.word	0x0008	; ????
     324:	00 00       	nop
     326:	08 04       	cpc	r0, r8
     328:	04 08       	sbc	r0, r4
     32a:	10 10       	cpse	r1, r0
     32c:	08 00       	.word	0x0008	; ????
	...

00000336 <__ctors_end>:
     336:	11 24       	eor	r1, r1
     338:	1f be       	out	0x3f, r1	; 63
     33a:	cf ef       	ldi	r28, 0xFF	; 255
     33c:	d4 e0       	ldi	r29, 0x04	; 4
     33e:	de bf       	out	0x3e, r29	; 62
     340:	cd bf       	out	0x3d, r28	; 61

00000342 <__do_copy_data>:
     342:	12 e0       	ldi	r17, 0x02	; 2
     344:	a0 e0       	ldi	r26, 0x00	; 0
     346:	b1 e0       	ldi	r27, 0x01	; 1
     348:	e0 e8       	ldi	r30, 0x80	; 128
     34a:	f8 e1       	ldi	r31, 0x18	; 24
     34c:	02 c0       	rjmp	.+4      	; 0x352 <__do_copy_data+0x10>
     34e:	05 90       	lpm	r0, Z+
     350:	0d 92       	st	X+, r0
     352:	aa 35       	cpi	r26, 0x5A	; 90
     354:	b1 07       	cpc	r27, r17
     356:	d9 f7       	brne	.-10     	; 0x34e <__do_copy_data+0xc>

00000358 <__do_clear_bss>:
     358:	22 e0       	ldi	r18, 0x02	; 2
     35a:	aa e5       	ldi	r26, 0x5A	; 90
     35c:	b2 e0       	ldi	r27, 0x02	; 2
     35e:	01 c0       	rjmp	.+2      	; 0x362 <.do_clear_bss_start>

00000360 <.do_clear_bss_loop>:
     360:	1d 92       	st	X+, r1

00000362 <.do_clear_bss_start>:
     362:	a0 39       	cpi	r26, 0x90	; 144
     364:	b2 07       	cpc	r27, r18
     366:	e1 f7       	brne	.-8      	; 0x360 <.do_clear_bss_loop>
     368:	ab d2       	rcall	.+1366   	; 0x8c0 <main>
     36a:	88 ca       	rjmp	.-2800   	; 0xfffff87c <__eeprom_end+0xff7ef87c>

0000036c <__bad_interrupt>:
     36c:	49 ce       	rjmp	.-878    	; 0x0 <__vectors>

0000036e <test_func>:





void test_func (void){
     36e:	a4 e1       	ldi	r26, 0x14	; 20
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	ec eb       	ldi	r30, 0xBC	; 188
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	c3 c7       	rjmp	.+3974   	; 0x12fe <__prologue_saves__+0x1c>

	char msg_temp[20]={0};
     378:	8e 01       	movw	r16, r28
     37a:	0f 5f       	subi	r16, 0xFF	; 255
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	84 e1       	ldi	r24, 0x14	; 20
     380:	f8 01       	movw	r30, r16
     382:	11 92       	st	Z+, r1
     384:	8a 95       	dec	r24
     386:	e9 f7       	brne	.-6      	; 0x382 <test_func+0x14>
	// print_text(0, 0, msg_temp, 0);

	// sprintf(msg_temp, "BTN:%d%d, ENC:%3d", temp1, temp2, get_enc_counter());
	// print_text(0, 1, msg_temp, 0);
	
	sprintf(msg_temp, "cur state:%d", state_cur );
     388:	80 91 5b 02 	lds	r24, 0x025B
     38c:	8f 93       	push	r24
     38e:	80 91 5a 02 	lds	r24, 0x025A
     392:	8f 93       	push	r24
     394:	8b e9       	ldi	r24, 0x9B	; 155
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	9f 93       	push	r25
     39a:	8f 93       	push	r24
     39c:	1f 93       	push	r17
     39e:	0f 93       	push	r16
     3a0:	de d7       	rcall	.+4028   	; 0x135e <sprintf>
	print_text(0, 2, msg_temp, 0);
     3a2:	20 e0       	ldi	r18, 0x00	; 0
     3a4:	a8 01       	movw	r20, r16
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	fb d2       	rcall	.+1526   	; 0x9a6 <print_text>
	
	sprintf(msg_temp, "%d", state_var_menu);
     3b0:	80 91 01 01 	lds	r24, 0x0101
     3b4:	8f 93       	push	r24
     3b6:	80 91 00 01 	lds	r24, 0x0100
     3ba:	8f 93       	push	r24
     3bc:	85 ea       	ldi	r24, 0xA5	; 165
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	1f 93       	push	r17
     3c6:	0f 93       	push	r16
     3c8:	ca d7       	rcall	.+3988   	; 0x135e <sprintf>
	print_text(0, 3, msg_temp, 0);
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	a8 01       	movw	r20, r16
     3ce:	63 e0       	ldi	r22, 0x03	; 3
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	80 e0       	ldi	r24, 0x00	; 0
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	e7 d2       	rcall	.+1486   	; 0x9a6 <print_text>
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61

}
     3e2:	64 96       	adiw	r28, 0x14	; 20
     3e4:	e4 e0       	ldi	r30, 0x04	; 4
     3e6:	a7 c7       	rjmp	.+3918   	; 0x1336 <__epilogue_restores__+0x1c>

000003e8 <is_timer_btn_alive>:
#define STATE_TIME_LAG 2
#define STATE_PERIOD 3
#define STATE_NUM_SHOT 4
#define STATE_RUN 5


     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	20 91 5c 02 	lds	r18, 0x025C
     3ee:	30 91 5d 02 	lds	r19, 0x025D
     3f2:	12 16       	cp	r1, r18
     3f4:	13 06       	cpc	r1, r19
     3f6:	0c f0       	brlt	.+2      	; 0x3fa <is_timer_btn_alive+0x12>
     3f8:	80 e0       	ldi	r24, 0x00	; 0
typedef struct {
	unsigned int var_set[5];
	int var_idx;
	unsigned int var_min;
	unsigned int var_max;
     3fa:	08 95       	ret

000003fc <kill_timer_btn>:
	unsigned int var_len;
	unsigned char var_open_end;

     3fc:	10 92 5d 02 	sts	0x025D, r1
     400:	10 92 5c 02 	sts	0x025C, r1
     404:	08 95       	ret

00000406 <install_timer_btn>:
} state_var_lagtime_t;

state_var_lagtime_t state_var_lagtime = {
	{0, 2, 5, 10}, 0, 0, 10, 4, 0
};
     406:	90 93 5f 02 	sts	0x025F, r25
     40a:	80 93 5e 02 	sts	0x025E, r24

     40e:	cb 01       	movw	r24, r22
     410:	6a e0       	ldi	r22, 0x0A	; 10
     412:	70 e0       	ldi	r23, 0x00	; 0
     414:	3f d7       	rcall	.+3710   	; 0x1294 <__udivmodhi4>
     416:	70 93 5d 02 	sts	0x025D, r23
     41a:	60 93 5c 02 	sts	0x025C, r22
     41e:	08 95       	ret

00000420 <init_clock>:
	unsigned int var_set[15];
	int var_idx;
	unsigned int var_min;
	unsigned int var_max;
	unsigned int var_len;
	unsigned char var_open_end;
     420:	8a ef       	ldi	r24, 0xFA	; 250
     422:	87 bd       	out	0x27, r24	; 39

     424:	84 b5       	in	r24, 0x24	; 36
     426:	82 60       	ori	r24, 0x02	; 2
     428:	84 bd       	out	0x24, r24	; 36
} state_var_period_t;
     42a:	85 b5       	in	r24, 0x25	; 37
     42c:	83 60       	ori	r24, 0x03	; 3
     42e:	85 bd       	out	0x25, r24	; 37

     430:	ee e6       	ldi	r30, 0x6E	; 110
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 60       	ori	r24, 0x02	; 2
     438:	80 83       	st	Z, r24
     43a:	08 95       	ret

0000043c <tic>:
state_var_period_t state_var_period = {
	{1, 2, 4, 5, 8, 10, 20, 30, 50, 60, 100, 120, 180, 200 }, 5, 1, 200, 14, 1
};


     43c:	80 91 68 02 	lds	r24, 0x0268
     440:	90 91 69 02 	lds	r25, 0x0269
     444:	90 93 67 02 	sts	0x0267, r25
     448:	80 93 66 02 	sts	0x0266, r24
     44c:	08 95       	ret

0000044e <get_tick_counter>:



unsigned int state_cur = STATE_MAIN;

// unsigned int state_var_num = 1;
     44e:	80 91 68 02 	lds	r24, 0x0268
     452:	90 91 69 02 	lds	r25, 0x0269
     456:	08 95       	ret

00000458 <get_tick_time>:
// unsigned int shutter_time_idx = 0;
// unsigned int period_idx = 0;
// unsigned int num_shot_idx = 0;



     458:	8a e0       	ldi	r24, 0x0A	; 10
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	08 95       	ret

0000045e <__vector_14>:

void sys_init(void)
{
     45e:	1f 92       	push	r1
     460:	0f 92       	push	r0
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	0f 92       	push	r0
     466:	11 24       	eor	r1, r1
     468:	2f 93       	push	r18
     46a:	3f 93       	push	r19
     46c:	4f 93       	push	r20
     46e:	5f 93       	push	r21
     470:	6f 93       	push	r22
     472:	7f 93       	push	r23
     474:	8f 93       	push	r24
     476:	9f 93       	push	r25
     478:	af 93       	push	r26
     47a:	bf 93       	push	r27
     47c:	ef 93       	push	r30
     47e:	ff 93       	push	r31
	_delay_ms(100);	
	init_encoder();	
     480:	80 91 64 02 	lds	r24, 0x0264
     484:	90 91 65 02 	lds	r25, 0x0265
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	65 e0       	ldi	r22, 0x05	; 5
     48c:	70 e0       	ldi	r23, 0x00	; 0
     48e:	02 d7       	rcall	.+3588   	; 0x1294 <__udivmodhi4>
     490:	90 93 65 02 	sts	0x0265, r25
     494:	80 93 64 02 	sts	0x0264, r24
	init_clock();
	init_oled();
     498:	89 2b       	or	r24, r25
     49a:	91 f5       	brne	.+100    	; 0x500 <__stack+0x1>
	
	tic();
     49c:	80 91 68 02 	lds	r24, 0x0268
     4a0:	90 91 69 02 	lds	r25, 0x0269
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	60 e1       	ldi	r22, 0x10	; 16
     4a8:	77 e2       	ldi	r23, 0x27	; 39
     4aa:	f4 d6       	rcall	.+3560   	; 0x1294 <__udivmodhi4>
     4ac:	90 93 69 02 	sts	0x0269, r25
     4b0:	80 93 68 02 	sts	0x0268, r24
	sei();
}
     4b4:	80 91 60 02 	lds	r24, 0x0260
     4b8:	90 91 61 02 	lds	r25, 0x0261
     4bc:	18 16       	cp	r1, r24
     4be:	19 06       	cpc	r1, r25
     4c0:	64 f4       	brge	.+24     	; 0x4da <__vector_14+0x7c>

     4c2:	01 97       	sbiw	r24, 0x01	; 1
     4c4:	90 93 61 02 	sts	0x0261, r25
     4c8:	80 93 60 02 	sts	0x0260, r24

     4cc:	89 2b       	or	r24, r25
     4ce:	29 f4       	brne	.+10     	; 0x4da <__vector_14+0x7c>


     4d0:	e0 91 62 02 	lds	r30, 0x0262
     4d4:	f0 91 63 02 	lds	r31, 0x0263
     4d8:	09 95       	icall


void test_func (void){

	char msg_temp[20]={0};
     4da:	80 91 5c 02 	lds	r24, 0x025C
     4de:	90 91 5d 02 	lds	r25, 0x025D
     4e2:	18 16       	cp	r1, r24
     4e4:	19 06       	cpc	r1, r25
     4e6:	64 f4       	brge	.+24     	; 0x500 <__stack+0x1>

     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	90 93 5d 02 	sts	0x025D, r25
     4ee:	80 93 5c 02 	sts	0x025C, r24

     4f2:	89 2b       	or	r24, r25
     4f4:	29 f4       	brne	.+10     	; 0x500 <__stack+0x1>
	// state_var_menu += get_enc_delta();
	// state_var_menu = ( state_var_menu +MENU_LV0_NUM -1 )%MENU_LV0_NUM + 1;
     4f6:	e0 91 5e 02 	lds	r30, 0x025E
     4fa:	f0 91 5f 02 	lds	r31, 0x025F
     4fe:	09 95       	icall
	// switch(state_var_menu){
	// 	case STATE_PERIOD:
	// 		sprintf(msg_temp, "<    Period    >");
	// 		break;
	// 	case STATE_TIME_LAG:
	// 		sprintf(msg_temp, "<   Lag Time   >");
     500:	ff 91       	pop	r31
     502:	ef 91       	pop	r30
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	0f 90       	pop	r0
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	0f 90       	pop	r0
     51e:	1f 90       	pop	r1
     520:	18 95       	reti

00000522 <sys_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     522:	2f ef       	ldi	r18, 0xFF	; 255
     524:	80 e7       	ldi	r24, 0x70	; 112
     526:	92 e0       	ldi	r25, 0x02	; 2
     528:	21 50       	subi	r18, 0x01	; 1
     52a:	80 40       	sbci	r24, 0x00	; 0
     52c:	90 40       	sbci	r25, 0x00	; 0
     52e:	e1 f7       	brne	.-8      	; 0x528 <sys_init+0x6>
     530:	00 c0       	rjmp	.+0      	; 0x532 <sys_init+0x10>
     532:	00 00       	nop


void sys_init(void)
{
	_delay_ms(100);	
	init_encoder();	
     534:	af d2       	rcall	.+1374   	; 0xa94 <init_encoder>
	init_clock();
     536:	74 df       	rcall	.-280    	; 0x420 <init_clock>
	init_oled();
     538:	11 d2       	rcall	.+1058   	; 0x95c <init_oled>
	
	tic();
     53a:	80 df       	rcall	.-256    	; 0x43c <tic>
	sei();
     53c:	78 94       	sei
     53e:	08 95       	ret

00000540 <state_num_job>:
	print_text(0, 3, msg_temp, 0);

}


state_num_job(){
     540:	a4 e1       	ldi	r26, 0x14	; 20
     542:	b0 e0       	ldi	r27, 0x00	; 0
     544:	e5 ea       	ldi	r30, 0xA5	; 165
     546:	f2 e0       	ldi	r31, 0x02	; 2
     548:	da c6       	rjmp	.+3508   	; 0x12fe <__prologue_saves__+0x1c>
	char msg_temp2[20] = {0};
     54a:	8e 01       	movw	r16, r28
     54c:	0f 5f       	subi	r16, 0xFF	; 255
     54e:	1f 4f       	sbci	r17, 0xFF	; 255
     550:	84 e1       	ldi	r24, 0x14	; 20
     552:	f8 01       	movw	r30, r16
     554:	11 92       	st	Z+, r1
     556:	8a 95       	dec	r24
     558:	e9 f7       	brne	.-6      	; 0x554 <state_num_job+0x14>

	state_var_num.var_idx += get_enc_delta();
     55a:	8a d2       	rcall	.+1300   	; 0xa70 <get_enc_delta>
     55c:	20 91 1c 01 	lds	r18, 0x011C
     560:	30 91 1d 01 	lds	r19, 0x011D
     564:	82 0f       	add	r24, r18
     566:	93 1f       	adc	r25, r19
     568:	90 93 1d 01 	sts	0x011D, r25
     56c:	80 93 1c 01 	sts	0x011C, r24
	
	if (state_var_num.var_idx <= 0) state_var_num.var_idx = 0;
     570:	18 16       	cp	r1, r24
     572:	19 06       	cpc	r1, r25
     574:	2c f0       	brlt	.+10     	; 0x580 <state_num_job+0x40>
     576:	10 92 1d 01 	sts	0x011D, r1
     57a:	10 92 1c 01 	sts	0x011C, r1
     57e:	0d c0       	rjmp	.+26     	; 0x59a <state_num_job+0x5a>
	else if (state_var_num.var_idx >= state_var_num.var_len){
     580:	20 91 22 01 	lds	r18, 0x0122
     584:	30 91 23 01 	lds	r19, 0x0123
     588:	82 17       	cp	r24, r18
     58a:	93 07       	cpc	r25, r19
     58c:	30 f0       	brcs	.+12     	; 0x59a <state_num_job+0x5a>
		state_var_num.var_idx = state_var_num.var_len -1;
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	31 09       	sbc	r19, r1
     592:	30 93 1d 01 	sts	0x011D, r19
     596:	20 93 1c 01 	sts	0x011C, r18
	}

	sprintf(msg_temp2, "   :%6d", state_var_num.var_set[state_var_num.var_idx]);
     59a:	e0 91 1c 01 	lds	r30, 0x011C
     59e:	f0 91 1d 01 	lds	r31, 0x011D
     5a2:	ee 0f       	add	r30, r30
     5a4:	ff 1f       	adc	r31, r31
     5a6:	ee 5f       	subi	r30, 0xFE	; 254
     5a8:	fe 4f       	sbci	r31, 0xFE	; 254
     5aa:	81 81       	ldd	r24, Z+1	; 0x01
     5ac:	8f 93       	push	r24
     5ae:	80 81       	ld	r24, Z
     5b0:	8f 93       	push	r24
     5b2:	88 ea       	ldi	r24, 0xA8	; 168
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	1f 93       	push	r17
     5bc:	0f 93       	push	r16
     5be:	cf d6       	rcall	.+3486   	; 0x135e <sprintf>
	print_text(0, 1, msg_temp2, OLED_PRINT_BLINK);
     5c0:	22 e0       	ldi	r18, 0x02	; 2
     5c2:	a8 01       	movw	r20, r16
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	70 e0       	ldi	r23, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	ec d1       	rcall	.+984    	; 0x9a6 <print_text>
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0


}
     5da:	64 96       	adiw	r28, 0x14	; 20
     5dc:	e4 e0       	ldi	r30, 0x04	; 4
     5de:	ab c6       	rjmp	.+3414   	; 0x1336 <__epilogue_restores__+0x1c>

000005e0 <state_shutter_job>:

state_shutter_job(){
     5e0:	a4 e1       	ldi	r26, 0x14	; 20
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e5 ef       	ldi	r30, 0xF5	; 245
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	8a c6       	rjmp	.+3348   	; 0x12fe <__prologue_saves__+0x1c>
	char msg_temp2[20] = {0};
     5ea:	8e 01       	movw	r16, r28
     5ec:	0f 5f       	subi	r16, 0xFF	; 255
     5ee:	1f 4f       	sbci	r17, 0xFF	; 255
     5f0:	84 e1       	ldi	r24, 0x14	; 20
     5f2:	f8 01       	movw	r30, r16
     5f4:	11 92       	st	Z+, r1
     5f6:	8a 95       	dec	r24
     5f8:	e9 f7       	brne	.-6      	; 0x5f4 <state_shutter_job+0x14>

	state_var_shutter.var_idx += get_enc_delta();
     5fa:	3a d2       	rcall	.+1140   	; 0xa70 <get_enc_delta>
     5fc:	20 91 7e 01 	lds	r18, 0x017E
     600:	30 91 7f 01 	lds	r19, 0x017F
     604:	82 0f       	add	r24, r18
     606:	93 1f       	adc	r25, r19
     608:	90 93 7f 01 	sts	0x017F, r25
     60c:	80 93 7e 01 	sts	0x017E, r24
	
	if (state_var_shutter.var_idx <= 0) state_var_shutter.var_idx = 0;
     610:	18 16       	cp	r1, r24
     612:	19 06       	cpc	r1, r25
     614:	2c f0       	brlt	.+10     	; 0x620 <state_shutter_job+0x40>
     616:	10 92 7f 01 	sts	0x017F, r1
     61a:	10 92 7e 01 	sts	0x017E, r1
     61e:	0d c0       	rjmp	.+26     	; 0x63a <state_shutter_job+0x5a>
	else if (state_var_shutter.var_idx >= state_var_shutter.var_len){
     620:	20 91 84 01 	lds	r18, 0x0184
     624:	30 91 85 01 	lds	r19, 0x0185
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	30 f0       	brcs	.+12     	; 0x63a <state_shutter_job+0x5a>
		state_var_shutter.var_idx = state_var_shutter.var_len -1;
     62e:	21 50       	subi	r18, 0x01	; 1
     630:	31 09       	sbc	r19, r1
     632:	30 93 7f 01 	sts	0x017F, r19
     636:	20 93 7e 01 	sts	0x017E, r18
	}

	sprintf(msg_temp2, "   :%6d", state_var_shutter.var_set[state_var_shutter.var_idx]);
     63a:	e0 91 7e 01 	lds	r30, 0x017E
     63e:	f0 91 7f 01 	lds	r31, 0x017F
     642:	ee 0f       	add	r30, r30
     644:	ff 1f       	adc	r31, r31
     646:	e4 5b       	subi	r30, 0xB4	; 180
     648:	fe 4f       	sbci	r31, 0xFE	; 254
     64a:	81 81       	ldd	r24, Z+1	; 0x01
     64c:	8f 93       	push	r24
     64e:	80 81       	ld	r24, Z
     650:	8f 93       	push	r24
     652:	88 ea       	ldi	r24, 0xA8	; 168
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	1f 93       	push	r17
     65c:	0f 93       	push	r16
     65e:	7f d6       	rcall	.+3326   	; 0x135e <sprintf>
	print_text(0, 1, msg_temp2, OLED_PRINT_BLINK);
     660:	22 e0       	ldi	r18, 0x02	; 2
     662:	a8 01       	movw	r20, r16
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	9c d1       	rcall	.+824    	; 0x9a6 <print_text>
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0

}
     67a:	64 96       	adiw	r28, 0x14	; 20
     67c:	e4 e0       	ldi	r30, 0x04	; 4
     67e:	5b c6       	rjmp	.+3254   	; 0x1336 <__epilogue_restores__+0x1c>

00000680 <state_period_job>:

state_period_job(){
     680:	a4 e1       	ldi	r26, 0x14	; 20
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	e5 e4       	ldi	r30, 0x45	; 69
     686:	f3 e0       	ldi	r31, 0x03	; 3
     688:	3a c6       	rjmp	.+3188   	; 0x12fe <__prologue_saves__+0x1c>
	char msg_temp2[20] = {0};
     68a:	8e 01       	movw	r16, r28
     68c:	0f 5f       	subi	r16, 0xFF	; 255
     68e:	1f 4f       	sbci	r17, 0xFF	; 255
     690:	84 e1       	ldi	r24, 0x14	; 20
     692:	f8 01       	movw	r30, r16
     694:	11 92       	st	Z+, r1
     696:	8a 95       	dec	r24
     698:	e9 f7       	brne	.-6      	; 0x694 <state_period_job+0x14>

	state_var_period.var_idx += get_enc_delta();
     69a:	ea d1       	rcall	.+980    	; 0xa70 <get_enc_delta>
     69c:	20 91 43 01 	lds	r18, 0x0143
     6a0:	30 91 44 01 	lds	r19, 0x0144
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	90 93 44 01 	sts	0x0144, r25
     6ac:	80 93 43 01 	sts	0x0143, r24
	
	if (state_var_period.var_idx <= 0) state_var_period.var_idx = 0;
     6b0:	18 16       	cp	r1, r24
     6b2:	19 06       	cpc	r1, r25
     6b4:	2c f0       	brlt	.+10     	; 0x6c0 <state_period_job+0x40>
     6b6:	10 92 44 01 	sts	0x0144, r1
     6ba:	10 92 43 01 	sts	0x0143, r1
     6be:	0d c0       	rjmp	.+26     	; 0x6da <state_period_job+0x5a>
	else if (state_var_period.var_idx >= state_var_period.var_len){
     6c0:	20 91 49 01 	lds	r18, 0x0149
     6c4:	30 91 4a 01 	lds	r19, 0x014A
     6c8:	82 17       	cp	r24, r18
     6ca:	93 07       	cpc	r25, r19
     6cc:	30 f0       	brcs	.+12     	; 0x6da <state_period_job+0x5a>
		state_var_period.var_idx = state_var_period.var_len -1;
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	31 09       	sbc	r19, r1
     6d2:	30 93 44 01 	sts	0x0144, r19
     6d6:	20 93 43 01 	sts	0x0143, r18
	}

	sprintf(msg_temp2, "   :%6d", state_var_period.var_set[state_var_period.var_idx]);
     6da:	e0 91 43 01 	lds	r30, 0x0143
     6de:	f0 91 44 01 	lds	r31, 0x0144
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	eb 5d       	subi	r30, 0xDB	; 219
     6e8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ea:	81 81       	ldd	r24, Z+1	; 0x01
     6ec:	8f 93       	push	r24
     6ee:	80 81       	ld	r24, Z
     6f0:	8f 93       	push	r24
     6f2:	88 ea       	ldi	r24, 0xA8	; 168
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	1f 93       	push	r17
     6fc:	0f 93       	push	r16
     6fe:	2f d6       	rcall	.+3166   	; 0x135e <sprintf>
	print_text(0, 1, msg_temp2, OLED_PRINT_BLINK);
     700:	22 e0       	ldi	r18, 0x02	; 2
     702:	a8 01       	movw	r20, r16
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	4c d1       	rcall	.+664    	; 0x9a6 <print_text>
     70e:	0f 90       	pop	r0
     710:	0f 90       	pop	r0
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0


}
     71a:	64 96       	adiw	r28, 0x14	; 20
     71c:	e4 e0       	ldi	r30, 0x04	; 4
     71e:	0b c6       	rjmp	.+3094   	; 0x1336 <__epilogue_restores__+0x1c>

00000720 <state_timelag_job>:

state_timelag_job(){
     720:	a4 e1       	ldi	r26, 0x14	; 20
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e5 e9       	ldi	r30, 0x95	; 149
     726:	f3 e0       	ldi	r31, 0x03	; 3
     728:	ea c5       	rjmp	.+3028   	; 0x12fe <__prologue_saves__+0x1c>
	char msg_temp2[20] = {0};
     72a:	8e 01       	movw	r16, r28
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	84 e1       	ldi	r24, 0x14	; 20
     732:	f8 01       	movw	r30, r16
     734:	11 92       	st	Z+, r1
     736:	8a 95       	dec	r24
     738:	e9 f7       	brne	.-6      	; 0x734 <state_timelag_job+0x14>

	state_var_lagtime.var_idx += get_enc_delta();
     73a:	9a d1       	rcall	.+820    	; 0xa70 <get_enc_delta>
     73c:	20 91 91 01 	lds	r18, 0x0191
     740:	30 91 92 01 	lds	r19, 0x0192
     744:	82 0f       	add	r24, r18
     746:	93 1f       	adc	r25, r19
     748:	90 93 92 01 	sts	0x0192, r25
     74c:	80 93 91 01 	sts	0x0191, r24
	
	if (state_var_lagtime.var_idx <= 0) state_var_lagtime.var_idx = 0;
     750:	18 16       	cp	r1, r24
     752:	19 06       	cpc	r1, r25
     754:	2c f0       	brlt	.+10     	; 0x760 <state_timelag_job+0x40>
     756:	10 92 92 01 	sts	0x0192, r1
     75a:	10 92 91 01 	sts	0x0191, r1
     75e:	0d c0       	rjmp	.+26     	; 0x77a <state_timelag_job+0x5a>
	else if (state_var_lagtime.var_idx >= state_var_lagtime.var_len){
     760:	20 91 97 01 	lds	r18, 0x0197
     764:	30 91 98 01 	lds	r19, 0x0198
     768:	82 17       	cp	r24, r18
     76a:	93 07       	cpc	r25, r19
     76c:	30 f0       	brcs	.+12     	; 0x77a <state_timelag_job+0x5a>
		state_var_lagtime.var_idx = state_var_lagtime.var_len -1;
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	31 09       	sbc	r19, r1
     772:	30 93 92 01 	sts	0x0192, r19
     776:	20 93 91 01 	sts	0x0191, r18
	}

	sprintf(msg_temp2, "   :%6d", state_var_lagtime.var_set[state_var_lagtime.var_idx]);
     77a:	e0 91 91 01 	lds	r30, 0x0191
     77e:	f0 91 92 01 	lds	r31, 0x0192
     782:	ee 0f       	add	r30, r30
     784:	ff 1f       	adc	r31, r31
     786:	e9 57       	subi	r30, 0x79	; 121
     788:	fe 4f       	sbci	r31, 0xFE	; 254
     78a:	81 81       	ldd	r24, Z+1	; 0x01
     78c:	8f 93       	push	r24
     78e:	80 81       	ld	r24, Z
     790:	8f 93       	push	r24
     792:	88 ea       	ldi	r24, 0xA8	; 168
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9f 93       	push	r25
     798:	8f 93       	push	r24
     79a:	1f 93       	push	r17
     79c:	0f 93       	push	r16
     79e:	df d5       	rcall	.+3006   	; 0x135e <sprintf>
	print_text(0, 1, msg_temp2, OLED_PRINT_BLINK);
     7a0:	22 e0       	ldi	r18, 0x02	; 2
     7a2:	a8 01       	movw	r20, r16
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	70 e0       	ldi	r23, 0x00	; 0
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	fc d0       	rcall	.+504    	; 0x9a6 <print_text>
     7ae:	0f 90       	pop	r0
     7b0:	0f 90       	pop	r0
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0


}
     7ba:	64 96       	adiw	r28, 0x14	; 20
     7bc:	e4 e0       	ldi	r30, 0x04	; 4
     7be:	bb c5       	rjmp	.+2934   	; 0x1336 <__epilogue_restores__+0x1c>

000007c0 <state_main_job>:
state_run_job(){


}

state_main_job(){
     7c0:	a8 e2       	ldi	r26, 0x28	; 40
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	e5 ee       	ldi	r30, 0xE5	; 229
     7c6:	f3 e0       	ldi	r31, 0x03	; 3
     7c8:	9a c5       	rjmp	.+2868   	; 0x12fe <__prologue_saves__+0x1c>

	char msg_temp1[20], msg_temp2[20] = {0};
     7ca:	8e 01       	movw	r16, r28
     7cc:	0f 5f       	subi	r16, 0xFF	; 255
     7ce:	1f 4f       	sbci	r17, 0xFF	; 255
     7d0:	84 e1       	ldi	r24, 0x14	; 20
     7d2:	f8 01       	movw	r30, r16
     7d4:	11 92       	st	Z+, r1
     7d6:	8a 95       	dec	r24
     7d8:	e9 f7       	brne	.-6      	; 0x7d4 <state_main_job+0x14>

	state_var_menu += get_enc_delta();
     7da:	4a d1       	rcall	.+660    	; 0xa70 <get_enc_delta>
     7dc:	20 91 00 01 	lds	r18, 0x0100
     7e0:	30 91 01 01 	lds	r19, 0x0101
     7e4:	2d 5f       	subi	r18, 0xFD	; 253
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
	state_var_menu = ( state_var_menu +state_var_menu_NUM -1 )%state_var_menu_NUM + 1;
     7e8:	82 0f       	add	r24, r18
     7ea:	93 1f       	adc	r25, r19
     7ec:	83 70       	andi	r24, 0x03	; 3
     7ee:	99 27       	eor	r25, r25
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	90 93 01 01 	sts	0x0101, r25
     7f6:	80 93 00 01 	sts	0x0100, r24

	switch(state_var_menu){
     7fa:	83 30       	cpi	r24, 0x03	; 3
     7fc:	91 05       	cpc	r25, r1
     7fe:	99 f0       	breq	.+38     	; 0x826 <state_main_job+0x66>
     800:	84 30       	cpi	r24, 0x04	; 4
     802:	91 05       	cpc	r25, r1
     804:	f1 f0       	breq	.+60     	; 0x842 <state_main_job+0x82>
     806:	02 97       	sbiw	r24, 0x02	; 2
     808:	51 f5       	brne	.+84     	; 0x85e <state_main_job+0x9e>
		case STATE_PERIOD:
			sprintf(msg_temp1, "<    Period    >");
			sprintf(msg_temp2, "   :%6d", state_var_period.var_set[state_var_period.var_idx]);
			break;
		case STATE_TIME_LAG:
			sprintf(msg_temp1, "<   Lag Time   >");
     80a:	61 ec       	ldi	r22, 0xC1	; 193
     80c:	71 e0       	ldi	r23, 0x01	; 1
     80e:	ce 01       	movw	r24, r28
     810:	45 96       	adiw	r24, 0x15	; 21
     812:	9e d5       	rcall	.+2876   	; 0x1350 <strcpy>
			sprintf(msg_temp2, "   :%6d", state_var_lagtime.var_set[state_var_lagtime.var_idx]);
     814:	e0 91 91 01 	lds	r30, 0x0191
     818:	f0 91 92 01 	lds	r31, 0x0192
     81c:	ee 0f       	add	r30, r30
     81e:	ff 1f       	adc	r31, r31
     820:	e9 57       	subi	r30, 0x79	; 121
     822:	fe 4f       	sbci	r31, 0xFE	; 254
     824:	29 c0       	rjmp	.+82     	; 0x878 <state_main_job+0xb8>
	state_var_menu += get_enc_delta();
	state_var_menu = ( state_var_menu +state_var_menu_NUM -1 )%state_var_menu_NUM + 1;

	switch(state_var_menu){
		case STATE_PERIOD:
			sprintf(msg_temp1, "<    Period    >");
     826:	60 eb       	ldi	r22, 0xB0	; 176
     828:	71 e0       	ldi	r23, 0x01	; 1
     82a:	ce 01       	movw	r24, r28
     82c:	45 96       	adiw	r24, 0x15	; 21
     82e:	90 d5       	rcall	.+2848   	; 0x1350 <strcpy>
			sprintf(msg_temp2, "   :%6d", state_var_period.var_set[state_var_period.var_idx]);
     830:	e0 91 43 01 	lds	r30, 0x0143
     834:	f0 91 44 01 	lds	r31, 0x0144
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	eb 5d       	subi	r30, 0xDB	; 219
     83e:	fe 4f       	sbci	r31, 0xFE	; 254
     840:	1b c0       	rjmp	.+54     	; 0x878 <state_main_job+0xb8>
		case STATE_TIME_LAG:
			sprintf(msg_temp1, "<   Lag Time   >");
			sprintf(msg_temp2, "   :%6d", state_var_lagtime.var_set[state_var_lagtime.var_idx]);
			break;
		case STATE_NUM_SHOT:
			sprintf(msg_temp1, "< Num of Shots >");
     842:	62 ed       	ldi	r22, 0xD2	; 210
     844:	71 e0       	ldi	r23, 0x01	; 1
     846:	ce 01       	movw	r24, r28
     848:	45 96       	adiw	r24, 0x15	; 21
     84a:	82 d5       	rcall	.+2820   	; 0x1350 <strcpy>
			sprintf(msg_temp2, "   :%6d", state_var_num.var_set[state_var_num.var_idx]);
     84c:	e0 91 1c 01 	lds	r30, 0x011C
     850:	f0 91 1d 01 	lds	r31, 0x011D
     854:	ee 0f       	add	r30, r30
     856:	ff 1f       	adc	r31, r31
     858:	ee 5f       	subi	r30, 0xFE	; 254
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	0d c0       	rjmp	.+26     	; 0x878 <state_main_job+0xb8>
			break;
		default:
			sprintf(msg_temp1, "< Shutter Time >");
     85e:	63 ee       	ldi	r22, 0xE3	; 227
     860:	71 e0       	ldi	r23, 0x01	; 1
     862:	ce 01       	movw	r24, r28
     864:	45 96       	adiw	r24, 0x15	; 21
     866:	74 d5       	rcall	.+2792   	; 0x1350 <strcpy>
			sprintf(msg_temp2, "   :%6d", state_var_shutter.var_set[state_var_shutter.var_idx]);
     868:	e0 91 7e 01 	lds	r30, 0x017E
     86c:	f0 91 7f 01 	lds	r31, 0x017F
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	e4 5b       	subi	r30, 0xB4	; 180
     876:	fe 4f       	sbci	r31, 0xFE	; 254
     878:	81 81       	ldd	r24, Z+1	; 0x01
     87a:	8f 93       	push	r24
     87c:	80 81       	ld	r24, Z
     87e:	8f 93       	push	r24
     880:	88 ea       	ldi	r24, 0xA8	; 168
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	9f 93       	push	r25
     886:	8f 93       	push	r24
     888:	1f 93       	push	r17
     88a:	0f 93       	push	r16
     88c:	68 d5       	rcall	.+2768   	; 0x135e <sprintf>
			break;
     88e:	0f 90       	pop	r0
     890:	0f 90       	pop	r0
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	0f 90       	pop	r0
     898:	0f 90       	pop	r0
	}
	print_text(0, 0, msg_temp1, 0);
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	ae 01       	movw	r20, r28
     89e:	4b 5e       	subi	r20, 0xEB	; 235
     8a0:	5f 4f       	sbci	r21, 0xFF	; 255
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	7d d0       	rcall	.+250    	; 0x9a6 <print_text>
	print_text(0, 1, msg_temp2, 0);
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	a8 01       	movw	r20, r16
     8b0:	61 e0       	ldi	r22, 0x01	; 1
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	76 d0       	rcall	.+236    	; 0x9a6 <print_text>

}
     8ba:	a8 96       	adiw	r28, 0x28	; 40
     8bc:	e4 e0       	ldi	r30, 0x04	; 4
     8be:	3b c5       	rjmp	.+2678   	; 0x1336 <__epilogue_restores__+0x1c>

000008c0 <main>:


int main(void)
{
	sys_init();
     8c0:	30 de       	rcall	.-928    	; 0x522 <sys_init>
	install_draw_function(test_func);
     8c2:	87 eb       	ldi	r24, 0xB7	; 183
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	45 d0       	rcall	.+138    	; 0x952 <install_draw_function>
			default:
				state_main_job();
				if (get_status_btn_click()) {
					state_cur = state_var_menu;
				} else if (get_status_btn_hold()) {
					state_cur = STATE_RUN;
     8c8:	c5 e0       	ldi	r28, 0x05	; 5
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
	sys_init();
	install_draw_function(test_func);

	for(;;){  

		switch(state_cur){
     8cc:	80 91 5a 02 	lds	r24, 0x025A
     8d0:	90 91 5b 02 	lds	r25, 0x025B
     8d4:	83 30       	cpi	r24, 0x03	; 3
     8d6:	91 05       	cpc	r25, r1
     8d8:	c1 f0       	breq	.+48     	; 0x90a <main+0x4a>
     8da:	38 f4       	brcc	.+14     	; 0x8ea <main+0x2a>
     8dc:	81 30       	cpi	r24, 0x01	; 1
     8de:	91 05       	cpc	r25, r1
     8e0:	b1 f0       	breq	.+44     	; 0x90e <main+0x4e>
     8e2:	02 97       	sbiw	r24, 0x02	; 2
     8e4:	01 f5       	brne	.+64     	; 0x926 <main+0x66>
				get_status_btn_hold();
				//get_enc_delta();
				break;
			
			case STATE_TIME_LAG:
				state_timelag_job();
     8e6:	1c df       	rcall	.-456    	; 0x720 <state_timelag_job>
     8e8:	07 c0       	rjmp	.+14     	; 0x8f8 <main+0x38>
	sys_init();
	install_draw_function(test_func);

	for(;;){  

		switch(state_cur){
     8ea:	84 30       	cpi	r24, 0x04	; 4
     8ec:	91 05       	cpc	r25, r1
     8ee:	19 f0       	breq	.+6      	; 0x8f6 <main+0x36>
     8f0:	05 97       	sbiw	r24, 0x05	; 5
     8f2:	79 f0       	breq	.+30     	; 0x912 <main+0x52>
     8f4:	18 c0       	rjmp	.+48     	; 0x926 <main+0x66>

			case STATE_NUM_SHOT:
				state_num_job();
     8f6:	24 de       	rcall	.-952    	; 0x540 <state_num_job>
				if (get_status_btn_click()) state_cur = STATE_MAIN;
     8f8:	b1 d0       	rcall	.+354    	; 0xa5c <get_status_btn_click>
     8fa:	88 23       	and	r24, r24
     8fc:	21 f0       	breq	.+8      	; 0x906 <main+0x46>
     8fe:	10 92 5b 02 	sts	0x025B, r1
     902:	10 92 5a 02 	sts	0x025A, r1
				get_status_btn_hold();
     906:	af d0       	rcall	.+350    	; 0xa66 <get_status_btn_hold>
				
				break;
     908:	22 c0       	rjmp	.+68     	; 0x94e <main+0x8e>

			case STATE_PERIOD:
				state_period_job();
     90a:	ba de       	rcall	.-652    	; 0x680 <state_period_job>
     90c:	f5 cf       	rjmp	.-22     	; 0x8f8 <main+0x38>
				get_status_btn_hold();
				//get_enc_delta();
				break;
			
			case STATE_SHUTTER_SPEED:
				state_shutter_job();
     90e:	68 de       	rcall	.-816    	; 0x5e0 <state_shutter_job>
     910:	f3 cf       	rjmp	.-26     	; 0x8f8 <main+0x38>
				//get_enc_delta();
				break;
			
			case STATE_RUN:
				state_run_job();
				if (get_status_btn_hold()) state_cur = STATE_MAIN;
     912:	a9 d0       	rcall	.+338    	; 0xa66 <get_status_btn_hold>
     914:	88 23       	and	r24, r24
     916:	21 f0       	breq	.+8      	; 0x920 <main+0x60>
     918:	10 92 5b 02 	sts	0x025B, r1
     91c:	10 92 5a 02 	sts	0x025A, r1
				get_status_btn_hold();
     920:	a2 d0       	rcall	.+324    	; 0xa66 <get_status_btn_hold>
				get_enc_delta();
     922:	a6 d0       	rcall	.+332    	; 0xa70 <get_enc_delta>
				break;		
     924:	14 c0       	rjmp	.+40     	; 0x94e <main+0x8e>
			
			default:
				state_main_job();
     926:	4c df       	rcall	.-360    	; 0x7c0 <state_main_job>
				if (get_status_btn_click()) {
     928:	99 d0       	rcall	.+306    	; 0xa5c <get_status_btn_click>
     92a:	88 23       	and	r24, r24
     92c:	49 f0       	breq	.+18     	; 0x940 <main+0x80>
					state_cur = state_var_menu;
     92e:	80 91 00 01 	lds	r24, 0x0100
     932:	90 91 01 01 	lds	r25, 0x0101
     936:	90 93 5b 02 	sts	0x025B, r25
     93a:	80 93 5a 02 	sts	0x025A, r24
     93e:	07 c0       	rjmp	.+14     	; 0x94e <main+0x8e>
				} else if (get_status_btn_hold()) {
     940:	92 d0       	rcall	.+292    	; 0xa66 <get_status_btn_hold>
     942:	88 23       	and	r24, r24
     944:	21 f0       	breq	.+8      	; 0x94e <main+0x8e>
					state_cur = STATE_RUN;
     946:	d0 93 5b 02 	sts	0x025B, r29
     94a:	c0 93 5a 02 	sts	0x025A, r28
				}
		}

		render_oled();
     94e:	25 d0       	rcall	.+74     	; 0x99a <render_oled>

	}
     950:	bd cf       	rjmp	.-134    	; 0x8cc <main+0xc>

00000952 <install_draw_function>:

static unsigned int blink_timestamp_tick = 0;
static unsigned char blink_flag = 0;

void install_draw_function(void (*fct)(void)){
	draw_fct = fct;
     952:	90 93 6e 02 	sts	0x026E, r25
     956:	80 93 6d 02 	sts	0x026D, r24
     95a:	08 95       	ret

0000095c <init_oled>:

}

void init_oled(void){
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17

#if OLED_USE_COMPACT_LIBRARY

	//u8x8_Setup(&u8x8, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_i2c, u8x8_byte_sw_i2c, u8x8_gpio_and_delay_avr);	
	u8x8_Setup(&u8x8, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_i2c, u8x8_byte_avr_hw_i2c, u8x8_gpio_and_delay_avr);
     960:	05 e1       	ldi	r16, 0x15	; 21
     962:	16 e0       	ldi	r17, 0x06	; 6
     964:	22 ed       	ldi	r18, 0xD2	; 210
     966:	35 e0       	ldi	r19, 0x05	; 5
     968:	4b e6       	ldi	r20, 0x6B	; 107
     96a:	57 e0       	ldi	r21, 0x07	; 7
     96c:	66 e7       	ldi	r22, 0x76	; 118
     96e:	78 e0       	ldi	r23, 0x08	; 8
     970:	8f e6       	ldi	r24, 0x6F	; 111
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	49 d4       	rcall	.+2194   	; 0x1208 <u8x8_Setup>
	
	u8x8_InitDisplay(&u8x8);
     976:	8f e6       	ldi	r24, 0x6F	; 111
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	5a d3       	rcall	.+1716   	; 0x1030 <u8x8_InitDisplay>
	u8x8_ClearDisplay(&u8x8);
     97c:	8f e6       	ldi	r24, 0x6F	; 111
     97e:	92 e0       	ldi	r25, 0x02	; 2
     980:	a4 d3       	rcall	.+1864   	; 0x10ca <u8x8_ClearDisplay>
	u8x8_SetPowerSave(&u8x8, 0);	
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	8f e6       	ldi	r24, 0x6F	; 111
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	5e d3       	rcall	.+1724   	; 0x1046 <u8x8_SetPowerSave>

	u8x8_SetFont(&u8x8, OLED_FONT);
     98a:	64 e3       	ldi	r22, 0x34	; 52
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	8f e6       	ldi	r24, 0x6F	; 111
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	c2 d1       	rcall	.+900    	; 0xd18 <u8x8_SetFont>
	u8g2_SetFont(&u8g2, OLED_FONT);

#endif


}
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	08 95       	ret

0000099a <render_oled>:


void render_oled(void){

#if OLED_USE_COMPACT_LIBRARY
	draw_fct();
     99a:	e0 91 6d 02 	lds	r30, 0x026D
     99e:	f0 91 6e 02 	lds	r31, 0x026E
     9a2:	09 95       	icall
     9a4:	08 95       	ret

000009a6 <print_text>:
}
unsigned int get_value2(){
	return (unsigned int)(get_tick_counter() + CLOCK_COUNTER_MAX - blink_timestamp_tick)%CLOCK_COUNTER_MAX ;
}

void print_text(int x, int y, char *msg, unsigned char flag){
     9a6:	a0 e0       	ldi	r26, 0x00	; 0
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	e8 ed       	ldi	r30, 0xD8	; 216
     9ac:	f4 e0       	ldi	r31, 0x04	; 4
     9ae:	a3 c4       	rjmp	.+2374   	; 0x12f6 <__prologue_saves__+0x14>
     9b0:	f8 2e       	mov	r15, r24
     9b2:	e6 2e       	mov	r14, r22
     9b4:	8a 01       	movw	r16, r20
     9b6:	c2 2f       	mov	r28, r18

	unsigned char offset = 0;

	if((get_tick_counter() + CLOCK_COUNTER_MAX - blink_timestamp_tick)%CLOCK_COUNTER_MAX >= (OLED_BLINK_INTERVAL_MS/get_tick_time())){
     9b8:	4a dd       	rcall	.-1388   	; 0x44e <get_tick_counter>
     9ba:	60 e1       	ldi	r22, 0x10	; 16
     9bc:	77 e2       	ldi	r23, 0x27	; 39
     9be:	40 91 6b 02 	lds	r20, 0x026B
     9c2:	50 91 6c 02 	lds	r21, 0x026C
     9c6:	fb 01       	movw	r30, r22
     9c8:	e4 1b       	sub	r30, r20
     9ca:	f5 0b       	sbc	r31, r21
     9cc:	8e 0f       	add	r24, r30
     9ce:	9f 1f       	adc	r25, r31
     9d0:	61 d4       	rcall	.+2242   	; 0x1294 <__udivmodhi4>
     9d2:	6c 01       	movw	r12, r24
     9d4:	41 dd       	rcall	.-1406   	; 0x458 <get_tick_time>
     9d6:	bc 01       	movw	r22, r24
     9d8:	8a ef       	ldi	r24, 0xFA	; 250
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	5b d4       	rcall	.+2230   	; 0x1294 <__udivmodhi4>
     9de:	c6 16       	cp	r12, r22
     9e0:	d7 06       	cpc	r13, r23
     9e2:	58 f0       	brcs	.+22     	; 0x9fa <print_text+0x54>
		blink_timestamp_tick = get_tick_counter();
     9e4:	34 dd       	rcall	.-1432   	; 0x44e <get_tick_counter>
     9e6:	90 93 6c 02 	sts	0x026C, r25
     9ea:	80 93 6b 02 	sts	0x026B, r24
		blink_flag ^= (unsigned char)1;
     9ee:	80 91 6a 02 	lds	r24, 0x026A
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	98 27       	eor	r25, r24
     9f6:	90 93 6a 02 	sts	0x026A, r25
	}


	if ((flag & OLED_PRINT_BLINK) && blink_flag){
     9fa:	c1 fd       	sbrc	r28, 1
     9fc:	08 c0       	rjmp	.+16     	; 0xa0e <print_text+0x68>
		}
	}


#if OLED_USE_COMPACT_LIBRARY
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 1);
     9fe:	dc 2f       	mov	r29, r28
     a00:	d1 70       	andi	r29, 0x01	; 1
     a02:	c0 ff       	sbrs	r28, 0
     a04:	13 c0       	rjmp	.+38     	; 0xa2c <print_text+0x86>
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	80 93 80 02 	sts	0x0280, r24
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <print_text+0x86>
		blink_timestamp_tick = get_tick_counter();
		blink_flag ^= (unsigned char)1;
	}


	if ((flag & OLED_PRINT_BLINK) && blink_flag){
     a0e:	80 91 6a 02 	lds	r24, 0x026A
     a12:	88 23       	and	r24, r24
     a14:	a1 f3       	breq	.-24     	; 0x9fe <print_text+0x58>
     a16:	90 e0       	ldi	r25, 0x00	; 0
		while(*(msg+offset) !=0){
			*(msg+offset)= ' ';
     a18:	20 e2       	ldi	r18, 0x20	; 32
		blink_flag ^= (unsigned char)1;
	}


	if ((flag & OLED_PRINT_BLINK) && blink_flag){
		while(*(msg+offset) !=0){
     a1a:	f8 01       	movw	r30, r16
     a1c:	e9 0f       	add	r30, r25
     a1e:	f1 1d       	adc	r31, r1
     a20:	80 81       	ld	r24, Z
     a22:	88 23       	and	r24, r24
     a24:	61 f3       	breq	.-40     	; 0x9fe <print_text+0x58>
			*(msg+offset)= ' ';
     a26:	20 83       	st	Z, r18
			offset++;
     a28:	9f 5f       	subi	r25, 0xFF	; 255
     a2a:	f7 cf       	rjmp	.-18     	; 0xa1a <print_text+0x74>
	}


#if OLED_USE_COMPACT_LIBRARY
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 1);
	u8x8_DrawString(&u8x8, x, y, msg);
     a2c:	98 01       	movw	r18, r16
     a2e:	4e 2d       	mov	r20, r14
     a30:	6f 2d       	mov	r22, r15
     a32:	8f e6       	ldi	r24, 0x6F	; 111
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	b3 d1       	rcall	.+870    	; 0xd9e <u8x8_DrawString>
	if (flag & OLED_PRINT_INVERT) u8x8_SetInverseFont(&u8x8, 0);
     a38:	d1 11       	cpse	r29, r1
     a3a:	10 92 80 02 	sts	0x0280, r1
	u8g2_DrawStr(&u8g2, x, y, msg);
	if (flag & OLED_PRINT_INVERT) {u8g2_SetDrawColor(&u8g2, 1); u8g2_SetFontMode(&u8g2, 1);}
#endif


}
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	e8 e0       	ldi	r30, 0x08	; 8
     a44:	74 c4       	rjmp	.+2280   	; 0x132e <__epilogue_restores__+0x14>

00000a46 <timer_btn_timeout_handler>:


void timer_btn_timeout_handler(void){

	//timer_btn_install(timer_btn_timeout_handler, BTM_HOLD_TIMEOUT_MS);
	if (~(PC_PIN & (1<< PIN_BTN))){
     a46:	86 b1       	in	r24, 0x06	; 6
		//if button is active at low
		if(flag_btn){
     a48:	80 91 8f 02 	lds	r24, 0x028F
     a4c:	88 23       	and	r24, r24
     a4e:	29 f0       	breq	.+10     	; 0xa5a <timer_btn_timeout_handler+0x14>
			status_btn_hold = 1;
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	80 93 8a 02 	sts	0x028A, r24
			flag_btn = 0;
     a56:	10 92 8f 02 	sts	0x028F, r1
     a5a:	08 95       	ret

00000a5c <get_status_btn_click>:


unsigned char get_status_btn_click(void){

	unsigned char ret;
	ret = status_btn_click;
     a5c:	80 91 8b 02 	lds	r24, 0x028B
	status_btn_click = 0;
     a60:	10 92 8b 02 	sts	0x028B, r1

	return ret;
}
     a64:	08 95       	ret

00000a66 <get_status_btn_hold>:

unsigned char get_status_btn_hold(void){

	unsigned char ret;
	ret = status_btn_hold;
     a66:	80 91 8a 02 	lds	r24, 0x028A
	status_btn_hold = 0;
     a6a:	10 92 8a 02 	sts	0x028A, r1

	return ret;
}
     a6e:	08 95       	ret

00000a70 <get_enc_delta>:
	
int get_enc_delta(void){

	int ret_val = 0;

	ret_val = (counter + 0x80 - counter_old)%0x100 - 0x80 ;
     a70:	20 91 8d 02 	lds	r18, 0x028D
     a74:	82 2f       	mov	r24, r18
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	80 58       	subi	r24, 0x80	; 128
     a7a:	9f 4f       	sbci	r25, 0xFF	; 255
     a7c:	30 91 8c 02 	lds	r19, 0x028C
     a80:	83 1b       	sub	r24, r19
     a82:	91 09       	sbc	r25, r1
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	71 e0       	ldi	r23, 0x01	; 1
     a88:	19 d4       	rcall	.+2098   	; 0x12bc <__divmodhi4>
	counter_old = counter;
     a8a:	20 93 8c 02 	sts	0x028C, r18

	return ret_val;

}
     a8e:	80 58       	subi	r24, 0x80	; 128
     a90:	91 09       	sbc	r25, r1
     a92:	08 95       	ret

00000a94 <init_encoder>:
     a94:	2f ef       	ldi	r18, 0xFF	; 255
     a96:	80 e7       	ldi	r24, 0x70	; 112
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	90 40       	sbci	r25, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <init_encoder+0x6>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <init_encoder+0x10>
     aa4:	00 00       	nop

	pin_old = PC_PIN;
#endif

#if defined(__AVR_ATmega88__)
	PCICR |= (1<<PCIE1);
     aa6:	e8 e6       	ldi	r30, 0x68	; 104
     aa8:	f0 e0       	ldi	r31, 0x00	; 0
     aaa:	80 81       	ld	r24, Z
     aac:	82 60       	ori	r24, 0x02	; 2
     aae:	80 83       	st	Z, r24
	PCMSK1 |= (1<<PIN_BTN)|(1<<PIN_ENC_A)|(1<<PIN_ENC_B);
     ab0:	ec e6       	ldi	r30, 0x6C	; 108
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	87 60       	ori	r24, 0x07	; 7
     ab8:	80 83       	st	Z, r24

	pin_old = PC_PIN;
     aba:	86 b1       	in	r24, 0x06	; 6
     abc:	80 93 9a 01 	sts	0x019A, r24
	GICR |= (1<<INT0);
	
	pin_old = PC_PIN;
#endif

	counter_old = counter;
     ac0:	80 91 8d 02 	lds	r24, 0x028D
     ac4:	80 93 8c 02 	sts	0x028C, r24
     ac8:	08 95       	ret

00000aca <__vector_4>:
#if defined(__AVR_ATtiny85__)
ISR(PCINT0_vect){
#endif

#if defined(__AVR_ATmega88__)
ISR(PCINT1_vect){
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ef 93       	push	r30
     aee:	ff 93       	push	r31
#endif
	
	unsigned char changed_bits, pin_read;
	char dx = 0;

	pin_read = PC_PIN;
     af0:	86 b1       	in	r24, 0x06	; 6

	changed_bits = pin_read ^ pin_old;
     af2:	c0 91 9a 01 	lds	r28, 0x019A
     af6:	c8 27       	eor	r28, r24
	pin_old = pin_read;
     af8:	80 93 9a 01 	sts	0x019A, r24
     afc:	8f ec       	ldi	r24, 0xCF	; 207
     afe:	97 e0       	ldi	r25, 0x07	; 7
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <__vector_4+0x36>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <__vector_4+0x3c>
     b06:	00 00       	nop

	_delay_ms(1);
	pin_read = PC_PIN;
     b08:	d6 b1       	in	r29, 0x06	; 6

	if (changed_bits & (1<<PIN_BTN)) {
     b0a:	c2 ff       	sbrs	r28, 2
     b0c:	1e c0       	rjmp	.+60     	; 0xb4a <__vector_4+0x80>
     b0e:	8f e1       	ldi	r24, 0x1F	; 31
     b10:	9e e4       	ldi	r25, 0x4E	; 78
     b12:	01 97       	sbiw	r24, 0x01	; 1
     b14:	f1 f7       	brne	.-4      	; 0xb12 <__vector_4+0x48>
     b16:	00 c0       	rjmp	.+0      	; 0xb18 <__vector_4+0x4e>
     b18:	00 00       	nop
		
		_delay_ms(10);

		if (pin_read & (1<< PIN_BTN)) {
     b1a:	d2 ff       	sbrs	r29, 2
     b1c:	0e c0       	rjmp	.+28     	; 0xb3a <__vector_4+0x70>
			//when the  button released
			if(flag_btn){
     b1e:	80 91 8f 02 	lds	r24, 0x028F
     b22:	88 23       	and	r24, r24
     b24:	91 f0       	breq	.+36     	; 0xb4a <__vector_4+0x80>
				if(is_timer_btn_alive()){
     b26:	60 dc       	rcall	.-1856   	; 0x3e8 <is_timer_btn_alive>
     b28:	88 23       	and	r24, r24
     b2a:	21 f0       	breq	.+8      	; 0xb34 <__vector_4+0x6a>
					kill_timer_btn();
     b2c:	67 dc       	rcall	.-1842   	; 0x3fc <kill_timer_btn>
					status_btn_click = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	80 93 8b 02 	sts	0x028B, r24
				} else {
					;
				}
				flag_btn = 0;
     b34:	10 92 8f 02 	sts	0x028F, r1
     b38:	08 c0       	rjmp	.+16     	; 0xb4a <__vector_4+0x80>
			}
			
		} else {
			//when the button pressed
			flag_btn = 1;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	80 93 8f 02 	sts	0x028F, r24
			install_timer_btn(timer_btn_timeout_handler, BTN_HOLD_TIMEOUT_MS );
     b40:	60 e2       	ldi	r22, 0x20	; 32
     b42:	73 e0       	ldi	r23, 0x03	; 3
     b44:	83 e2       	ldi	r24, 0x23	; 35
     b46:	95 e0       	ldi	r25, 0x05	; 5
     b48:	5e dc       	rcall	.-1860   	; 0x406 <install_timer_btn>
		}


	} 

	if (changed_bits & (1<< PIN_ENC_A)) {
     b4a:	c0 ff       	sbrs	r28, 0
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <__vector_4+0x8a>
		
		//detect falling edge
		//_delay_ms(1);
		//if(!(pinb & (1<<PIN_ENC_A))) flag_enc = 1;
		flag_enc = 2;
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	80 93 8e 02 	sts	0x028E, r24
		//return;

	}

	if (changed_bits & (1<< PIN_ENC_B)) {
     b54:	c1 ff       	sbrs	r28, 1
     b56:	13 c0       	rjmp	.+38     	; 0xb7e <__vector_4+0xb4>

		if (flag_enc>0){
     b58:	80 91 8e 02 	lds	r24, 0x028E
     b5c:	88 23       	and	r24, r24
     b5e:	79 f0       	breq	.+30     	; 0xb7e <__vector_4+0xb4>

			flag_enc -= 1;
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	80 93 8e 02 	sts	0x028E, r24
			
			if (pin_read & (1<<PIN_ENC_B)){
     b66:	d1 fd       	sbrc	r29, 1
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <__vector_4+0xa4>
				//if rising edge
				dx = 1;	
			} else {
				//if falling edge
				dx = -1;
     b6a:	8f ef       	ldi	r24, 0xFF	; 255
     b6c:	01 c0       	rjmp	.+2      	; 0xb70 <__vector_4+0xa6>

			flag_enc -= 1;
			
			if (pin_read & (1<<PIN_ENC_B)){
				//if rising edge
				dx = 1;	
     b6e:	81 e0       	ldi	r24, 0x01	; 1
			} else {
				//if falling edge
				dx = -1;
			}

			if (pin_read & (1<<PIN_ENC_A)){
     b70:	d0 ff       	sbrs	r29, 0
				// High
				dx *= 1;
			} else {
				//Low
				dx *= -1;
     b72:	81 95       	neg	r24
			}

			counter += dx;
     b74:	90 91 8d 02 	lds	r25, 0x028D
     b78:	89 0f       	add	r24, r25
     b7a:	80 93 8d 02 	sts	0x028D, r24

		}
	
	}
	
}
     b7e:	ff 91       	pop	r31
     b80:	ef 91       	pop	r30
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	bf 91       	pop	r27
     b88:	af 91       	pop	r26
     b8a:	9f 91       	pop	r25
     b8c:	8f 91       	pop	r24
     b8e:	7f 91       	pop	r23
     b90:	6f 91       	pop	r22
     b92:	5f 91       	pop	r21
     b94:	4f 91       	pop	r20
     b96:	3f 91       	pop	r19
     b98:	2f 91       	pop	r18
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <u8x8_byte_avr_hw_i2c>:
#if defined(__AVR_ATmega8__)||defined(__AVR_ATmega88__)	
	
	unsigned char *data;
	unsigned char internal_i2c_mode;

	switch(msg){
     ba4:	68 31       	cpi	r22, 0x18	; 24
     ba6:	21 f1       	breq	.+72     	; 0xbf0 <u8x8_byte_avr_hw_i2c+0x4c>
     ba8:	38 f4       	brcc	.+14     	; 0xbb8 <u8x8_byte_avr_hw_i2c+0x14>
     baa:	64 31       	cpi	r22, 0x14	; 20
     bac:	b9 f0       	breq	.+46     	; 0xbdc <u8x8_byte_avr_hw_i2c+0x38>
     bae:	67 31       	cpi	r22, 0x17	; 23
     bb0:	d1 f5       	brne	.+116    	; 0xc26 <u8x8_byte_avr_hw_i2c+0x82>
     bb2:	f9 01       	movw	r30, r18
			
				  
			data = (uint8_t *)arg_ptr;
			while( arg_int > 0 ) {
				TWDR = (unsigned char)*data;
				TWCR = ((1<< TWINT) | (1<<TWEN));
     bb4:	84 e8       	ldi	r24, 0x84	; 132
     bb6:	0a c0       	rjmp	.+20     	; 0xbcc <u8x8_byte_avr_hw_i2c+0x28>
#if defined(__AVR_ATmega8__)||defined(__AVR_ATmega88__)	
	
	unsigned char *data;
	unsigned char internal_i2c_mode;

	switch(msg){
     bb8:	69 31       	cpi	r22, 0x19	; 25
     bba:	69 f1       	breq	.+90     	; 0xc16 <u8x8_byte_avr_hw_i2c+0x72>
     bbc:	60 32       	cpi	r22, 0x20	; 32
     bbe:	b1 f0       	breq	.+44     	; 0xbec <u8x8_byte_avr_hw_i2c+0x48>
     bc0:	32 c0       	rjmp	.+100    	; 0xc26 <u8x8_byte_avr_hw_i2c+0x82>
				  
			data = (uint8_t *)arg_ptr;
			while( arg_int > 0 ) {
				TWDR = (unsigned char)*data;
				TWCR = ((1<< TWINT) | (1<<TWEN));
				while (!(TWCR & (1 <<TWINT)));
     bc2:	90 91 bc 00 	lds	r25, 0x00BC
     bc6:	97 ff       	sbrs	r25, 7
     bc8:	fc cf       	rjmp	.-8      	; 0xbc2 <u8x8_byte_avr_hw_i2c+0x1e>
				data++;
				arg_int--;
     bca:	41 50       	subi	r20, 0x01	; 1
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			
				  
			data = (uint8_t *)arg_ptr;
			while( arg_int > 0 ) {
     bcc:	44 23       	and	r20, r20
     bce:	71 f0       	breq	.+28     	; 0xbec <u8x8_byte_avr_hw_i2c+0x48>
				TWDR = (unsigned char)*data;
     bd0:	91 91       	ld	r25, Z+
     bd2:	90 93 bb 00 	sts	0x00BB, r25
				TWCR = ((1<< TWINT) | (1<<TWEN));
     bd6:	80 93 bc 00 	sts	0x00BC, r24
				while (!(TWCR & (1 <<TWINT)));
     bda:	f3 cf       	rjmp	.-26     	; 0xbc2 <u8x8_byte_avr_hw_i2c+0x1e>

		case U8X8_MSG_BYTE_INIT:
			//set clock, set data and delay
			//initialize twi module

			TWSR=0x00; //set presca1er bits to zero
     bdc:	10 92 b9 00 	sts	0x00B9, r1
			//TWBR=0x46; //SCL frequency is 100K for XTAL = 7.3728M
			//TWBR=2; //SCL frequency is 100K for XTAL = 7.3728M
			TWBR=3;
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	80 93 b8 00 	sts	0x00B8, r24
			TWCR=0x04; //enab1e TWI module
     be6:	84 e0       	ldi	r24, 0x04	; 4
     be8:	80 93 bc 00 	sts	0x00BC, r24
		default:
			return 0;

	}

	return 1;
     bec:	81 e0       	ldi	r24, 0x01	; 1
			//TWBR=0x46; //SCL frequency is 100K for XTAL = 7.3728M
			//TWBR=2; //SCL frequency is 100K for XTAL = 7.3728M
			TWBR=3;
			TWCR=0x04; //enab1e TWI module
			
			break;
     bee:	08 95       	ret

		case U8X8_MSG_BYTE_START_TRANSFER:
			//start i2c
			//issue address

			TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
     bf0:	24 ea       	ldi	r18, 0xA4	; 164
     bf2:	20 93 bc 00 	sts	0x00BC, r18
			while (!(TWCR & (1<<TWINT)));
     bf6:	20 91 bc 00 	lds	r18, 0x00BC
     bfa:	27 ff       	sbrs	r18, 7
     bfc:	fc cf       	rjmp	.-8      	; 0xbf6 <u8x8_byte_avr_hw_i2c+0x52>
			
			TWDR = u8x8_GetI2CAddress(u8x8);
     bfe:	fc 01       	movw	r30, r24
     c00:	82 89       	ldd	r24, Z+18	; 0x12
     c02:	80 93 bb 00 	sts	0x00BB, r24
			TWCR = ((1<< TWINT) | (1<<TWEN));
     c06:	84 e8       	ldi	r24, 0x84	; 132
     c08:	80 93 bc 00 	sts	0x00BC, r24
			while (!(TWCR & (1 <<TWINT)));
     c0c:	80 91 bc 00 	lds	r24, 0x00BC
     c10:	87 ff       	sbrs	r24, 7
     c12:	fc cf       	rjmp	.-8      	; 0xc0c <u8x8_byte_avr_hw_i2c+0x68>
     c14:	eb cf       	rjmp	.-42     	; 0xbec <u8x8_byte_avr_hw_i2c+0x48>
			break;
		
		
		case U8X8_MSG_BYTE_END_TRANSFER:
			//stop i2c
			TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
     c16:	84 e9       	ldi	r24, 0x94	; 148
     c18:	80 93 bc 00 	sts	0x00BC, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c1c:	fa e1       	ldi	r31, 0x1A	; 26
     c1e:	fa 95       	dec	r31
     c20:	f1 f7       	brne	.-4      	; 0xc1e <u8x8_byte_avr_hw_i2c+0x7a>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <u8x8_byte_avr_hw_i2c+0x80>
     c24:	e3 cf       	rjmp	.-58     	; 0xbec <u8x8_byte_avr_hw_i2c+0x48>
			_delay_us(10) ; //wait for a short time
			
			break;

		default:
			return 0;
     c26:	80 e0       	ldi	r24, 0x00	; 0



#endif

}
     c28:	08 95       	ret

00000c2a <u8x8_gpio_and_delay_avr>:



unsigned char u8x8_gpio_and_delay_avr(u8x8_t *u8x8, unsigned char msg, unsigned char arg_int, void *arg_ptr)
{
    switch(msg)
     c2a:	6d 32       	cpi	r22, 0x2D	; 45
     c2c:	a9 f0       	breq	.+42     	; 0xc58 <u8x8_gpio_and_delay_avr+0x2e>
     c2e:	58 f4       	brcc	.+22     	; 0xc46 <u8x8_gpio_and_delay_avr+0x1c>
     c30:	68 32       	cpi	r22, 0x28	; 40
     c32:	71 f0       	breq	.+28     	; 0xc50 <u8x8_gpio_and_delay_avr+0x26>
     c34:	69 32       	cpi	r22, 0x29	; 41
     c36:	11 f5       	brne	.+68     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
     c38:	8f ec       	ldi	r24, 0xCF	; 207
     c3a:	97 e0       	ldi	r25, 0x07	; 7
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <u8x8_gpio_and_delay_avr+0x12>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <u8x8_gpio_and_delay_avr+0x18>
     c42:	00 00       	nop
     c44:	1b c0       	rjmp	.+54     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
     c46:	6c 34       	cpi	r22, 0x4C	; 76
     c48:	61 f0       	breq	.+24     	; 0xc62 <u8x8_gpio_and_delay_avr+0x38>
     c4a:	6d 34       	cpi	r22, 0x4D	; 77
     c4c:	89 f0       	breq	.+34     	; 0xc70 <u8x8_gpio_and_delay_avr+0x46>
     c4e:	16 c0       	rjmp	.+44     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
            // Chip_GPIO_SetPinDIRInput(LPC_GPIO, KEY_NEXT_PORT, KEY_NEXT_PIN);

            // Chip_IOCON_PinMuxSet(LPC_IOCON, KEY_HOME_PORT, KEY_HOME_PIN, KEY_HOME_FN|IOCON_MODE_PULLUP);    
            // Chip_GPIO_SetPinDIRInput(LPC_GPIO, KEY_HOME_PORT, KEY_HOME_PIN);

            I2C_PORT_DIR &= ~((1<<I2C_CLOCK_PORT)|(1<<I2C_DATA_PORT));
     c50:	87 b1       	in	r24, 0x07	; 7
     c52:	8f 7c       	andi	r24, 0xCF	; 207
     c54:	87 b9       	out	0x07, r24	; 7

            break;
     c56:	12 c0       	rjmp	.+36     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	9a 95       	dec	r25
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <u8x8_gpio_and_delay_avr+0x30>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <u8x8_gpio_and_delay_avr+0x36>
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
            //delay_micro_seconds(arg_int<=2?5:1);
            _delay_us(1);
            break;

        case U8X8_MSG_GPIO_I2C_CLOCK:
            if ( arg_int == 0 )
     c62:	41 11       	cpse	r20, r1
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <u8x8_gpio_and_delay_avr+0x42>
            {
                //Chip_GPIO_SetPinDIROutput(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                //Chip_GPIO_SetPinOutLow(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                I2C_PORT_DIR |= (1<<I2C_CLOCK_PORT);
     c66:	3d 9a       	sbi	0x07, 5	; 7
                I2C_PORT &= ~(1<<I2C_CLOCK_PORT);
     c68:	45 98       	cbi	0x08, 5	; 8
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
            }
            else
            {
                ////Chip_GPIO_SetPinOutHigh(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                //Chip_GPIO_SetPinDIRInput(LPC_GPIO, I2C_CLOCK_PORT, I2C_CLOCK_PIN);
                I2C_PORT_DIR &= ~(1<<I2C_CLOCK_PORT);
     c6c:	3d 98       	cbi	0x07, 5	; 7
     c6e:	06 c0       	rjmp	.+12     	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>

            }
            break;

        case U8X8_MSG_GPIO_I2C_DATA:
            if ( arg_int == 0 )
     c70:	41 11       	cpse	r20, r1
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <u8x8_gpio_and_delay_avr+0x50>
            {
                //Chip_GPIO_SetPinDIROutput(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                //Chip_GPIO_SetPinOutLow(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                I2C_PORT_DIR |= (1<<I2C_DATA_PORT);
     c74:	3c 9a       	sbi	0x07, 4	; 7
                I2C_PORT &= ~(1<<I2C_DATA_PORT);
     c76:	44 98       	cbi	0x08, 4	; 8
     c78:	01 c0       	rjmp	.+2      	; 0xc7c <u8x8_gpio_and_delay_avr+0x52>
            }
            else
            {
                // //Chip_GPIO_SetPinOutHigh(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                // Chip_GPIO_SetPinDIRInput(LPC_GPIO, I2C_DATA_PORT, I2C_DATA_PIN);
                I2C_PORT_DIR &= ~(1<<I2C_DATA_PORT);
     c7a:	3c 98       	cbi	0x07, 4	; 7
        default:
            // u8x8_SetGPIOResult(u8x8, 1);
            break;
    }
    return 1;
}
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	08 95       	ret

00000c80 <u8x8_get_glyph_data>:
   encoding: glyph for which the data is requested (must be between 0 and 255)
   buf: pointer to 8 bytes
*/
static void u8x8_get_glyph_data(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf) U8X8_NOINLINE;
static void u8x8_get_glyph_data(u8x8_t *u8x8, uint8_t encoding, uint8_t *buf) 
{
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	dc 01       	movw	r26, r24
  uint8_t first, last, i;
  uint16_t offset;
  first = u8x8_pgm_read(u8x8->font+0);
     c86:	1c 96       	adiw	r26, 0x0c	; 12
     c88:	ed 91       	ld	r30, X+
     c8a:	fc 91       	ld	r31, X
     c8c:	1d 97       	sbiw	r26, 0x0d	; 13
     c8e:	84 91       	lpm	r24, Z
  last = u8x8_pgm_read(u8x8->font+1);
     c90:	31 96       	adiw	r30, 0x01	; 1
     c92:	e4 91       	lpm	r30, Z
  
  /* get the glyph bitmap from the font */
  if ( first <= encoding && encoding <= last )
     c94:	68 17       	cp	r22, r24
     c96:	10 f0       	brcs	.+4      	; 0xc9c <u8x8_get_glyph_data+0x1c>
     c98:	e6 17       	cp	r30, r22
     c9a:	20 f4       	brcc	.+8      	; 0xca4 <u8x8_get_glyph_data+0x24>
     c9c:	fa 01       	movw	r30, r20
     c9e:	ca 01       	movw	r24, r20
     ca0:	08 96       	adiw	r24, 0x08	; 8
     ca2:	22 c0       	rjmp	.+68     	; 0xce8 <u8x8_get_glyph_data+0x68>
  {
    offset = encoding;
     ca4:	70 e0       	ldi	r23, 0x00	; 0
    offset -= first;
     ca6:	68 1b       	sub	r22, r24
     ca8:	71 09       	sbc	r23, r1
    offset *= 8;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	66 0f       	add	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	8a 95       	dec	r24
     cb2:	e1 f7       	brne	.-8      	; 0xcac <u8x8_get_glyph_data+0x2c>
    offset +=2;
     cb4:	cb 01       	movw	r24, r22
     cb6:	02 96       	adiw	r24, 0x02	; 2
     cb8:	ea 01       	movw	r28, r20
     cba:	66 5f       	subi	r22, 0xF6	; 246
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    for( i = 0; i < 8; i++ )
    {
      buf[i] = u8x8_pgm_read(u8x8->font+offset);
     cbe:	1c 96       	adiw	r26, 0x0c	; 12
     cc0:	ed 91       	ld	r30, X+
     cc2:	fc 91       	ld	r31, X
     cc4:	1d 97       	sbiw	r26, 0x0d	; 13
     cc6:	e8 0f       	add	r30, r24
     cc8:	f9 1f       	adc	r31, r25
     cca:	e4 91       	lpm	r30, Z
     ccc:	e9 93       	st	Y+, r30
      offset++;
     cce:	01 96       	adiw	r24, 0x01	; 1
  {
    offset = encoding;
    offset -= first;
    offset *= 8;
    offset +=2;
    for( i = 0; i < 8; i++ )
     cd0:	86 17       	cp	r24, r22
     cd2:	97 07       	cpc	r25, r23
     cd4:	a1 f7       	brne	.-24     	; 0xcbe <u8x8_get_glyph_data+0x3e>
      buf[i] = 0;
    }
  }
  
  /* invert the bitmap if required */
  if ( u8x8->is_font_inverse_mode )
     cd6:	51 96       	adiw	r26, 0x11	; 17
     cd8:	8c 91       	ld	r24, X
     cda:	88 23       	and	r24, r24
     cdc:	81 f0       	breq	.+32     	; 0xcfe <u8x8_get_glyph_data+0x7e>
     cde:	fa 01       	movw	r30, r20
     ce0:	9a 01       	movw	r18, r20
     ce2:	28 5f       	subi	r18, 0xF8	; 248
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <u8x8_get_glyph_data+0x72>
  }
  else
  {
    for( i = 0; i < 8; i++ )
    {
      buf[i] = 0;
     ce8:	11 92       	st	Z+, r1
      offset++;
    }
  }
  else
  {
    for( i = 0; i < 8; i++ )
     cea:	e8 17       	cp	r30, r24
     cec:	f9 07       	cpc	r31, r25
     cee:	e1 f7       	brne	.-8      	; 0xce8 <u8x8_get_glyph_data+0x68>
     cf0:	f2 cf       	rjmp	.-28     	; 0xcd6 <u8x8_get_glyph_data+0x56>
  /* invert the bitmap if required */
  if ( u8x8->is_font_inverse_mode )
  {
    for( i = 0; i < 8; i++ )
    {
      buf[i] ^= 255;
     cf2:	80 81       	ld	r24, Z
     cf4:	80 95       	com	r24
     cf6:	81 93       	st	Z+, r24
  }
  
  /* invert the bitmap if required */
  if ( u8x8->is_font_inverse_mode )
  {
    for( i = 0; i < 8; i++ )
     cf8:	e2 17       	cp	r30, r18
     cfa:	f3 07       	cpc	r31, r19
     cfc:	d1 f7       	brne	.-12     	; 0xcf2 <u8x8_get_glyph_data+0x72>
    {
      buf[i] ^= 255;
    }
  }
  
}
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	08 95       	ret

00000d04 <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
     d04:	66 23       	and	r22, r22
     d06:	29 f0       	breq	.+10     	; 0xd12 <u8x8_ascii_next+0xe>
     d08:	6a 30       	cpi	r22, 0x0A	; 10
     d0a:	19 f0       	breq	.+6      	; 0xd12 <u8x8_ascii_next+0xe>
    return 0x0ffff;	/* end of string detected*/
  return b;
     d0c:	86 2f       	mov	r24, r22
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	08 95       	ret
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	9f ef       	ldi	r25, 0xFF	; 255
  return b;
}
     d16:	08 95       	ret

00000d18 <u8x8_SetFont>:
#endif


void u8x8_SetFont(u8x8_t *u8x8, const uint8_t *font_8x8)
{
  u8x8->font = font_8x8;
     d18:	fc 01       	movw	r30, r24
     d1a:	75 87       	std	Z+13, r23	; 0x0d
     d1c:	64 87       	std	Z+12, r22	; 0x0c
     d1e:	08 95       	ret

00000d20 <u8x8_DrawGlyph>:
  }
  
}

void u8x8_DrawGlyph(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t encoding)
{
     d20:	a8 e0       	ldi	r26, 0x08	; 8
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e5 e9       	ldi	r30, 0x95	; 149
     d26:	f6 e0       	ldi	r31, 0x06	; 6
     d28:	e6 c2       	rjmp	.+1484   	; 0x12f6 <__prologue_saves__+0x14>
     d2a:	7c 01       	movw	r14, r24
     d2c:	d6 2e       	mov	r13, r22
     d2e:	c4 2e       	mov	r12, r20
  uint8_t buf[8];
  u8x8_get_glyph_data(u8x8, encoding, buf);
     d30:	ae 01       	movw	r20, r28
     d32:	4f 5f       	subi	r20, 0xFF	; 255
     d34:	5f 4f       	sbci	r21, 0xFF	; 255
     d36:	62 2f       	mov	r22, r18
     d38:	a3 df       	rcall	.-186    	; 0xc80 <u8x8_get_glyph_data>
  u8x8_DrawTile(u8x8, x, y, 1, buf);
     d3a:	8e 01       	movw	r16, r28
     d3c:	0f 5f       	subi	r16, 0xFF	; 255
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	21 e0       	ldi	r18, 0x01	; 1
     d42:	4c 2d       	mov	r20, r12
     d44:	6d 2d       	mov	r22, r13
     d46:	c7 01       	movw	r24, r14
     d48:	50 d1       	rcall	.+672    	; 0xfea <u8x8_DrawTile>
}
     d4a:	28 96       	adiw	r28, 0x08	; 8
     d4c:	e8 e0       	ldi	r30, 0x08	; 8
     d4e:	ef c2       	rjmp	.+1502   	; 0x132e <__epilogue_restores__+0x14>

00000d50 <u8x8_draw_string>:



static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
     d50:	a0 e0       	ldi	r26, 0x00	; 0
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ed ea       	ldi	r30, 0xAD	; 173
     d56:	f6 e0       	ldi	r31, 0x06	; 6
     d58:	cf c2       	rjmp	.+1438   	; 0x12f8 <__prologue_saves__+0x16>
     d5a:	ec 01       	movw	r28, r24
     d5c:	e6 2e       	mov	r14, r22
     d5e:	d4 2e       	mov	r13, r20
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
     d60:	1d 8a       	std	Y+21, r1	; 0x15
     d62:	89 01       	movw	r16, r18

static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s) U8X8_NOINLINE;
static uint8_t u8x8_draw_string(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
  uint16_t e;
  uint8_t cnt = 0;
     d64:	f1 2c       	mov	r15, r1
  u8x8_utf8_init(u8x8);
  for(;;)
  {
    e = u8x8->next_cb(u8x8, (uint8_t)*s);
     d66:	f8 01       	movw	r30, r16
     d68:	61 91       	ld	r22, Z+
     d6a:	8f 01       	movw	r16, r30
     d6c:	ea 81       	ldd	r30, Y+2	; 0x02
     d6e:	fb 81       	ldd	r31, Y+3	; 0x03
     d70:	ce 01       	movw	r24, r28
     d72:	09 95       	icall
    if ( e == 0x0ffff )
     d74:	8f 3f       	cpi	r24, 0xFF	; 255
     d76:	ff ef       	ldi	r31, 0xFF	; 255
     d78:	9f 07       	cpc	r25, r31
     d7a:	61 f0       	breq	.+24     	; 0xd94 <u8x8_draw_string+0x44>
      break;
    s++;
    if ( e != 0x0fffe )
     d7c:	8e 3f       	cpi	r24, 0xFE	; 254
     d7e:	2f ef       	ldi	r18, 0xFF	; 255
     d80:	92 07       	cpc	r25, r18
     d82:	89 f3       	breq	.-30     	; 0xd66 <u8x8_draw_string+0x16>
    {
      u8x8_DrawGlyph(u8x8, x, y, e);
     d84:	28 2f       	mov	r18, r24
     d86:	4d 2d       	mov	r20, r13
     d88:	6e 2d       	mov	r22, r14
     d8a:	ce 01       	movw	r24, r28
     d8c:	c9 df       	rcall	.-110    	; 0xd20 <u8x8_DrawGlyph>
      x++;
     d8e:	e3 94       	inc	r14
      cnt++;
     d90:	f3 94       	inc	r15
     d92:	e9 cf       	rjmp	.-46     	; 0xd66 <u8x8_draw_string+0x16>
    }
  }
  return cnt;
}
     d94:	8f 2d       	mov	r24, r15
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	e7 e0       	ldi	r30, 0x07	; 7
     d9c:	c9 c2       	rjmp	.+1426   	; 0x1330 <__epilogue_restores__+0x16>

00000d9e <u8x8_DrawString>:


uint8_t u8x8_DrawString(u8x8_t *u8x8, uint8_t x, uint8_t y, const char *s)
{
  u8x8->next_cb = u8x8_ascii_next;
     d9e:	e2 e8       	ldi	r30, 0x82	; 130
     da0:	f6 e0       	ldi	r31, 0x06	; 6
     da2:	dc 01       	movw	r26, r24
     da4:	13 96       	adiw	r26, 0x03	; 3
     da6:	fc 93       	st	X, r31
     da8:	ee 93       	st	-X, r30
     daa:	12 97       	sbiw	r26, 0x02	; 2
  return u8x8_draw_string(u8x8, x, y, s);
     dac:	d1 cf       	rjmp	.-94     	; 0xd50 <u8x8_draw_string>

00000dae <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	ec 01       	movw	r28, r24
     dba:	16 2f       	mov	r17, r22
     dbc:	7a 01       	movw	r14, r20
    u8x8_byte_StartTransfer(u8x8);    
     dbe:	54 d2       	rcall	.+1192   	; 0x1268 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
     dc0:	60 e4       	ldi	r22, 0x40	; 64
     dc2:	ce 01       	movw	r24, r28
     dc4:	43 d2       	rcall	.+1158   	; 0x124c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
     dc6:	e8 85       	ldd	r30, Y+8	; 0x08
     dc8:	f9 85       	ldd	r31, Y+9	; 0x09
     dca:	97 01       	movw	r18, r14
     dcc:	41 2f       	mov	r20, r17
     dce:	67 e1       	ldi	r22, 0x17	; 23
     dd0:	ce 01       	movw	r24, r28
     dd2:	09 95       	icall
    u8x8_byte_EndTransfer(u8x8);
     dd4:	ce 01       	movw	r24, r28
     dd6:	53 d2       	rcall	.+1190   	; 0x127e <u8x8_byte_EndTransfer>
}
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	08 95       	ret

00000de4 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
     de4:	46 2f       	mov	r20, r22
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
     de6:	dc 01       	movw	r26, r24
     de8:	16 96       	adiw	r26, 0x06	; 6
     dea:	ed 91       	ld	r30, X+
     dec:	fc 91       	ld	r31, X
     dee:	17 97       	sbiw	r26, 0x07	; 7
     df0:	20 e0       	ldi	r18, 0x00	; 0
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	65 e1       	ldi	r22, 0x15	; 21
     df6:	09 95       	icall
}
     df8:	08 95       	ret

00000dfa <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
     dfa:	46 2f       	mov	r20, r22
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
     dfc:	dc 01       	movw	r26, r24
     dfe:	16 96       	adiw	r26, 0x06	; 6
     e00:	ed 91       	ld	r30, X+
     e02:	fc 91       	ld	r31, X
     e04:	17 97       	sbiw	r26, 0x07	; 7
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	66 e1       	ldi	r22, 0x16	; 22
     e0c:	09 95       	icall
}
     e0e:	08 95       	ret

00000e10 <u8x8_cad_SendData>:

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
     e10:	9a 01       	movw	r18, r20
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
     e12:	dc 01       	movw	r26, r24
     e14:	16 96       	adiw	r26, 0x06	; 6
     e16:	ed 91       	ld	r30, X+
     e18:	fc 91       	ld	r31, X
     e1a:	17 97       	sbiw	r26, 0x07	; 7
     e1c:	46 2f       	mov	r20, r22
     e1e:	67 e1       	ldi	r22, 0x17	; 23
     e20:	09 95       	icall
}
     e22:	08 95       	ret

00000e24 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
     e24:	dc 01       	movw	r26, r24
     e26:	16 96       	adiw	r26, 0x06	; 6
     e28:	ed 91       	ld	r30, X+
     e2a:	fc 91       	ld	r31, X
     e2c:	17 97       	sbiw	r26, 0x07	; 7
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e0       	ldi	r20, 0x00	; 0
     e34:	68 e1       	ldi	r22, 0x18	; 24
     e36:	09 95       	icall
}
     e38:	08 95       	ret

00000e3a <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
     e3a:	dc 01       	movw	r26, r24
     e3c:	16 96       	adiw	r26, 0x06	; 6
     e3e:	ed 91       	ld	r30, X+
     e40:	fc 91       	ld	r31, X
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e0       	ldi	r20, 0x00	; 0
     e4a:	69 e1       	ldi	r22, 0x19	; 25
     e4c:	09 95       	icall
}
     e4e:	08 95       	ret

00000e50 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
     e50:	a1 e0       	ldi	r26, 0x01	; 1
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	ed e2       	ldi	r30, 0x2D	; 45
     e56:	f7 e0       	ldi	r31, 0x07	; 7
     e58:	50 c2       	rjmp	.+1184   	; 0x12fa <__prologue_saves__+0x18>
     e5a:	7c 01       	movw	r14, r24
     e5c:	8b 01       	movw	r16, r22
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
     e5e:	d8 01       	movw	r26, r16
     e60:	6c 91       	ld	r22, X
    data++;
    switch( cmd )
     e62:	67 31       	cpi	r22, 0x17	; 23
     e64:	d9 f0       	breq	.+54     	; 0xe9c <u8x8_cad_SendSequence+0x4c>
     e66:	78 f4       	brcc	.+30     	; 0xe86 <u8x8_cad_SendSequence+0x36>
     e68:	65 31       	cpi	r22, 0x15	; 21
     e6a:	90 f1       	brcs	.+100    	; 0xed0 <u8x8_cad_SendSequence+0x80>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
     e6c:	f8 01       	movw	r30, r16
     e6e:	41 81       	ldd	r20, Z+1	; 0x01
     e70:	49 83       	std	Y+1, r20	; 0x01
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
     e72:	d7 01       	movw	r26, r14
     e74:	16 96       	adiw	r26, 0x06	; 6
     e76:	ed 91       	ld	r30, X+
     e78:	fc 91       	ld	r31, X
     e7a:	17 97       	sbiw	r26, 0x07	; 7
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	c7 01       	movw	r24, r14
     e82:	09 95       	icall
     e84:	22 c0       	rjmp	.+68     	; 0xeca <u8x8_cad_SendSequence+0x7a>

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
     e86:	6a 31       	cpi	r22, 0x1A	; 26
     e88:	98 f0       	brcs	.+38     	; 0xeb0 <u8x8_cad_SendSequence+0x60>
     e8a:	6e 3f       	cpi	r22, 0xFE	; 254
     e8c:	09 f5       	brne	.+66     	; 0xed0 <u8x8_cad_SendSequence+0x80>
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
     e8e:	f8 01       	movw	r30, r16
     e90:	41 81       	ldd	r20, Z+1	; 0x01
     e92:	49 83       	std	Y+1, r20	; 0x01
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
     e94:	69 e2       	ldi	r22, 0x29	; 41
     e96:	c7 01       	movw	r24, r14
     e98:	98 d1       	rcall	.+816    	; 0x11ca <u8x8_gpio_call>
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <u8x8_cad_SendSequence+0x7a>
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
     e9c:	f8 01       	movw	r30, r16
     e9e:	81 81       	ldd	r24, Z+1	; 0x01
     ea0:	89 83       	std	Y+1, r24	; 0x01
	  u8x8_cad_SendData(u8x8, 1, &v);
     ea2:	ae 01       	movw	r20, r28
     ea4:	4f 5f       	subi	r20, 0xFF	; 255
     ea6:	5f 4f       	sbci	r21, 0xFF	; 255
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	c7 01       	movw	r24, r14
     eac:	b1 df       	rcall	.-158    	; 0xe10 <u8x8_cad_SendData>
     eae:	0d c0       	rjmp	.+26     	; 0xeca <u8x8_cad_SendSequence+0x7a>
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    data++;
     eb0:	0f 5f       	subi	r16, 0xFF	; 255
     eb2:	1f 4f       	sbci	r17, 0xFF	; 255
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
     eb4:	d7 01       	movw	r26, r14
     eb6:	16 96       	adiw	r26, 0x06	; 6
     eb8:	ed 91       	ld	r30, X+
     eba:	fc 91       	ld	r31, X
     ebc:	17 97       	sbiw	r26, 0x07	; 7
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	c7 01       	movw	r24, r14
     ec6:	09 95       	icall
	  break;
     ec8:	ca cf       	rjmp	.-108    	; 0xe5e <u8x8_cad_SendSequence+0xe>
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
     eca:	0e 5f       	subi	r16, 0xFE	; 254
     ecc:	1f 4f       	sbci	r17, 0xFF	; 255
	  break;
     ece:	c7 cf       	rjmp	.-114    	; 0xe5e <u8x8_cad_SendSequence+0xe>
      default:
	return;
    }
  }
}
     ed0:	21 96       	adiw	r28, 0x01	; 1
     ed2:	e6 e0       	ldi	r30, 0x06	; 6
     ed4:	2e c2       	rjmp	.+1116   	; 0x1332 <__epilogue_restores__+0x18>

00000ed6 <u8x8_cad_ssd13xx_i2c>:
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
}

uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	00 d0       	rcall	.+0      	; 0xee2 <u8x8_cad_ssd13xx_i2c+0xc>
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	7c 01       	movw	r14, r24
     ee8:	14 2f       	mov	r17, r20
  uint8_t *p;
  switch(msg)
     eea:	67 31       	cpi	r22, 0x17	; 23
     eec:	28 f4       	brcc	.+10     	; 0xef8 <u8x8_cad_ssd13xx_i2c+0x22>
     eee:	65 31       	cpi	r22, 0x15	; 21
     ef0:	40 f4       	brcc	.+16     	; 0xf02 <u8x8_cad_ssd13xx_i2c+0x2c>
     ef2:	64 31       	cpi	r22, 0x14	; 20
     ef4:	19 f1       	breq	.+70     	; 0xf3c <u8x8_cad_ssd13xx_i2c+0x66>
     ef6:	35 c0       	rjmp	.+106    	; 0xf62 <u8x8_cad_ssd13xx_i2c+0x8c>
     ef8:	67 31       	cpi	r22, 0x17	; 23
     efa:	69 f0       	breq	.+26     	; 0xf16 <u8x8_cad_ssd13xx_i2c+0x40>
     efc:	6a 31       	cpi	r22, 0x1A	; 26
     efe:	e0 f0       	brcs	.+56     	; 0xf38 <u8x8_cad_ssd13xx_i2c+0x62>
     f00:	30 c0       	rjmp	.+96     	; 0xf62 <u8x8_cad_ssd13xx_i2c+0x8c>
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
     f02:	b2 d1       	rcall	.+868    	; 0x1268 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	c7 01       	movw	r24, r14
     f08:	a1 d1       	rcall	.+834    	; 0x124c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
     f0a:	61 2f       	mov	r22, r17
     f0c:	c7 01       	movw	r24, r14
     f0e:	9e d1       	rcall	.+828    	; 0x124c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
     f10:	c7 01       	movw	r24, r14
     f12:	b5 d1       	rcall	.+874    	; 0x127e <u8x8_byte_EndTransfer>
     f14:	11 c0       	rjmp	.+34     	; 0xf38 <u8x8_cad_ssd13xx_i2c+0x62>
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
     f16:	a9 01       	movw	r20, r18
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
     f18:	19 31       	cpi	r17, 0x19	; 25
     f1a:	58 f0       	brcs	.+22     	; 0xf32 <u8x8_cad_ssd13xx_i2c+0x5c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
     f1c:	68 e1       	ldi	r22, 0x18	; 24
     f1e:	c7 01       	movw	r24, r14
     f20:	29 83       	std	Y+1, r18	; 0x01
     f22:	3a 83       	std	Y+2, r19	; 0x02
     f24:	44 df       	rcall	.-376    	; 0xdae <u8x8_i2c_data_transfer>
	arg_int-=24;
     f26:	18 51       	subi	r17, 0x18	; 24
	p+=24;
     f28:	29 81       	ldd	r18, Y+1	; 0x01
     f2a:	3a 81       	ldd	r19, Y+2	; 0x02
     f2c:	28 5e       	subi	r18, 0xE8	; 232
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	f2 cf       	rjmp	.-28     	; 0xf16 <u8x8_cad_ssd13xx_i2c+0x40>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
     f32:	61 2f       	mov	r22, r17
     f34:	c7 01       	movw	r24, r14
     f36:	3b df       	rcall	.-394    	; 0xdae <u8x8_i2c_data_transfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
     f38:	81 e0       	ldi	r24, 0x01	; 1
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <u8x8_cad_ssd13xx_i2c+0x8e>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
     f3c:	dc 01       	movw	r26, r24
     f3e:	52 96       	adiw	r26, 0x12	; 18
     f40:	8c 91       	ld	r24, X
     f42:	52 97       	sbiw	r26, 0x12	; 18
     f44:	8f 3f       	cpi	r24, 0xFF	; 255
     f46:	19 f4       	brne	.+6      	; 0xf4e <u8x8_cad_ssd13xx_i2c+0x78>
	u8x8->i2c_address = 0x078;
     f48:	88 e7       	ldi	r24, 0x78	; 120
     f4a:	52 96       	adiw	r26, 0x12	; 18
     f4c:	8c 93       	st	X, r24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
     f4e:	d7 01       	movw	r26, r14
     f50:	18 96       	adiw	r26, 0x08	; 8
     f52:	ed 91       	ld	r30, X+
     f54:	fc 91       	ld	r31, X
     f56:	19 97       	sbiw	r26, 0x09	; 9
     f58:	41 2f       	mov	r20, r17
     f5a:	64 e1       	ldi	r22, 0x14	; 20
     f5c:	c7 01       	movw	r24, r14
     f5e:	09 95       	icall
     f60:	01 c0       	rjmp	.+2      	; 0xf64 <u8x8_cad_ssd13xx_i2c+0x8e>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
     f62:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	ff 90       	pop	r15
     f70:	ef 90       	pop	r14
     f72:	08 95       	ret

00000f74 <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
     f74:	fc 01       	movw	r30, r24
     f76:	71 83       	std	Z+1, r23	; 0x01
     f78:	60 83       	st	Z, r22
      u8x8->x_offset = u8x8->display_info->default_x_offset;
     f7a:	fb 01       	movw	r30, r22
     f7c:	22 89       	ldd	r18, Z+18	; 0x12
     f7e:	fc 01       	movw	r30, r24
     f80:	20 8b       	std	Z+16, r18	; 0x10
     f82:	08 95       	ret

00000f84 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	ec 01       	movw	r28, r24
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
     f8a:	ea 85       	ldd	r30, Y+10	; 0x0a
     f8c:	fb 85       	ldd	r31, Y+11	; 0x0b
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	40 e0       	ldi	r20, 0x00	; 0
     f94:	68 e2       	ldi	r22, 0x28	; 40
     f96:	09 95       	icall
      u8x8_cad_Init(u8x8);
     f98:	ee 81       	ldd	r30, Y+6	; 0x06
     f9a:	ff 81       	ldd	r31, Y+7	; 0x07
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	64 e1       	ldi	r22, 0x14	; 20
     fa4:	ce 01       	movw	r24, r28
     fa6:	09 95       	icall

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	6b e4       	ldi	r22, 0x4B	; 75
     fac:	ce 01       	movw	r24, r28
     fae:	0d d1       	rcall	.+538    	; 0x11ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
     fb0:	e8 81       	ld	r30, Y
     fb2:	f9 81       	ldd	r31, Y+1	; 0x01
     fb4:	44 81       	ldd	r20, Z+4	; 0x04
     fb6:	69 e2       	ldi	r22, 0x29	; 41
     fb8:	ce 01       	movw	r24, r28
     fba:	07 d1       	rcall	.+526    	; 0x11ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
     fbc:	40 e0       	ldi	r20, 0x00	; 0
     fbe:	6b e4       	ldi	r22, 0x4B	; 75
     fc0:	ce 01       	movw	r24, r28
     fc2:	03 d1       	rcall	.+518    	; 0x11ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
     fc4:	e8 81       	ld	r30, Y
     fc6:	f9 81       	ldd	r31, Y+1	; 0x01
     fc8:	44 81       	ldd	r20, Z+4	; 0x04
     fca:	69 e2       	ldi	r22, 0x29	; 41
     fcc:	ce 01       	movw	r24, r28
     fce:	fd d0       	rcall	.+506    	; 0x11ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
     fd0:	41 e0       	ldi	r20, 0x01	; 1
     fd2:	6b e4       	ldi	r22, 0x4B	; 75
     fd4:	ce 01       	movw	r24, r28
     fd6:	f9 d0       	rcall	.+498    	; 0x11ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
     fd8:	e8 81       	ld	r30, Y
     fda:	f9 81       	ldd	r31, Y+1	; 0x01
     fdc:	45 81       	ldd	r20, Z+5	; 0x05
     fde:	69 e2       	ldi	r22, 0x29	; 41
     fe0:	ce 01       	movw	r24, r28
     fe2:	f3 d0       	rcall	.+486    	; 0x11ca <u8x8_gpio_call>
}    
     fe4:	df 91       	pop	r29
     fe6:	cf 91       	pop	r28
     fe8:	08 95       	ret

00000fea <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
     fea:	a5 e0       	ldi	r26, 0x05	; 5
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ea ef       	ldi	r30, 0xFA	; 250
     ff0:	f7 e0       	ldi	r31, 0x07	; 7
     ff2:	85 c1       	rjmp	.+778    	; 0x12fe <__prologue_saves__+0x1c>
  u8x8_tile_t tile;
  tile.x_pos = x;
     ff4:	6c 83       	std	Y+4, r22	; 0x04
  tile.y_pos = y;
     ff6:	4d 83       	std	Y+5, r20	; 0x05
  tile.cnt = cnt;
     ff8:	2b 83       	std	Y+3, r18	; 0x03
  tile.tile_ptr = tile_ptr;
     ffa:	1a 83       	std	Y+2, r17	; 0x02
     ffc:	09 83       	std	Y+1, r16	; 0x01
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
     ffe:	dc 01       	movw	r26, r24
    1000:	14 96       	adiw	r26, 0x04	; 4
    1002:	ed 91       	ld	r30, X+
    1004:	fc 91       	ld	r31, X
    1006:	15 97       	sbiw	r26, 0x05	; 5
    1008:	9e 01       	movw	r18, r28
    100a:	2f 5f       	subi	r18, 0xFF	; 255
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	41 e0       	ldi	r20, 0x01	; 1
    1010:	6f e0       	ldi	r22, 0x0F	; 15
    1012:	09 95       	icall
}
    1014:	25 96       	adiw	r28, 0x05	; 5
    1016:	e4 e0       	ldi	r30, 0x04	; 4
    1018:	8e c1       	rjmp	.+796    	; 0x1336 <__epilogue_restores__+0x1c>

0000101a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    101a:	dc 01       	movw	r26, r24
    101c:	14 96       	adiw	r26, 0x04	; 4
    101e:	ed 91       	ld	r30, X+
    1020:	fc 91       	ld	r31, X
    1022:	15 97       	sbiw	r26, 0x05	; 5
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	69 e0       	ldi	r22, 0x09	; 9
    102c:	09 95       	icall
    102e:	08 95       	ret

00001030 <u8x8_InitDisplay>:
}

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
    1030:	dc 01       	movw	r26, r24
    1032:	14 96       	adiw	r26, 0x04	; 4
    1034:	ed 91       	ld	r30, X+
    1036:	fc 91       	ld	r31, X
    1038:	15 97       	sbiw	r26, 0x05	; 5
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	6a e0       	ldi	r22, 0x0A	; 10
    1042:	09 95       	icall
    1044:	08 95       	ret

00001046 <u8x8_SetPowerSave>:
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    1046:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    1048:	dc 01       	movw	r26, r24
    104a:	14 96       	adiw	r26, 0x04	; 4
    104c:	ed 91       	ld	r30, X+
    104e:	fc 91       	ld	r31, X
    1050:	15 97       	sbiw	r26, 0x05	; 5
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	6b e0       	ldi	r22, 0x0B	; 11
    1058:	09 95       	icall
    105a:	08 95       	ret

0000105c <u8x8_ClearDisplayWithTile>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
}

void u8x8_ClearDisplayWithTile(u8x8_t *u8x8, const uint8_t *buf)
{
    105c:	cf 92       	push	r12
    105e:	df 92       	push	r13
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	cf 93       	push	r28
    1068:	df 93       	push	r29
    106a:	00 d0       	rcall	.+0      	; 0x106c <u8x8_ClearDisplayWithTile+0x10>
    106c:	00 d0       	rcall	.+0      	; 0x106e <u8x8_ClearDisplayWithTile+0x12>
    106e:	1f 92       	push	r1
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
    1074:	8c 01       	movw	r16, r24
  u8x8_tile_t tile;
  uint8_t h;

  tile.x_pos = 0;
    1076:	1c 82       	std	Y+4, r1	; 0x04
  tile.cnt = 1;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8b 83       	std	Y+3, r24	; 0x03
  tile.tile_ptr = (uint8_t *)buf;		/* tile_ptr should be const, but isn't */
    107c:	7a 83       	std	Y+2, r23	; 0x02
    107e:	69 83       	std	Y+1, r22	; 0x01
  
  h = u8x8->display_info->tile_height;
    1080:	d8 01       	movw	r26, r16
    1082:	ed 91       	ld	r30, X+
    1084:	fc 91       	ld	r31, X
    1086:	f1 88       	ldd	r15, Z+17	; 0x11
  tile.y_pos = 0;
    1088:	1d 82       	std	Y+5, r1	; 0x05
  do
  {
    u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, u8x8->display_info->tile_width, (void *)&tile);
    108a:	f8 01       	movw	r30, r16
    108c:	a0 81       	ld	r26, Z
    108e:	b1 81       	ldd	r27, Z+1	; 0x01
    1090:	c4 80       	ldd	r12, Z+4	; 0x04
    1092:	d5 80       	ldd	r13, Z+5	; 0x05
    1094:	9e 01       	movw	r18, r28
    1096:	2f 5f       	subi	r18, 0xFF	; 255
    1098:	3f 4f       	sbci	r19, 0xFF	; 255
    109a:	50 96       	adiw	r26, 0x10	; 16
    109c:	4c 91       	ld	r20, X
    109e:	6f e0       	ldi	r22, 0x0F	; 15
    10a0:	c8 01       	movw	r24, r16
    10a2:	f6 01       	movw	r30, r12
    10a4:	09 95       	icall
    tile.y_pos++;
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	9d 83       	std	Y+5, r25	; 0x05
  } while( tile.y_pos < h );
    10ac:	9f 15       	cp	r25, r15
    10ae:	68 f3       	brcs	.-38     	; 0x108a <u8x8_ClearDisplayWithTile+0x2e>
}
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	1f 91       	pop	r17
    10c0:	0f 91       	pop	r16
    10c2:	ff 90       	pop	r15
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	08 95       	ret

000010ca <u8x8_ClearDisplay>:

void u8x8_ClearDisplay(u8x8_t *u8x8)
{
    10ca:	a8 e0       	ldi	r26, 0x08	; 8
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	ea e6       	ldi	r30, 0x6A	; 106
    10d0:	f8 e0       	ldi	r31, 0x08	; 8
    10d2:	17 c1       	rjmp	.+558    	; 0x1302 <__prologue_saves__+0x20>
  uint8_t buf[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
    10d4:	be 01       	movw	r22, r28
    10d6:	6f 5f       	subi	r22, 0xFF	; 255
    10d8:	7f 4f       	sbci	r23, 0xFF	; 255
    10da:	28 e0       	ldi	r18, 0x08	; 8
    10dc:	fb 01       	movw	r30, r22
    10de:	11 92       	st	Z+, r1
    10e0:	2a 95       	dec	r18
    10e2:	e9 f7       	brne	.-6      	; 0x10de <u8x8_ClearDisplay+0x14>
  u8x8_ClearDisplayWithTile(u8x8, buf);
    10e4:	bb df       	rcall	.-138    	; 0x105c <u8x8_ClearDisplayWithTile>
}
    10e6:	28 96       	adiw	r28, 0x08	; 8
    10e8:	e2 e0       	ldi	r30, 0x02	; 2
    10ea:	27 c1       	rjmp	.+590    	; 0x133a <__epilogue_restores__+0x20>

000010ec <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    10ec:	ef 92       	push	r14
    10ee:	ff 92       	push	r15
    10f0:	0f 93       	push	r16
    10f2:	1f 93       	push	r17
    10f4:	cf 93       	push	r28
    10f6:	df 93       	push	r29
    10f8:	ec 01       	movw	r28, r24
    10fa:	14 2f       	mov	r17, r20
    10fc:	79 01       	movw	r14, r18
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
    10fe:	69 30       	cpi	r22, 0x09	; 9
    1100:	21 f4       	brne	.+8      	; 0x110a <u8x8_d_ssd1306_128x32_univision+0x1e>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
    1102:	64 ef       	ldi	r22, 0xF4	; 244
    1104:	71 e0       	ldi	r23, 0x01	; 1
    1106:	36 df       	rcall	.-404    	; 0xf74 <u8x8_d_helper_display_setup_memory>
    1108:	59 c0       	rjmp	.+178    	; 0x11bc <u8x8_d_ssd1306_128x32_univision+0xd0>

static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    110a:	6d 30       	cpi	r22, 0x0D	; 13
    110c:	89 f1       	breq	.+98     	; 0x1170 <u8x8_d_ssd1306_128x32_univision+0x84>
    110e:	28 f4       	brcc	.+10     	; 0x111a <u8x8_d_ssd1306_128x32_univision+0x2e>
    1110:	6a 30       	cpi	r22, 0x0A	; 10
    1112:	01 f1       	breq	.+64     	; 0x1154 <u8x8_d_ssd1306_128x32_univision+0x68>
    1114:	6b 30       	cpi	r22, 0x0B	; 11
    1116:	11 f1       	breq	.+68     	; 0x115c <u8x8_d_ssd1306_128x32_univision+0x70>
    1118:	53 c0       	rjmp	.+166    	; 0x11c0 <u8x8_d_ssd1306_128x32_univision+0xd4>
    111a:	6e 30       	cpi	r22, 0x0E	; 14
    111c:	d1 f1       	breq	.+116    	; 0x1192 <u8x8_d_ssd1306_128x32_univision+0xa6>
    111e:	6f 30       	cpi	r22, 0x0F	; 15
    1120:	09 f0       	breq	.+2      	; 0x1124 <u8x8_d_ssd1306_128x32_univision+0x38>
    1122:	4e c0       	rjmp	.+156    	; 0x11c0 <u8x8_d_ssd1306_128x32_univision+0xd4>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    1124:	7f de       	rcall	.-770    	; 0xe24 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    1126:	f7 01       	movw	r30, r14
    1128:	83 81       	ldd	r24, Z+3	; 0x03
      x *= 8;
      x += u8x8->x_offset;
    112a:	08 89       	ldd	r16, Y+16	; 0x10
    112c:	f8 e0       	ldi	r31, 0x08	; 8
    112e:	8f 9f       	mul	r24, r31
    1130:	00 0d       	add	r16, r0
    1132:	11 24       	eor	r1, r1
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    1134:	60 2f       	mov	r22, r16
    1136:	62 95       	swap	r22
    1138:	6f 70       	andi	r22, 0x0F	; 15
    113a:	60 61       	ori	r22, 0x10	; 16
    113c:	ce 01       	movw	r24, r28
    113e:	52 de       	rcall	.-860    	; 0xde4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
    1140:	60 2f       	mov	r22, r16
    1142:	6f 70       	andi	r22, 0x0F	; 15
    1144:	ce 01       	movw	r24, r28
    1146:	4e de       	rcall	.-868    	; 0xde4 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
    1148:	f7 01       	movw	r30, r14
    114a:	64 81       	ldd	r22, Z+4	; 0x04
    114c:	60 6b       	ori	r22, 0xB0	; 176
    114e:	ce 01       	movw	r24, r28
    1150:	49 de       	rcall	.-878    	; 0xde4 <u8x8_cad_SendCmd>
    1152:	27 c0       	rjmp	.+78     	; 0x11a2 <u8x8_d_ssd1306_128x32_univision+0xb6>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    1154:	17 df       	rcall	.-466    	; 0xf84 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
    1156:	64 e2       	ldi	r22, 0x24	; 36
    1158:	72 e0       	ldi	r23, 0x02	; 2
    115a:	07 c0       	rjmp	.+14     	; 0x116a <u8x8_d_ssd1306_128x32_univision+0x7e>
      break;
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    115c:	41 11       	cpse	r20, r1
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <u8x8_d_ssd1306_128x32_univision+0x7a>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
    1160:	6f e1       	ldi	r22, 0x1F	; 31
    1162:	72 e0       	ldi	r23, 0x02	; 2
    1164:	02 c0       	rjmp	.+4      	; 0x116a <u8x8_d_ssd1306_128x32_univision+0x7e>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
    1166:	6a e1       	ldi	r22, 0x1A	; 26
    1168:	72 e0       	ldi	r23, 0x02	; 2
    116a:	ce 01       	movw	r24, r28
    116c:	71 de       	rcall	.-798    	; 0xe50 <u8x8_cad_SendSequence>
    116e:	26 c0       	rjmp	.+76     	; 0x11bc <u8x8_d_ssd1306_128x32_univision+0xd0>
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    1170:	41 11       	cpse	r20, r1
    1172:	07 c0       	rjmp	.+14     	; 0x1182 <u8x8_d_ssd1306_128x32_univision+0x96>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
    1174:	63 e1       	ldi	r22, 0x13	; 19
    1176:	72 e0       	ldi	r23, 0x02	; 2
    1178:	6b de       	rcall	.-810    	; 0xe50 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    117a:	e8 81       	ld	r30, Y
    117c:	f9 81       	ldd	r31, Y+1	; 0x01
    117e:	82 89       	ldd	r24, Z+18	; 0x12
    1180:	06 c0       	rjmp	.+12     	; 0x118e <u8x8_d_ssd1306_128x32_univision+0xa2>
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
    1182:	6c e0       	ldi	r22, 0x0C	; 12
    1184:	72 e0       	ldi	r23, 0x02	; 2
    1186:	64 de       	rcall	.-824    	; 0xe50 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    1188:	e8 81       	ld	r30, Y
    118a:	f9 81       	ldd	r31, Y+1	; 0x01
    118c:	83 89       	ldd	r24, Z+19	; 0x13
    118e:	88 8b       	std	Y+16, r24	; 0x10
    1190:	15 c0       	rjmp	.+42     	; 0x11bc <u8x8_d_ssd1306_128x32_univision+0xd0>
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    1192:	48 de       	rcall	.-880    	; 0xe24 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    1194:	61 e8       	ldi	r22, 0x81	; 129
    1196:	ce 01       	movw	r24, r28
    1198:	25 de       	rcall	.-950    	; 0xde4 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    119a:	61 2f       	mov	r22, r17
    119c:	ce 01       	movw	r24, r28
    119e:	2d de       	rcall	.-934    	; 0xdfa <u8x8_cad_SendArg>
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <u8x8_d_ssd1306_128x32_univision+0xcc>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    11a2:	f7 01       	movw	r30, r14
    11a4:	40 81       	ld	r20, Z
    11a6:	51 81       	ldd	r21, Z+1	; 0x01
    11a8:	62 81       	ldd	r22, Z+2	; 0x02
    11aa:	66 0f       	add	r22, r22
    11ac:	66 0f       	add	r22, r22
    11ae:	66 0f       	add	r22, r22
    11b0:	ce 01       	movw	r24, r28
    11b2:	2e de       	rcall	.-932    	; 0xe10 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    11b4:	11 50       	subi	r17, 0x01	; 1
      } while( arg_int > 0 );
    11b6:	a9 f7       	brne	.-22     	; 0x11a2 <u8x8_d_ssd1306_128x32_univision+0xb6>
      
      u8x8_cad_EndTransfer(u8x8);
    11b8:	ce 01       	movw	r24, r28
    11ba:	3f de       	rcall	.-898    	; 0xe3a <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <u8x8_d_ssd1306_128x32_univision+0xd6>
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      return 1;
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
}
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	b4 c0       	rjmp	.+360    	; 0x1332 <__epilogue_restores__+0x18>

000011ca <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    11ca:	dc 01       	movw	r26, r24
    11cc:	1a 96       	adiw	r26, 0x0a	; 10
    11ce:	ed 91       	ld	r30, X+
    11d0:	fc 91       	ld	r31, X
    11d2:	1b 97       	sbiw	r26, 0x0b	; 11
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	09 95       	icall
    11da:	08 95       	ret

000011dc <u8x8_dummy_cb>:

uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
}
    11dc:	80 e0       	ldi	r24, 0x00	; 0
    11de:	08 95       	ret

000011e0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    11e0:	fc 01       	movw	r30, r24
    u8x8->display_info = NULL;
    11e2:	11 82       	std	Z+1, r1	; 0x01
    11e4:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    11e6:	8e ee       	ldi	r24, 0xEE	; 238
    11e8:	98 e0       	ldi	r25, 0x08	; 8
    11ea:	95 83       	std	Z+5, r25	; 0x05
    11ec:	84 83       	std	Z+4, r24	; 0x04
    u8x8->cad_cb = u8x8_dummy_cb;
    11ee:	97 83       	std	Z+7, r25	; 0x07
    11f0:	86 83       	std	Z+6, r24	; 0x06
    u8x8->byte_cb = u8x8_dummy_cb;
    11f2:	91 87       	std	Z+9, r25	; 0x09
    11f4:	80 87       	std	Z+8, r24	; 0x08
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    11f6:	93 87       	std	Z+11, r25	; 0x0b
    11f8:	82 87       	std	Z+10, r24	; 0x0a
    u8x8->is_font_inverse_mode = 0;
    11fa:	11 8a       	std	Z+17, r1	; 0x11
    u8x8->device_address = 0;
    11fc:	14 8a       	std	Z+20, r1	; 0x14
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    11fe:	15 8a       	std	Z+21, r1	; 0x15
    u8x8->i2c_address = 255;
    1200:	8f ef       	ldi	r24, 0xFF	; 255
    1202:	82 8b       	std	Z+18, r24	; 0x12
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    1204:	87 8b       	std	Z+23, r24	; 0x17
    1206:	08 95       	ret

00001208 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1208:	a0 e0       	ldi	r26, 0x00	; 0
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e9 e0       	ldi	r30, 0x09	; 9
    120e:	f9 e0       	ldi	r31, 0x09	; 9
    1210:	70 c0       	rjmp	.+224    	; 0x12f2 <__prologue_saves__+0x10>
    1212:	ec 01       	movw	r28, r24
    1214:	5b 01       	movw	r10, r22
    1216:	6a 01       	movw	r12, r20
    1218:	79 01       	movw	r14, r18
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
    121a:	e2 df       	rcall	.-60     	; 0x11e0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    121c:	bd 82       	std	Y+5, r11	; 0x05
    121e:	ac 82       	std	Y+4, r10	; 0x04
  u8x8->cad_cb = cad_cb;
    1220:	df 82       	std	Y+7, r13	; 0x07
    1222:	ce 82       	std	Y+6, r12	; 0x06
  u8x8->byte_cb = byte_cb;
    1224:	f9 86       	std	Y+9, r15	; 0x09
    1226:	e8 86       	std	Y+8, r14	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    1228:	1b 87       	std	Y+11, r17	; 0x0b
    122a:	0a 87       	std	Y+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    122c:	ce 01       	movw	r24, r28
    122e:	f5 de       	rcall	.-534    	; 0x101a <u8x8_SetupMemory>
}
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	ea e0       	ldi	r30, 0x0A	; 10
    1236:	79 c0       	rjmp	.+242    	; 0x132a <__epilogue_restores__+0x10>

00001238 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    1238:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    123a:	dc 01       	movw	r26, r24
    123c:	18 96       	adiw	r26, 0x08	; 8
    123e:	ed 91       	ld	r30, X+
    1240:	fc 91       	ld	r31, X
    1242:	19 97       	sbiw	r26, 0x09	; 9
    1244:	46 2f       	mov	r20, r22
    1246:	67 e1       	ldi	r22, 0x17	; 23
    1248:	09 95       	icall
}
    124a:	08 95       	ret

0000124c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    124c:	a1 e0       	ldi	r26, 0x01	; 1
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e2       	ldi	r30, 0x2B	; 43
    1252:	f9 e0       	ldi	r31, 0x09	; 9
    1254:	56 c0       	rjmp	.+172    	; 0x1302 <__prologue_saves__+0x20>
    1256:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    1258:	ae 01       	movw	r20, r28
    125a:	4f 5f       	subi	r20, 0xFF	; 255
    125c:	5f 4f       	sbci	r21, 0xFF	; 255
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	eb df       	rcall	.-42     	; 0x1238 <u8x8_byte_SendBytes>
}
    1262:	21 96       	adiw	r28, 0x01	; 1
    1264:	e2 e0       	ldi	r30, 0x02	; 2
    1266:	69 c0       	rjmp	.+210    	; 0x133a <__epilogue_restores__+0x20>

00001268 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    1268:	dc 01       	movw	r26, r24
    126a:	18 96       	adiw	r26, 0x08	; 8
    126c:	ed 91       	ld	r30, X+
    126e:	fc 91       	ld	r31, X
    1270:	19 97       	sbiw	r26, 0x09	; 9
    1272:	20 e0       	ldi	r18, 0x00	; 0
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	40 e0       	ldi	r20, 0x00	; 0
    1278:	68 e1       	ldi	r22, 0x18	; 24
    127a:	09 95       	icall
}
    127c:	08 95       	ret

0000127e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    127e:	dc 01       	movw	r26, r24
    1280:	18 96       	adiw	r26, 0x08	; 8
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	19 97       	sbiw	r26, 0x09	; 9
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	69 e1       	ldi	r22, 0x19	; 25
    1290:	09 95       	icall
}
    1292:	08 95       	ret

00001294 <__udivmodhi4>:
    1294:	aa 1b       	sub	r26, r26
    1296:	bb 1b       	sub	r27, r27
    1298:	51 e1       	ldi	r21, 0x11	; 17
    129a:	07 c0       	rjmp	.+14     	; 0x12aa <__udivmodhi4_ep>

0000129c <__udivmodhi4_loop>:
    129c:	aa 1f       	adc	r26, r26
    129e:	bb 1f       	adc	r27, r27
    12a0:	a6 17       	cp	r26, r22
    12a2:	b7 07       	cpc	r27, r23
    12a4:	10 f0       	brcs	.+4      	; 0x12aa <__udivmodhi4_ep>
    12a6:	a6 1b       	sub	r26, r22
    12a8:	b7 0b       	sbc	r27, r23

000012aa <__udivmodhi4_ep>:
    12aa:	88 1f       	adc	r24, r24
    12ac:	99 1f       	adc	r25, r25
    12ae:	5a 95       	dec	r21
    12b0:	a9 f7       	brne	.-22     	; 0x129c <__udivmodhi4_loop>
    12b2:	80 95       	com	r24
    12b4:	90 95       	com	r25
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	08 95       	ret

000012bc <__divmodhi4>:
    12bc:	97 fb       	bst	r25, 7
    12be:	07 2e       	mov	r0, r23
    12c0:	16 f4       	brtc	.+4      	; 0x12c6 <__divmodhi4+0xa>
    12c2:	00 94       	com	r0
    12c4:	06 d0       	rcall	.+12     	; 0x12d2 <__divmodhi4_neg1>
    12c6:	77 fd       	sbrc	r23, 7
    12c8:	08 d0       	rcall	.+16     	; 0x12da <__divmodhi4_neg2>
    12ca:	e4 df       	rcall	.-56     	; 0x1294 <__udivmodhi4>
    12cc:	07 fc       	sbrc	r0, 7
    12ce:	05 d0       	rcall	.+10     	; 0x12da <__divmodhi4_neg2>
    12d0:	3e f4       	brtc	.+14     	; 0x12e0 <__divmodhi4_exit>

000012d2 <__divmodhi4_neg1>:
    12d2:	90 95       	com	r25
    12d4:	81 95       	neg	r24
    12d6:	9f 4f       	sbci	r25, 0xFF	; 255
    12d8:	08 95       	ret

000012da <__divmodhi4_neg2>:
    12da:	70 95       	com	r23
    12dc:	61 95       	neg	r22
    12de:	7f 4f       	sbci	r23, 0xFF	; 255

000012e0 <__divmodhi4_exit>:
    12e0:	08 95       	ret

000012e2 <__prologue_saves__>:
    12e2:	2f 92       	push	r2
    12e4:	3f 92       	push	r3
    12e6:	4f 92       	push	r4
    12e8:	5f 92       	push	r5
    12ea:	6f 92       	push	r6
    12ec:	7f 92       	push	r7
    12ee:	8f 92       	push	r8
    12f0:	9f 92       	push	r9
    12f2:	af 92       	push	r10
    12f4:	bf 92       	push	r11
    12f6:	cf 92       	push	r12
    12f8:	df 92       	push	r13
    12fa:	ef 92       	push	r14
    12fc:	ff 92       	push	r15
    12fe:	0f 93       	push	r16
    1300:	1f 93       	push	r17
    1302:	cf 93       	push	r28
    1304:	df 93       	push	r29
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	ca 1b       	sub	r28, r26
    130c:	db 0b       	sbc	r29, r27
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	09 94       	ijmp

0000131a <__epilogue_restores__>:
    131a:	2a 88       	ldd	r2, Y+18	; 0x12
    131c:	39 88       	ldd	r3, Y+17	; 0x11
    131e:	48 88       	ldd	r4, Y+16	; 0x10
    1320:	5f 84       	ldd	r5, Y+15	; 0x0f
    1322:	6e 84       	ldd	r6, Y+14	; 0x0e
    1324:	7d 84       	ldd	r7, Y+13	; 0x0d
    1326:	8c 84       	ldd	r8, Y+12	; 0x0c
    1328:	9b 84       	ldd	r9, Y+11	; 0x0b
    132a:	aa 84       	ldd	r10, Y+10	; 0x0a
    132c:	b9 84       	ldd	r11, Y+9	; 0x09
    132e:	c8 84       	ldd	r12, Y+8	; 0x08
    1330:	df 80       	ldd	r13, Y+7	; 0x07
    1332:	ee 80       	ldd	r14, Y+6	; 0x06
    1334:	fd 80       	ldd	r15, Y+5	; 0x05
    1336:	0c 81       	ldd	r16, Y+4	; 0x04
    1338:	1b 81       	ldd	r17, Y+3	; 0x03
    133a:	aa 81       	ldd	r26, Y+2	; 0x02
    133c:	b9 81       	ldd	r27, Y+1	; 0x01
    133e:	ce 0f       	add	r28, r30
    1340:	d1 1d       	adc	r29, r1
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	ed 01       	movw	r28, r26
    134e:	08 95       	ret

00001350 <strcpy>:
    1350:	fb 01       	movw	r30, r22
    1352:	dc 01       	movw	r26, r24
    1354:	01 90       	ld	r0, Z+
    1356:	0d 92       	st	X+, r0
    1358:	00 20       	and	r0, r0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <strcpy+0x4>
    135c:	08 95       	ret

0000135e <sprintf>:
    135e:	ae e0       	ldi	r26, 0x0E	; 14
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	e4 eb       	ldi	r30, 0xB4	; 180
    1364:	f9 e0       	ldi	r31, 0x09	; 9
    1366:	cb cf       	rjmp	.-106    	; 0x12fe <__prologue_saves__+0x1c>
    1368:	0d 89       	ldd	r16, Y+21	; 0x15
    136a:	1e 89       	ldd	r17, Y+22	; 0x16
    136c:	86 e0       	ldi	r24, 0x06	; 6
    136e:	8c 83       	std	Y+4, r24	; 0x04
    1370:	1a 83       	std	Y+2, r17	; 0x02
    1372:	09 83       	std	Y+1, r16	; 0x01
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	9f e7       	ldi	r25, 0x7F	; 127
    1378:	9e 83       	std	Y+6, r25	; 0x06
    137a:	8d 83       	std	Y+5, r24	; 0x05
    137c:	ae 01       	movw	r20, r28
    137e:	47 5e       	subi	r20, 0xE7	; 231
    1380:	5f 4f       	sbci	r21, 0xFF	; 255
    1382:	6f 89       	ldd	r22, Y+23	; 0x17
    1384:	78 8d       	ldd	r23, Y+24	; 0x18
    1386:	ce 01       	movw	r24, r28
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	09 d0       	rcall	.+18     	; 0x139e <vfprintf>
    138c:	2f 81       	ldd	r18, Y+7	; 0x07
    138e:	38 85       	ldd	r19, Y+8	; 0x08
    1390:	f8 01       	movw	r30, r16
    1392:	e2 0f       	add	r30, r18
    1394:	f3 1f       	adc	r31, r19
    1396:	10 82       	st	Z, r1
    1398:	2e 96       	adiw	r28, 0x0e	; 14
    139a:	e4 e0       	ldi	r30, 0x04	; 4
    139c:	cc cf       	rjmp	.-104    	; 0x1336 <__epilogue_restores__+0x1c>

0000139e <vfprintf>:
    139e:	ac e0       	ldi	r26, 0x0C	; 12
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e4 ed       	ldi	r30, 0xD4	; 212
    13a4:	f9 e0       	ldi	r31, 0x09	; 9
    13a6:	9d cf       	rjmp	.-198    	; 0x12e2 <__prologue_saves__>
    13a8:	7c 01       	movw	r14, r24
    13aa:	6b 01       	movw	r12, r22
    13ac:	8a 01       	movw	r16, r20
    13ae:	fc 01       	movw	r30, r24
    13b0:	17 82       	std	Z+7, r1	; 0x07
    13b2:	16 82       	std	Z+6, r1	; 0x06
    13b4:	83 81       	ldd	r24, Z+3	; 0x03
    13b6:	81 ff       	sbrs	r24, 1
    13b8:	b0 c1       	rjmp	.+864    	; 0x171a <vfprintf+0x37c>
    13ba:	ce 01       	movw	r24, r28
    13bc:	01 96       	adiw	r24, 0x01	; 1
    13be:	4c 01       	movw	r8, r24
    13c0:	f7 01       	movw	r30, r14
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	f6 01       	movw	r30, r12
    13c6:	93 fd       	sbrc	r25, 3
    13c8:	85 91       	lpm	r24, Z+
    13ca:	93 ff       	sbrs	r25, 3
    13cc:	81 91       	ld	r24, Z+
    13ce:	6f 01       	movw	r12, r30
    13d0:	88 23       	and	r24, r24
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <vfprintf+0x38>
    13d4:	9e c1       	rjmp	.+828    	; 0x1712 <vfprintf+0x374>
    13d6:	85 32       	cpi	r24, 0x25	; 37
    13d8:	39 f4       	brne	.+14     	; 0x13e8 <vfprintf+0x4a>
    13da:	93 fd       	sbrc	r25, 3
    13dc:	85 91       	lpm	r24, Z+
    13de:	93 ff       	sbrs	r25, 3
    13e0:	81 91       	ld	r24, Z+
    13e2:	6f 01       	movw	r12, r30
    13e4:	85 32       	cpi	r24, 0x25	; 37
    13e6:	21 f4       	brne	.+8      	; 0x13f0 <vfprintf+0x52>
    13e8:	b7 01       	movw	r22, r14
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	b1 d1       	rcall	.+866    	; 0x1750 <fputc>
    13ee:	e8 cf       	rjmp	.-48     	; 0x13c0 <vfprintf+0x22>
    13f0:	51 2c       	mov	r5, r1
    13f2:	31 2c       	mov	r3, r1
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	20 32       	cpi	r18, 0x20	; 32
    13f8:	a0 f4       	brcc	.+40     	; 0x1422 <vfprintf+0x84>
    13fa:	8b 32       	cpi	r24, 0x2B	; 43
    13fc:	69 f0       	breq	.+26     	; 0x1418 <vfprintf+0x7a>
    13fe:	30 f4       	brcc	.+12     	; 0x140c <vfprintf+0x6e>
    1400:	80 32       	cpi	r24, 0x20	; 32
    1402:	59 f0       	breq	.+22     	; 0x141a <vfprintf+0x7c>
    1404:	83 32       	cpi	r24, 0x23	; 35
    1406:	69 f4       	brne	.+26     	; 0x1422 <vfprintf+0x84>
    1408:	20 61       	ori	r18, 0x10	; 16
    140a:	2c c0       	rjmp	.+88     	; 0x1464 <vfprintf+0xc6>
    140c:	8d 32       	cpi	r24, 0x2D	; 45
    140e:	39 f0       	breq	.+14     	; 0x141e <vfprintf+0x80>
    1410:	80 33       	cpi	r24, 0x30	; 48
    1412:	39 f4       	brne	.+14     	; 0x1422 <vfprintf+0x84>
    1414:	21 60       	ori	r18, 0x01	; 1
    1416:	26 c0       	rjmp	.+76     	; 0x1464 <vfprintf+0xc6>
    1418:	22 60       	ori	r18, 0x02	; 2
    141a:	24 60       	ori	r18, 0x04	; 4
    141c:	23 c0       	rjmp	.+70     	; 0x1464 <vfprintf+0xc6>
    141e:	28 60       	ori	r18, 0x08	; 8
    1420:	21 c0       	rjmp	.+66     	; 0x1464 <vfprintf+0xc6>
    1422:	27 fd       	sbrc	r18, 7
    1424:	27 c0       	rjmp	.+78     	; 0x1474 <vfprintf+0xd6>
    1426:	30 ed       	ldi	r19, 0xD0	; 208
    1428:	38 0f       	add	r19, r24
    142a:	3a 30       	cpi	r19, 0x0A	; 10
    142c:	78 f4       	brcc	.+30     	; 0x144c <vfprintf+0xae>
    142e:	26 ff       	sbrs	r18, 6
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0xa0>
    1432:	fa e0       	ldi	r31, 0x0A	; 10
    1434:	5f 9e       	mul	r5, r31
    1436:	30 0d       	add	r19, r0
    1438:	11 24       	eor	r1, r1
    143a:	53 2e       	mov	r5, r19
    143c:	13 c0       	rjmp	.+38     	; 0x1464 <vfprintf+0xc6>
    143e:	8a e0       	ldi	r24, 0x0A	; 10
    1440:	38 9e       	mul	r3, r24
    1442:	30 0d       	add	r19, r0
    1444:	11 24       	eor	r1, r1
    1446:	33 2e       	mov	r3, r19
    1448:	20 62       	ori	r18, 0x20	; 32
    144a:	0c c0       	rjmp	.+24     	; 0x1464 <vfprintf+0xc6>
    144c:	8e 32       	cpi	r24, 0x2E	; 46
    144e:	21 f4       	brne	.+8      	; 0x1458 <vfprintf+0xba>
    1450:	26 fd       	sbrc	r18, 6
    1452:	5f c1       	rjmp	.+702    	; 0x1712 <vfprintf+0x374>
    1454:	20 64       	ori	r18, 0x40	; 64
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <vfprintf+0xc6>
    1458:	8c 36       	cpi	r24, 0x6C	; 108
    145a:	11 f4       	brne	.+4      	; 0x1460 <vfprintf+0xc2>
    145c:	20 68       	ori	r18, 0x80	; 128
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0xc6>
    1460:	88 36       	cpi	r24, 0x68	; 104
    1462:	41 f4       	brne	.+16     	; 0x1474 <vfprintf+0xd6>
    1464:	f6 01       	movw	r30, r12
    1466:	93 fd       	sbrc	r25, 3
    1468:	85 91       	lpm	r24, Z+
    146a:	93 ff       	sbrs	r25, 3
    146c:	81 91       	ld	r24, Z+
    146e:	6f 01       	movw	r12, r30
    1470:	81 11       	cpse	r24, r1
    1472:	c1 cf       	rjmp	.-126    	; 0x13f6 <vfprintf+0x58>
    1474:	98 2f       	mov	r25, r24
    1476:	9f 7d       	andi	r25, 0xDF	; 223
    1478:	95 54       	subi	r25, 0x45	; 69
    147a:	93 30       	cpi	r25, 0x03	; 3
    147c:	28 f4       	brcc	.+10     	; 0x1488 <vfprintf+0xea>
    147e:	0c 5f       	subi	r16, 0xFC	; 252
    1480:	1f 4f       	sbci	r17, 0xFF	; 255
    1482:	ff e3       	ldi	r31, 0x3F	; 63
    1484:	f9 83       	std	Y+1, r31	; 0x01
    1486:	0d c0       	rjmp	.+26     	; 0x14a2 <vfprintf+0x104>
    1488:	83 36       	cpi	r24, 0x63	; 99
    148a:	31 f0       	breq	.+12     	; 0x1498 <vfprintf+0xfa>
    148c:	83 37       	cpi	r24, 0x73	; 115
    148e:	71 f0       	breq	.+28     	; 0x14ac <vfprintf+0x10e>
    1490:	83 35       	cpi	r24, 0x53	; 83
    1492:	09 f0       	breq	.+2      	; 0x1496 <vfprintf+0xf8>
    1494:	57 c0       	rjmp	.+174    	; 0x1544 <vfprintf+0x1a6>
    1496:	21 c0       	rjmp	.+66     	; 0x14da <vfprintf+0x13c>
    1498:	f8 01       	movw	r30, r16
    149a:	80 81       	ld	r24, Z
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	0e 5f       	subi	r16, 0xFE	; 254
    14a0:	1f 4f       	sbci	r17, 0xFF	; 255
    14a2:	44 24       	eor	r4, r4
    14a4:	43 94       	inc	r4
    14a6:	51 2c       	mov	r5, r1
    14a8:	54 01       	movw	r10, r8
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <vfprintf+0x136>
    14ac:	38 01       	movw	r6, r16
    14ae:	f2 e0       	ldi	r31, 0x02	; 2
    14b0:	6f 0e       	add	r6, r31
    14b2:	71 1c       	adc	r7, r1
    14b4:	f8 01       	movw	r30, r16
    14b6:	a0 80       	ld	r10, Z
    14b8:	b1 80       	ldd	r11, Z+1	; 0x01
    14ba:	26 ff       	sbrs	r18, 6
    14bc:	03 c0       	rjmp	.+6      	; 0x14c4 <vfprintf+0x126>
    14be:	65 2d       	mov	r22, r5
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <vfprintf+0x12a>
    14c4:	6f ef       	ldi	r22, 0xFF	; 255
    14c6:	7f ef       	ldi	r23, 0xFF	; 255
    14c8:	c5 01       	movw	r24, r10
    14ca:	2c 87       	std	Y+12, r18	; 0x0c
    14cc:	36 d1       	rcall	.+620    	; 0x173a <strnlen>
    14ce:	2c 01       	movw	r4, r24
    14d0:	83 01       	movw	r16, r6
    14d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    14d4:	2f 77       	andi	r18, 0x7F	; 127
    14d6:	22 2e       	mov	r2, r18
    14d8:	16 c0       	rjmp	.+44     	; 0x1506 <vfprintf+0x168>
    14da:	38 01       	movw	r6, r16
    14dc:	f2 e0       	ldi	r31, 0x02	; 2
    14de:	6f 0e       	add	r6, r31
    14e0:	71 1c       	adc	r7, r1
    14e2:	f8 01       	movw	r30, r16
    14e4:	a0 80       	ld	r10, Z
    14e6:	b1 80       	ldd	r11, Z+1	; 0x01
    14e8:	26 ff       	sbrs	r18, 6
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <vfprintf+0x154>
    14ec:	65 2d       	mov	r22, r5
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <vfprintf+0x158>
    14f2:	6f ef       	ldi	r22, 0xFF	; 255
    14f4:	7f ef       	ldi	r23, 0xFF	; 255
    14f6:	c5 01       	movw	r24, r10
    14f8:	2c 87       	std	Y+12, r18	; 0x0c
    14fa:	14 d1       	rcall	.+552    	; 0x1724 <strnlen_P>
    14fc:	2c 01       	movw	r4, r24
    14fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1500:	20 68       	ori	r18, 0x80	; 128
    1502:	22 2e       	mov	r2, r18
    1504:	83 01       	movw	r16, r6
    1506:	23 fc       	sbrc	r2, 3
    1508:	19 c0       	rjmp	.+50     	; 0x153c <vfprintf+0x19e>
    150a:	83 2d       	mov	r24, r3
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	48 16       	cp	r4, r24
    1510:	59 06       	cpc	r5, r25
    1512:	a0 f4       	brcc	.+40     	; 0x153c <vfprintf+0x19e>
    1514:	b7 01       	movw	r22, r14
    1516:	80 e2       	ldi	r24, 0x20	; 32
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	1a d1       	rcall	.+564    	; 0x1750 <fputc>
    151c:	3a 94       	dec	r3
    151e:	f5 cf       	rjmp	.-22     	; 0x150a <vfprintf+0x16c>
    1520:	f5 01       	movw	r30, r10
    1522:	27 fc       	sbrc	r2, 7
    1524:	85 91       	lpm	r24, Z+
    1526:	27 fe       	sbrs	r2, 7
    1528:	81 91       	ld	r24, Z+
    152a:	5f 01       	movw	r10, r30
    152c:	b7 01       	movw	r22, r14
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0f d1       	rcall	.+542    	; 0x1750 <fputc>
    1532:	31 10       	cpse	r3, r1
    1534:	3a 94       	dec	r3
    1536:	f1 e0       	ldi	r31, 0x01	; 1
    1538:	4f 1a       	sub	r4, r31
    153a:	51 08       	sbc	r5, r1
    153c:	41 14       	cp	r4, r1
    153e:	51 04       	cpc	r5, r1
    1540:	79 f7       	brne	.-34     	; 0x1520 <vfprintf+0x182>
    1542:	de c0       	rjmp	.+444    	; 0x1700 <vfprintf+0x362>
    1544:	84 36       	cpi	r24, 0x64	; 100
    1546:	11 f0       	breq	.+4      	; 0x154c <vfprintf+0x1ae>
    1548:	89 36       	cpi	r24, 0x69	; 105
    154a:	31 f5       	brne	.+76     	; 0x1598 <vfprintf+0x1fa>
    154c:	f8 01       	movw	r30, r16
    154e:	27 ff       	sbrs	r18, 7
    1550:	07 c0       	rjmp	.+14     	; 0x1560 <vfprintf+0x1c2>
    1552:	60 81       	ld	r22, Z
    1554:	71 81       	ldd	r23, Z+1	; 0x01
    1556:	82 81       	ldd	r24, Z+2	; 0x02
    1558:	93 81       	ldd	r25, Z+3	; 0x03
    155a:	0c 5f       	subi	r16, 0xFC	; 252
    155c:	1f 4f       	sbci	r17, 0xFF	; 255
    155e:	08 c0       	rjmp	.+16     	; 0x1570 <vfprintf+0x1d2>
    1560:	60 81       	ld	r22, Z
    1562:	71 81       	ldd	r23, Z+1	; 0x01
    1564:	07 2e       	mov	r0, r23
    1566:	00 0c       	add	r0, r0
    1568:	88 0b       	sbc	r24, r24
    156a:	99 0b       	sbc	r25, r25
    156c:	0e 5f       	subi	r16, 0xFE	; 254
    156e:	1f 4f       	sbci	r17, 0xFF	; 255
    1570:	2f 76       	andi	r18, 0x6F	; 111
    1572:	72 2e       	mov	r7, r18
    1574:	97 ff       	sbrs	r25, 7
    1576:	09 c0       	rjmp	.+18     	; 0x158a <vfprintf+0x1ec>
    1578:	90 95       	com	r25
    157a:	80 95       	com	r24
    157c:	70 95       	com	r23
    157e:	61 95       	neg	r22
    1580:	7f 4f       	sbci	r23, 0xFF	; 255
    1582:	8f 4f       	sbci	r24, 0xFF	; 255
    1584:	9f 4f       	sbci	r25, 0xFF	; 255
    1586:	20 68       	ori	r18, 0x80	; 128
    1588:	72 2e       	mov	r7, r18
    158a:	2a e0       	ldi	r18, 0x0A	; 10
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	a4 01       	movw	r20, r8
    1590:	17 d1       	rcall	.+558    	; 0x17c0 <__ultoa_invert>
    1592:	a8 2e       	mov	r10, r24
    1594:	a8 18       	sub	r10, r8
    1596:	43 c0       	rjmp	.+134    	; 0x161e <vfprintf+0x280>
    1598:	85 37       	cpi	r24, 0x75	; 117
    159a:	29 f4       	brne	.+10     	; 0x15a6 <vfprintf+0x208>
    159c:	2f 7e       	andi	r18, 0xEF	; 239
    159e:	b2 2e       	mov	r11, r18
    15a0:	2a e0       	ldi	r18, 0x0A	; 10
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	25 c0       	rjmp	.+74     	; 0x15f0 <vfprintf+0x252>
    15a6:	f2 2f       	mov	r31, r18
    15a8:	f9 7f       	andi	r31, 0xF9	; 249
    15aa:	bf 2e       	mov	r11, r31
    15ac:	8f 36       	cpi	r24, 0x6F	; 111
    15ae:	c1 f0       	breq	.+48     	; 0x15e0 <vfprintf+0x242>
    15b0:	18 f4       	brcc	.+6      	; 0x15b8 <vfprintf+0x21a>
    15b2:	88 35       	cpi	r24, 0x58	; 88
    15b4:	79 f0       	breq	.+30     	; 0x15d4 <vfprintf+0x236>
    15b6:	ad c0       	rjmp	.+346    	; 0x1712 <vfprintf+0x374>
    15b8:	80 37       	cpi	r24, 0x70	; 112
    15ba:	19 f0       	breq	.+6      	; 0x15c2 <vfprintf+0x224>
    15bc:	88 37       	cpi	r24, 0x78	; 120
    15be:	21 f0       	breq	.+8      	; 0x15c8 <vfprintf+0x22a>
    15c0:	a8 c0       	rjmp	.+336    	; 0x1712 <vfprintf+0x374>
    15c2:	2f 2f       	mov	r18, r31
    15c4:	20 61       	ori	r18, 0x10	; 16
    15c6:	b2 2e       	mov	r11, r18
    15c8:	b4 fe       	sbrs	r11, 4
    15ca:	0d c0       	rjmp	.+26     	; 0x15e6 <vfprintf+0x248>
    15cc:	8b 2d       	mov	r24, r11
    15ce:	84 60       	ori	r24, 0x04	; 4
    15d0:	b8 2e       	mov	r11, r24
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <vfprintf+0x248>
    15d4:	24 ff       	sbrs	r18, 4
    15d6:	0a c0       	rjmp	.+20     	; 0x15ec <vfprintf+0x24e>
    15d8:	9f 2f       	mov	r25, r31
    15da:	96 60       	ori	r25, 0x06	; 6
    15dc:	b9 2e       	mov	r11, r25
    15de:	06 c0       	rjmp	.+12     	; 0x15ec <vfprintf+0x24e>
    15e0:	28 e0       	ldi	r18, 0x08	; 8
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	05 c0       	rjmp	.+10     	; 0x15f0 <vfprintf+0x252>
    15e6:	20 e1       	ldi	r18, 0x10	; 16
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <vfprintf+0x252>
    15ec:	20 e1       	ldi	r18, 0x10	; 16
    15ee:	32 e0       	ldi	r19, 0x02	; 2
    15f0:	f8 01       	movw	r30, r16
    15f2:	b7 fe       	sbrs	r11, 7
    15f4:	07 c0       	rjmp	.+14     	; 0x1604 <vfprintf+0x266>
    15f6:	60 81       	ld	r22, Z
    15f8:	71 81       	ldd	r23, Z+1	; 0x01
    15fa:	82 81       	ldd	r24, Z+2	; 0x02
    15fc:	93 81       	ldd	r25, Z+3	; 0x03
    15fe:	0c 5f       	subi	r16, 0xFC	; 252
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	06 c0       	rjmp	.+12     	; 0x1610 <vfprintf+0x272>
    1604:	60 81       	ld	r22, Z
    1606:	71 81       	ldd	r23, Z+1	; 0x01
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	0e 5f       	subi	r16, 0xFE	; 254
    160e:	1f 4f       	sbci	r17, 0xFF	; 255
    1610:	a4 01       	movw	r20, r8
    1612:	d6 d0       	rcall	.+428    	; 0x17c0 <__ultoa_invert>
    1614:	a8 2e       	mov	r10, r24
    1616:	a8 18       	sub	r10, r8
    1618:	fb 2d       	mov	r31, r11
    161a:	ff 77       	andi	r31, 0x7F	; 127
    161c:	7f 2e       	mov	r7, r31
    161e:	76 fe       	sbrs	r7, 6
    1620:	0b c0       	rjmp	.+22     	; 0x1638 <vfprintf+0x29a>
    1622:	37 2d       	mov	r19, r7
    1624:	3e 7f       	andi	r19, 0xFE	; 254
    1626:	a5 14       	cp	r10, r5
    1628:	50 f4       	brcc	.+20     	; 0x163e <vfprintf+0x2a0>
    162a:	74 fe       	sbrs	r7, 4
    162c:	0a c0       	rjmp	.+20     	; 0x1642 <vfprintf+0x2a4>
    162e:	72 fc       	sbrc	r7, 2
    1630:	08 c0       	rjmp	.+16     	; 0x1642 <vfprintf+0x2a4>
    1632:	37 2d       	mov	r19, r7
    1634:	3e 7e       	andi	r19, 0xEE	; 238
    1636:	05 c0       	rjmp	.+10     	; 0x1642 <vfprintf+0x2a4>
    1638:	ba 2c       	mov	r11, r10
    163a:	37 2d       	mov	r19, r7
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <vfprintf+0x2a6>
    163e:	ba 2c       	mov	r11, r10
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <vfprintf+0x2a6>
    1642:	b5 2c       	mov	r11, r5
    1644:	34 ff       	sbrs	r19, 4
    1646:	0d c0       	rjmp	.+26     	; 0x1662 <vfprintf+0x2c4>
    1648:	fe 01       	movw	r30, r28
    164a:	ea 0d       	add	r30, r10
    164c:	f1 1d       	adc	r31, r1
    164e:	80 81       	ld	r24, Z
    1650:	80 33       	cpi	r24, 0x30	; 48
    1652:	11 f4       	brne	.+4      	; 0x1658 <vfprintf+0x2ba>
    1654:	39 7e       	andi	r19, 0xE9	; 233
    1656:	09 c0       	rjmp	.+18     	; 0x166a <vfprintf+0x2cc>
    1658:	32 ff       	sbrs	r19, 2
    165a:	06 c0       	rjmp	.+12     	; 0x1668 <vfprintf+0x2ca>
    165c:	b3 94       	inc	r11
    165e:	b3 94       	inc	r11
    1660:	04 c0       	rjmp	.+8      	; 0x166a <vfprintf+0x2cc>
    1662:	83 2f       	mov	r24, r19
    1664:	86 78       	andi	r24, 0x86	; 134
    1666:	09 f0       	breq	.+2      	; 0x166a <vfprintf+0x2cc>
    1668:	b3 94       	inc	r11
    166a:	33 fd       	sbrc	r19, 3
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <vfprintf+0x2f4>
    166e:	30 ff       	sbrs	r19, 0
    1670:	06 c0       	rjmp	.+12     	; 0x167e <vfprintf+0x2e0>
    1672:	5a 2c       	mov	r5, r10
    1674:	b3 14       	cp	r11, r3
    1676:	18 f4       	brcc	.+6      	; 0x167e <vfprintf+0x2e0>
    1678:	53 0c       	add	r5, r3
    167a:	5b 18       	sub	r5, r11
    167c:	b3 2c       	mov	r11, r3
    167e:	b3 14       	cp	r11, r3
    1680:	60 f4       	brcc	.+24     	; 0x169a <vfprintf+0x2fc>
    1682:	b7 01       	movw	r22, r14
    1684:	80 e2       	ldi	r24, 0x20	; 32
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	3c 87       	std	Y+12, r19	; 0x0c
    168a:	62 d0       	rcall	.+196    	; 0x1750 <fputc>
    168c:	b3 94       	inc	r11
    168e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1690:	f6 cf       	rjmp	.-20     	; 0x167e <vfprintf+0x2e0>
    1692:	b3 14       	cp	r11, r3
    1694:	10 f4       	brcc	.+4      	; 0x169a <vfprintf+0x2fc>
    1696:	3b 18       	sub	r3, r11
    1698:	01 c0       	rjmp	.+2      	; 0x169c <vfprintf+0x2fe>
    169a:	31 2c       	mov	r3, r1
    169c:	34 ff       	sbrs	r19, 4
    169e:	11 c0       	rjmp	.+34     	; 0x16c2 <vfprintf+0x324>
    16a0:	b7 01       	movw	r22, r14
    16a2:	80 e3       	ldi	r24, 0x30	; 48
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	3c 87       	std	Y+12, r19	; 0x0c
    16a8:	53 d0       	rcall	.+166    	; 0x1750 <fputc>
    16aa:	3c 85       	ldd	r19, Y+12	; 0x0c
    16ac:	32 ff       	sbrs	r19, 2
    16ae:	16 c0       	rjmp	.+44     	; 0x16dc <vfprintf+0x33e>
    16b0:	31 fd       	sbrc	r19, 1
    16b2:	03 c0       	rjmp	.+6      	; 0x16ba <vfprintf+0x31c>
    16b4:	88 e7       	ldi	r24, 0x78	; 120
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x320>
    16ba:	88 e5       	ldi	r24, 0x58	; 88
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	b7 01       	movw	r22, r14
    16c0:	0c c0       	rjmp	.+24     	; 0x16da <vfprintf+0x33c>
    16c2:	83 2f       	mov	r24, r19
    16c4:	86 78       	andi	r24, 0x86	; 134
    16c6:	51 f0       	breq	.+20     	; 0x16dc <vfprintf+0x33e>
    16c8:	31 ff       	sbrs	r19, 1
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <vfprintf+0x332>
    16cc:	8b e2       	ldi	r24, 0x2B	; 43
    16ce:	01 c0       	rjmp	.+2      	; 0x16d2 <vfprintf+0x334>
    16d0:	80 e2       	ldi	r24, 0x20	; 32
    16d2:	37 fd       	sbrc	r19, 7
    16d4:	8d e2       	ldi	r24, 0x2D	; 45
    16d6:	b7 01       	movw	r22, r14
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	3a d0       	rcall	.+116    	; 0x1750 <fputc>
    16dc:	a5 14       	cp	r10, r5
    16de:	30 f4       	brcc	.+12     	; 0x16ec <vfprintf+0x34e>
    16e0:	b7 01       	movw	r22, r14
    16e2:	80 e3       	ldi	r24, 0x30	; 48
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	34 d0       	rcall	.+104    	; 0x1750 <fputc>
    16e8:	5a 94       	dec	r5
    16ea:	f8 cf       	rjmp	.-16     	; 0x16dc <vfprintf+0x33e>
    16ec:	aa 94       	dec	r10
    16ee:	f4 01       	movw	r30, r8
    16f0:	ea 0d       	add	r30, r10
    16f2:	f1 1d       	adc	r31, r1
    16f4:	80 81       	ld	r24, Z
    16f6:	b7 01       	movw	r22, r14
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	2a d0       	rcall	.+84     	; 0x1750 <fputc>
    16fc:	a1 10       	cpse	r10, r1
    16fe:	f6 cf       	rjmp	.-20     	; 0x16ec <vfprintf+0x34e>
    1700:	33 20       	and	r3, r3
    1702:	09 f4       	brne	.+2      	; 0x1706 <vfprintf+0x368>
    1704:	5d ce       	rjmp	.-838    	; 0x13c0 <vfprintf+0x22>
    1706:	b7 01       	movw	r22, r14
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	21 d0       	rcall	.+66     	; 0x1750 <fputc>
    170e:	3a 94       	dec	r3
    1710:	f7 cf       	rjmp	.-18     	; 0x1700 <vfprintf+0x362>
    1712:	f7 01       	movw	r30, r14
    1714:	86 81       	ldd	r24, Z+6	; 0x06
    1716:	97 81       	ldd	r25, Z+7	; 0x07
    1718:	02 c0       	rjmp	.+4      	; 0x171e <vfprintf+0x380>
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	2c 96       	adiw	r28, 0x0c	; 12
    1720:	e2 e1       	ldi	r30, 0x12	; 18
    1722:	fb cd       	rjmp	.-1034   	; 0x131a <__epilogue_restores__>

00001724 <strnlen_P>:
    1724:	fc 01       	movw	r30, r24
    1726:	05 90       	lpm	r0, Z+
    1728:	61 50       	subi	r22, 0x01	; 1
    172a:	70 40       	sbci	r23, 0x00	; 0
    172c:	01 10       	cpse	r0, r1
    172e:	d8 f7       	brcc	.-10     	; 0x1726 <strnlen_P+0x2>
    1730:	80 95       	com	r24
    1732:	90 95       	com	r25
    1734:	8e 0f       	add	r24, r30
    1736:	9f 1f       	adc	r25, r31
    1738:	08 95       	ret

0000173a <strnlen>:
    173a:	fc 01       	movw	r30, r24
    173c:	61 50       	subi	r22, 0x01	; 1
    173e:	70 40       	sbci	r23, 0x00	; 0
    1740:	01 90       	ld	r0, Z+
    1742:	01 10       	cpse	r0, r1
    1744:	d8 f7       	brcc	.-10     	; 0x173c <strnlen+0x2>
    1746:	80 95       	com	r24
    1748:	90 95       	com	r25
    174a:	8e 0f       	add	r24, r30
    174c:	9f 1f       	adc	r25, r31
    174e:	08 95       	ret

00001750 <fputc>:
    1750:	0f 93       	push	r16
    1752:	1f 93       	push	r17
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	fb 01       	movw	r30, r22
    175a:	23 81       	ldd	r18, Z+3	; 0x03
    175c:	21 fd       	sbrc	r18, 1
    175e:	03 c0       	rjmp	.+6      	; 0x1766 <fputc+0x16>
    1760:	8f ef       	ldi	r24, 0xFF	; 255
    1762:	9f ef       	ldi	r25, 0xFF	; 255
    1764:	28 c0       	rjmp	.+80     	; 0x17b6 <fputc+0x66>
    1766:	22 ff       	sbrs	r18, 2
    1768:	16 c0       	rjmp	.+44     	; 0x1796 <fputc+0x46>
    176a:	46 81       	ldd	r20, Z+6	; 0x06
    176c:	57 81       	ldd	r21, Z+7	; 0x07
    176e:	24 81       	ldd	r18, Z+4	; 0x04
    1770:	35 81       	ldd	r19, Z+5	; 0x05
    1772:	42 17       	cp	r20, r18
    1774:	53 07       	cpc	r21, r19
    1776:	44 f4       	brge	.+16     	; 0x1788 <fputc+0x38>
    1778:	a0 81       	ld	r26, Z
    177a:	b1 81       	ldd	r27, Z+1	; 0x01
    177c:	9d 01       	movw	r18, r26
    177e:	2f 5f       	subi	r18, 0xFF	; 255
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	31 83       	std	Z+1, r19	; 0x01
    1784:	20 83       	st	Z, r18
    1786:	8c 93       	st	X, r24
    1788:	26 81       	ldd	r18, Z+6	; 0x06
    178a:	37 81       	ldd	r19, Z+7	; 0x07
    178c:	2f 5f       	subi	r18, 0xFF	; 255
    178e:	3f 4f       	sbci	r19, 0xFF	; 255
    1790:	37 83       	std	Z+7, r19	; 0x07
    1792:	26 83       	std	Z+6, r18	; 0x06
    1794:	10 c0       	rjmp	.+32     	; 0x17b6 <fputc+0x66>
    1796:	eb 01       	movw	r28, r22
    1798:	09 2f       	mov	r16, r25
    179a:	18 2f       	mov	r17, r24
    179c:	00 84       	ldd	r0, Z+8	; 0x08
    179e:	f1 85       	ldd	r31, Z+9	; 0x09
    17a0:	e0 2d       	mov	r30, r0
    17a2:	09 95       	icall
    17a4:	89 2b       	or	r24, r25
    17a6:	e1 f6       	brne	.-72     	; 0x1760 <fputc+0x10>
    17a8:	8e 81       	ldd	r24, Y+6	; 0x06
    17aa:	9f 81       	ldd	r25, Y+7	; 0x07
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	9f 83       	std	Y+7, r25	; 0x07
    17b0:	8e 83       	std	Y+6, r24	; 0x06
    17b2:	81 2f       	mov	r24, r17
    17b4:	90 2f       	mov	r25, r16
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	1f 91       	pop	r17
    17bc:	0f 91       	pop	r16
    17be:	08 95       	ret

000017c0 <__ultoa_invert>:
    17c0:	fa 01       	movw	r30, r20
    17c2:	aa 27       	eor	r26, r26
    17c4:	28 30       	cpi	r18, 0x08	; 8
    17c6:	51 f1       	breq	.+84     	; 0x181c <__ultoa_invert+0x5c>
    17c8:	20 31       	cpi	r18, 0x10	; 16
    17ca:	81 f1       	breq	.+96     	; 0x182c <__ultoa_invert+0x6c>
    17cc:	e8 94       	clt
    17ce:	6f 93       	push	r22
    17d0:	6e 7f       	andi	r22, 0xFE	; 254
    17d2:	6e 5f       	subi	r22, 0xFE	; 254
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	8f 4f       	sbci	r24, 0xFF	; 255
    17d8:	9f 4f       	sbci	r25, 0xFF	; 255
    17da:	af 4f       	sbci	r26, 0xFF	; 255
    17dc:	b1 e0       	ldi	r27, 0x01	; 1
    17de:	3e d0       	rcall	.+124    	; 0x185c <__ultoa_invert+0x9c>
    17e0:	b4 e0       	ldi	r27, 0x04	; 4
    17e2:	3c d0       	rcall	.+120    	; 0x185c <__ultoa_invert+0x9c>
    17e4:	67 0f       	add	r22, r23
    17e6:	78 1f       	adc	r23, r24
    17e8:	89 1f       	adc	r24, r25
    17ea:	9a 1f       	adc	r25, r26
    17ec:	a1 1d       	adc	r26, r1
    17ee:	68 0f       	add	r22, r24
    17f0:	79 1f       	adc	r23, r25
    17f2:	8a 1f       	adc	r24, r26
    17f4:	91 1d       	adc	r25, r1
    17f6:	a1 1d       	adc	r26, r1
    17f8:	6a 0f       	add	r22, r26
    17fa:	71 1d       	adc	r23, r1
    17fc:	81 1d       	adc	r24, r1
    17fe:	91 1d       	adc	r25, r1
    1800:	a1 1d       	adc	r26, r1
    1802:	20 d0       	rcall	.+64     	; 0x1844 <__ultoa_invert+0x84>
    1804:	09 f4       	brne	.+2      	; 0x1808 <__ultoa_invert+0x48>
    1806:	68 94       	set
    1808:	3f 91       	pop	r19
    180a:	2a e0       	ldi	r18, 0x0A	; 10
    180c:	26 9f       	mul	r18, r22
    180e:	11 24       	eor	r1, r1
    1810:	30 19       	sub	r19, r0
    1812:	30 5d       	subi	r19, 0xD0	; 208
    1814:	31 93       	st	Z+, r19
    1816:	de f6       	brtc	.-74     	; 0x17ce <__ultoa_invert+0xe>
    1818:	cf 01       	movw	r24, r30
    181a:	08 95       	ret
    181c:	46 2f       	mov	r20, r22
    181e:	47 70       	andi	r20, 0x07	; 7
    1820:	40 5d       	subi	r20, 0xD0	; 208
    1822:	41 93       	st	Z+, r20
    1824:	b3 e0       	ldi	r27, 0x03	; 3
    1826:	0f d0       	rcall	.+30     	; 0x1846 <__ultoa_invert+0x86>
    1828:	c9 f7       	brne	.-14     	; 0x181c <__ultoa_invert+0x5c>
    182a:	f6 cf       	rjmp	.-20     	; 0x1818 <__ultoa_invert+0x58>
    182c:	46 2f       	mov	r20, r22
    182e:	4f 70       	andi	r20, 0x0F	; 15
    1830:	40 5d       	subi	r20, 0xD0	; 208
    1832:	4a 33       	cpi	r20, 0x3A	; 58
    1834:	18 f0       	brcs	.+6      	; 0x183c <__ultoa_invert+0x7c>
    1836:	49 5d       	subi	r20, 0xD9	; 217
    1838:	31 fd       	sbrc	r19, 1
    183a:	40 52       	subi	r20, 0x20	; 32
    183c:	41 93       	st	Z+, r20
    183e:	02 d0       	rcall	.+4      	; 0x1844 <__ultoa_invert+0x84>
    1840:	a9 f7       	brne	.-22     	; 0x182c <__ultoa_invert+0x6c>
    1842:	ea cf       	rjmp	.-44     	; 0x1818 <__ultoa_invert+0x58>
    1844:	b4 e0       	ldi	r27, 0x04	; 4
    1846:	a6 95       	lsr	r26
    1848:	97 95       	ror	r25
    184a:	87 95       	ror	r24
    184c:	77 95       	ror	r23
    184e:	67 95       	ror	r22
    1850:	ba 95       	dec	r27
    1852:	c9 f7       	brne	.-14     	; 0x1846 <__ultoa_invert+0x86>
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	61 05       	cpc	r22, r1
    1858:	71 05       	cpc	r23, r1
    185a:	08 95       	ret
    185c:	9b 01       	movw	r18, r22
    185e:	ac 01       	movw	r20, r24
    1860:	0a 2e       	mov	r0, r26
    1862:	06 94       	lsr	r0
    1864:	57 95       	ror	r21
    1866:	47 95       	ror	r20
    1868:	37 95       	ror	r19
    186a:	27 95       	ror	r18
    186c:	ba 95       	dec	r27
    186e:	c9 f7       	brne	.-14     	; 0x1862 <__ultoa_invert+0xa2>
    1870:	62 0f       	add	r22, r18
    1872:	73 1f       	adc	r23, r19
    1874:	84 1f       	adc	r24, r20
    1876:	95 1f       	adc	r25, r21
    1878:	a0 1d       	adc	r26, r0
    187a:	08 95       	ret

0000187c <_exit>:
    187c:	f8 94       	cli

0000187e <__stop_program>:
    187e:	ff cf       	rjmp	.-2      	; 0x187e <__stop_program>
